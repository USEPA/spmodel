[{"path":"/articles/basics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Overview of Basic Features in spmodel","text":"spmodel package used fit summarize spatial models make predictions unobserved locations (Kriging). vignette provides overview basic features spmodel. load spmodel running use spmodel formal publication report, please cite . Citing spmodel lets us devote resources future. view spmodel citation running two additional spmodel vignettes: detailed guide spmodel: vignette(\"guide\", \"spmodel\") Technical details regarding many functions: vignette(\"technical\", \"spmodel\")","code":"library(spmodel) citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical #>   modeling and prediction in R. PLOS ONE 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   }"},{"path":"/articles/basics.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The Data","title":"An Overview of Basic Features in spmodel","text":"Many data sets use vignette sf objects. sf objects data frames (tibbles) special structure stores spatial information. built using sf (Pebesma 2018) package, installed alongside spmodel. use six data sets throughout vignette: moss: sf object heavy metal concentrations Alaska. sulfate: sf object sulfate measurements conterminous United States. sulfate_preds: sf object locations predict sulfate measurements conterminous United States. caribou: tibble (special data.frame) caribou foraging experiment Alaska. moose: sf object moose measurements Alaska. moose_preds: sf object locations predict moose measurements Alaska. create visualizations using ggplot2 (Wickham 2016), load running ggplot2 installed alongside spmodel dependencies = TRUE install.packages(), check installed reproducing visualizations vignette.","code":"library(ggplot2)"},{"path":"/articles/basics.html","id":"sec:splm","dir":"Articles","previous_headings":"","what":"Spatial Linear Models","title":"An Overview of Basic Features in spmodel","text":"Spatial linear models quantitative response vector \\(\\mathbf{y}\\) spatially dependent random errors often parameterized \\[\\begin{equation*} \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation*}\\] \\(\\mathbf{X}\\) matrix explanatory variables (usually including column 1’s intercept), \\(\\boldsymbol{\\beta}\\) vector fixed effects describe average impact \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), \\(\\boldsymbol{\\tau}\\) vector spatially dependent (correlated) random errors, \\(\\boldsymbol{\\epsilon}\\) vector spatially independent (uncorrelated) random errors. spatial dependence \\(\\boldsymbol{\\tau}\\) explicitly specified using spatial covariance function incorporates variance \\(\\boldsymbol{\\tau}\\), often called partial sill, range parameter controls behavior spatial covariance. variance \\(\\boldsymbol{\\epsilon}\\) often called nugget. Spatial linear models fit spmodel point-referenced areal data. Data point-referenced elements \\(\\mathbf{y}\\) observed point-locations indexed x-coordinates y-coordinates spatially continuous surface infinite number locations. splm() function used fit spatial linear models point-referenced data (often called geostatistical models). Data areal elements \\(\\mathbf{y}\\) observed part finite network polygons whose connections indexed neighborhood structure. example, polygons may represent counties state neighbors share least one boundary. spautor() function used fit spatial linear models areal data (often called spatial autoregressive models). vignette focuses spatial linear models point-referenced data, though spmodel’s vignettes discuss spatial linear models areal data. splm() function similar syntax output commonly used lm() function used fit non-spatial linear models. splm() generally requires least three arguments: formula uses syntax formula argument lm() data: data.frame sf object contains response variable, explanatory variables, spatial information. spcov_type: spatial covariance type (\"exponential\", \"spherical\", \"matern\", etc). data sf object, coordinate information taken object’s geometry. data data.frame (tibble), xcoord ycoord required arguments splm() specify columns data representing x-coordinates y-coordinates, respectively. spmodel uses spatial coordinates “-,” meaning spmodel perform projections. project data change coordinate reference system, use sf::st_transform(). sf object polygon geometries given splm(), centroids polygon used fit spatial linear model. Next show basic features syntax splm() using Alaskan moss data. study impact log distance road (log_dist2road) log zinc concentration (log_Zn). view first rows moss data running can visualize distribution log zinc concentration (log_Zn) running  Log zinc concentration appears highest middle spatial domain, road running . fit spatial linear model regressing log zinc concentration log distance road using exponential spatial covariance function running estimation method specified via estmethod argument, default value \"reml\" restricted maximum likelihood. estimation methods \"ml\" maximum likelihood, \"sv-wls\" semivariogram weighted least squares, \"sv-cl\" semivariogram composite likelihood. Printing spmod shows function call, estimated fixed effect coefficients, estimated spatial covariance parameters. de estimated variance \\(\\boldsymbol{\\tau}\\) (spatially dependent random error), ie estimated variance \\(\\boldsymbol{\\epsilon}\\) (spatially independent random error), range range parameter. Next show obtain detailed summary information fitted model.","code":"moss #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 x 8 #>    sample field_dup lab_rep year  sideroad log_dist2road log_Zn #>    <fct>  <fct>     <fct>   <fct> <fct>            <dbl>  <dbl> #>  1 001PR  1         1       2001  N                 2.68   7.33 #>  2 001PR  1         2       2001  N                 2.68   7.38 #>  3 002PR  1         1       2001  N                 2.54   7.58 #>  4 003PR  1         1       2001  N                 2.97   7.63 #>  5 004PR  1         1       2001  N                 2.72   7.26 #>  6 005PR  1         1       2001  N                 2.76   7.65 #>  7 006PR  1         1       2001  S                 2.30   7.59 #>  8 007PR  1         1       2001  N                 2.78   7.16 #>  9 008PR  1         1       2001  N                 2.93   7.19 #> 10 009PR  1         1       2001  N                 2.79   8.07 #> # ... with 355 more rows, and 1 more variable: geometry <POINT [m]> ggplot(moss, aes(color = log_Zn)) +   geom_sf() +   scale_color_viridis_c() spmod <- splm(log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") print(spmod) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") #>  #>  #> Coefficients (fixed): #>   (Intercept)  log_dist2road   #>        9.7683        -0.5629   #>  #>  #> Coefficients (exponential spatial covariance): #>        de         ie      range   #> 3.595e-01  7.897e-02  8.237e+03"},{"path":"/articles/basics.html","id":"model-summaries","dir":"Articles","previous_headings":"Spatial Linear Models","what":"Model Summaries","title":"An Overview of Basic Features in spmodel","text":"summarize fitted model running Similar summaries lm() objects, summaries splm() objects include original function call, residuals, coefficients table fixed effects. Log zinc concentration appears significantly decrease log distance road, evidenced small p-value associated asymptotic z-test. pseudo r-squared also returned, quantifies proportion variability explained fixed effects. remainder subsection, describe broom (Robinson, Hayes, Couch 2021) functions tidy(), glance() augment(). tidy() tidies coefficient output convenient tibble, glance() glances model-fit statistics, augment() augments data fitted model diagnostics. tidy fixed effects running glance model-fit statistics running columns tibble represent: n: sample size p: number fixed effects (linearly independent columns \\(\\mathbf{X}\\)) npar: number estimated covariance parameters value: value minimized objective function used fitting model AIC: Akaike Information Criterion (AIC) AICc: AIC small sample size correction logLik: log-likelihood deviance: deviance pseudo.r.squared: pseudo r-squared glances() function can used glance multiple models . Suppose wanted compare current model, uses exponential spatial covariance, new model without spatial covariance (equivalent model fit using lm()). using glances() running much lower AIC AICc spatial linear model indicates much better fit data. Outside glance() glances(), functions AIC(), AICc(), logLik(), deviance(), pseudoR2() available compute relevant statistics. augment data diagnostics running columns tibble represent: log_Zn: log zinc concentration. log_dist2road: log distance road. .fitted: fitted values (estimated mean given explanatory variable values). .resid: residuals (response minus fitted values). .hat: leverage (hat) values. .cooksd: Cook’s distance .std.residuals: Standardized residuals geometry: spatial information sf object. default, augment() returns variables data used model. variables original data returned setting drop = FALSE. Many model diagnostics can visualized running plot(spmod). can learn plot() spmodel running help(\"plot.spmodel\", \"spmodel\").","code":"summary(spmod) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.6801 -1.3606 -0.8103 -0.2485  1.1298  #>  #> Coefficients (fixed): #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)    9.76825    0.25216   38.74   <2e-16 *** #> log_dist2road -0.56287    0.02013  -27.96   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.683 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.595e-01 7.897e-02 8.237e+03 tidy(spmod) #> # A tibble: 2 x 5 #>   term          estimate std.error statistic p.value #>   <chr>            <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)      9.77     0.252       38.7       0 #> 2 log_dist2road   -0.563    0.0201     -28.0       0 glance(spmod) #> # A tibble: 1 x 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   365     2     3  367.  373.  373.  -184.     363.            0.683 lmod <- splm(log_Zn ~ log_dist2road, data = moss, spcov_type = \"none\") glances(spmod, lmod) #> # A tibble: 2 x 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spmod   365     2     3  367.  373.  373.  -184.     363.            0.683 #> 2 lmod    365     2     1  634.  636.  636.  -317.     363.            0.671 augment(spmod) #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 x 8 #>    log_Zn log_dist2road .fitted .resid   .hat .cooksd .std.resid #>  *  <dbl>         <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl> #>  1   7.33          2.68    8.26 -0.928 0.0200 0.0142       1.18  #>  2   7.38          2.68    8.26 -0.880 0.0200 0.0186       1.35  #>  3   7.58          2.54    8.34 -0.755 0.0225 0.00482      0.647 #>  4   7.63          2.97    8.09 -0.464 0.0197 0.0305       1.74  #>  5   7.26          2.72    8.24 -0.977 0.0215 0.131        3.45  #>  6   7.65          2.76    8.21 -0.568 0.0284 0.0521       1.89  #>  7   7.59          2.30    8.47 -0.886 0.0300 0.0591       1.96  #>  8   7.16          2.78    8.20 -1.05  0.0335 0.00334      0.439 #>  9   7.19          2.93    8.12 -0.926 0.0378 0.0309       1.26  #> 10   8.07          2.79    8.20 -0.123 0.0314 0.00847      0.723 #> # ... with 355 more rows, and 1 more variable: geometry <POINT [m]>"},{"path":"/articles/basics.html","id":"prediction-kriging","dir":"Articles","previous_headings":"Spatial Linear Models","what":"Prediction (Kriging)","title":"An Overview of Basic Features in spmodel","text":"Commonly goal data analysis make predictions unobserved locations. spatial contexts, prediction often called Kriging. Next use sulfate data build spatial linear model sulfate measurements conterminous United States goal making sulfate predictions (Kriging) unobserved locations sulfate_preds. visualize distribution sulfate running  Sulfate appears spatially dependent, measurements highest Northeast lowest Midwest West. fit spatial linear model regressing sulfate intercept using spherical spatial covariance function running make predictions locations sulfate_preds store new variable called preds sulfate_preds data set running visualize predictions running  predictions similar sulfate patterns observed data (predicted values highest Northeast lowest Midwest West). Next remove model predictions sulfate_preds showing augment() can used obtain predictions: augment() previously used augment original data model diagnostics, can also used augment newdata data predictions: .fitted represents predictions. Confidence intervals mean response prediction intervals predicted response can obtained specifying interval argument predict() augment(): default, predict() augment() compute 95% intervals, though can changed using level argument. fitted model example used intercept, code used prediction fitted models explanatory variables. explanatory variables used fit model, explanatory variables must included newdata names data. data data.frame, coordinates must included newdata names data. data sf object, coordinates must included newdata geometry name data. using projected coordinates, projection newdata projection data.","code":"ggplot(sulfate, aes(color = sulfate)) +   geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 45)) sulfmod <- splm(sulfate ~ 1, data = sulfate, spcov_type =  \"spherical\") sulfate_preds$preds <- predict(sulfmod, newdata = sulfate_preds) ggplot(sulfate_preds, aes(color = preds)) +   geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 45)) sulfate_preds$preds <- NULL augment(sulfmod, newdata = sulfate_preds) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 x 2 #>    .fitted            geometry #>  *   <dbl>         <POINT [m]> #>  1    1.40  (-1771413 1752976) #>  2   24.5    (1018112 1867127) #>  3    8.99 (-291256.8 1553212) #>  4   16.4    (1274293 1267835) #>  5    4.91 (-547437.6 1638825) #>  6   26.7    (1445080 1981278) #>  7    3.00  (-1629090 3037173) #>  8   14.3    (1302757 1039534) #>  9    1.49  (-1429838 2523494) #> 10   14.4    (1131970 1096609) #> # ... with 90 more rows augment(sulfmod, newdata = sulfate_preds, interval = \"prediction\") #> Simple feature collection with 100 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 x 4 #>    .fitted .lower .upper            geometry #>  *   <dbl>  <dbl>  <dbl>         <POINT [m]> #>  1    1.40  -6.62   9.42  (-1771413 1752976) #>  2   24.5   17.0   32.0    (1018112 1867127) #>  3    8.99   1.09  16.9  (-291256.8 1553212) #>  4   16.4    8.67  24.2    (1274293 1267835) #>  5    4.91  -2.80  12.6  (-547437.6 1638825) #>  6   26.7   19.2   34.2    (1445080 1981278) #>  7    3.00  -4.92  10.9   (-1629090 3037173) #>  8   14.3    6.76  21.8    (1302757 1039534) #>  9    1.49  -6.34   9.32  (-1429838 2523494) #> 10   14.4    6.74  22.1    (1131970 1096609) #> # ... with 90 more rows"},{"path":"/articles/basics.html","id":"an-additional-example","dir":"Articles","previous_headings":"Spatial Linear Models","what":"An Additional Example","title":"An Overview of Basic Features in spmodel","text":"now use caribou data foraging experiment conducted Alaska show application splm() data stored tibble (data.frame) instead sf object. caribou, x-coordinates stored x column y-coordinates stored y column. view first rows caribou running fit spatial linear model regressing nitrogen percentage (z) water presence (water) tarp cover (tarp) running analysis variance can conducted assess overall impact tarp variable, three levels (clear, shade, none), water variable, two levels (water water). perform analysis variance running seems significant evidence least one tarp cover impacts nitrogen. Note , like summary(), p-values associated asymptotic hypothesis test (, asymptotic Chi-squared test).","code":"caribou #> # A tibble: 30 x 5 #>    water tarp      z     x     y #>    <fct> <fct> <dbl> <dbl> <dbl> #>  1 Y     clear  2.42     1     6 #>  2 Y     shade  2.44     2     6 #>  3 Y     none   1.81     3     6 #>  4 N     clear  1.97     4     6 #>  5 N     shade  2.38     5     6 #>  6 Y     none   2.22     1     5 #>  7 N     clear  2.10     2     5 #>  8 Y     clear  1.80     3     5 #>  9 Y     shade  1.96     4     5 #> 10 Y     none   2.10     5     5 #> # ... with 20 more rows cariboumod <- splm(z ~ water + tarp, data = caribou,                    spcov_type = \"exponential\", xcoord = x, ycoord = y) anova(cariboumod) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/articles/basics.html","id":"spatial-generalized-linear-models","dir":"Articles","previous_headings":"","what":"Spatial Generalized Linear Models","title":"An Overview of Basic Features in spmodel","text":"building spatial linear models, response vector \\(\\mathbf{y}\\) typically assumed Gaussian (given \\(\\mathbf{X}\\)). Relaxing assumption distribution \\(\\mathbf{y}\\) yields rich class spatial generalized linear models can describe binary data, proportion data, count data, skewed data. Spatial generalized linear models parameterized \\[\\begin{equation*} g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation*}\\] \\(g(\\cdot)\\) called link function, \\(\\boldsymbol{\\mu}\\) mean \\(\\mathbf{y}\\), remaining terms \\(\\mathbf{X}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\) represent quantities spatial linear models (Section\\(~\\)). link function, \\(g(\\cdot)\\), “links” function \\(\\boldsymbol{\\mu}\\) linear term \\(\\boldsymbol{\\eta}\\), denoted \\(\\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\), familiar spatial linear models. Note linking \\(\\boldsymbol{\\mu}\\) \\(\\boldsymbol{\\eta}\\) applies element-wise vector. link function \\(g(\\cdot)\\) corresponding inverse link function, \\(g^{-1}(\\cdot)\\). inverse link function “links” function \\(\\boldsymbol{\\eta}\\) \\(\\boldsymbol{\\mu}\\). Notice spatial generalized linear models, modeling \\(\\mathbf{y}\\) directly spatial linear models, rather modeling function mean \\(\\mathbf{y}\\). Also notice \\(\\boldsymbol{\\eta}\\) unconstrained \\(\\boldsymbol{\\mu}\\) usually constrained way (e.g., positive). Next discuss specific distributions link functions used spmodel. spmodel allows fitting spatial generalized linear models \\(\\mathbf{y}\\) binomial (Bernoulli), beta, Poisson, negative binomial, gamma, inverse Gaussian random vector. binomial beta \\(\\mathbf{y}\\), logit link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\frac{\\boldsymbol{\\mu}}{1 - \\boldsymbol{\\mu}}) = \\boldsymbol{\\eta}\\), inverse logit link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\frac{\\exp(\\boldsymbol{\\eta})}{1 + \\exp(\\boldsymbol{\\eta})} = \\boldsymbol{\\mu}\\). Poisson, negative binomial, gamma, inverse Gaussian \\(\\mathbf{y}\\), log link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta}\\), inverse log link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\exp(\\boldsymbol{\\eta}) = \\boldsymbol{\\mu}\\). spatial linear models, spatial generalized linear models fit spmodel point-referenced areal data. spglm() function used fit spatial generalized linear models point-referenced data, spgautor() function used fit spatial generalized linear models areal data. Though vignette focuses point-referenced data, spmodel’s vignettes discuss spatial generalized linear models areal data. spglm() function quite similar splm() function, though one additional argument required: family uses similar syntax family argument glm(). One difference family spglm() compared family glm() link function fixed spglm(). Next show basic features syntax spglm() using moose data. study impact elevation (elev) presence moose (presence) observed site location Alaska. presence equals one least one moose observed site zero otherwise. view first rows moose data running can visualize distribution moose presence running  One example generalized linear model binomial (e.g., logistic) regression model. Binomial regression models often used model presence data . quantify relationship moose presence elevation, fit spatial binomial regression model (specific spatial generalized linear model) running estimation method specified via estmethod argument, default value \"reml\" restricted maximum likelihood. estimation method \"ml\" maximum likelihood. Printing binmod shows function call, estimated fixed effect coefficients (link scale), estimated spatial covariance parameters, dispersion parameter. dispersion parameter estimated spatial generalized linear models changes mean-variance relationship \\(\\mathbf{y}\\). binomial regression models, dispersion parameter estimated always fixed one.","code":"moose #> Simple feature collection with 218 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> First 10 features: #>        elev strat count presence                 geometry #> 1  468.9167     L     0        0 POINT (293542.6 1541016) #> 2  362.3125     L     0        0 POINT (298313.1 1533972) #> 3  172.7500     M     0        0 POINT (281896.4 1532516) #> 4  279.6250     L     0        0 POINT (298651.3 1530264) #> 5  619.6000     L     0        0 POINT (311325.3 1527705) #> 6  164.1250     M     0        0 POINT (291421.5 1518398) #> 7  163.5000     M     0        0 POINT (287298.3 1518035) #> 8  186.3500     L     0        0 POINT (279050.9 1517324) #> 9  362.3125     L     0        0 POINT (346145.9 1512479) #> 10 430.5000     L     0        0 POINT (321354.6 1509966) ggplot(moose, aes(color = presence)) +   scale_color_viridis_d() +   geom_sf(size = 2) binmod <- spglm(presence ~ elev, family = \"binomial\",                 data  = moose, spcov_type = \"exponential\") print(binmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #>  #> Coefficients (fixed): #> (Intercept)         elev   #>   -0.874038     0.002365   #>  #>  #> Coefficients (exponential spatial covariance): #>        de         ie      range   #> 3.746e+00  4.392e-03  3.203e+04   #>  #>  #> Coefficients (Dispersion for binomial family): #> dispersion   #>          1"},{"path":"/articles/basics.html","id":"model-summaries-1","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Model Summaries","title":"An Overview of Basic Features in spmodel","text":"summarize fitted model running Similar summaries glm() objects, summaries spglm() objects include original function call, summary statistics deviance residuals, coefficients table fixed effects. logit moose presence probability appear related elevation, evidenced large p-value associated asymptotic z-test. pseudo r-squared also returned, quantifies proportion variability explained fixed effects. spatial covariance parameters dispersion parameter also returned. tidy(), glance(), augment() functions behave similarly spglm() objects splm() objects. tidy fixed effects (link scale) running glance model-fit statistics running glance spatial binomial regression model non-spatial binomial regression model running lower AIC AICc spatial binomial regression model indicates much better fit data. augment data diagnostics running","code":"summary(binmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #> Deviance Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5249 -0.8114  0.5600  0.8306  1.5757  #>  #> Coefficients (fixed): #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) -0.874038   1.140953  -0.766    0.444 #> elev         0.002365   0.003184   0.743    0.458 #>  #> Pseudo R-squared: 0.00311 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.746e+00 4.392e-03 3.203e+04  #>  #> Coefficients (Dispersion for binomial family): #> dispersion  #>          1 tidy(binmod) #> # A tibble: 2 x 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept) -0.874     1.14       -0.766   0.444 #> 2 elev         0.00237   0.00318     0.743   0.458 glance(binmod) #> # A tibble: 1 x 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   218     2     3  692.  698.  698.  -346.     190.          0.00311 glmod <- spglm(presence ~ elev, family = \"binomial\", data = moose, spcov_type = \"none\") glances(binmod, glmod) #> # A tibble: 2 x 10 #>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 binmod   218     2     3  692.  698.  698.  -346.     190.          0.00311 #> 2 glmod    218     2     1  715.  717.  717.  -358.     302.          0.00185 augment(binmod) #> Simple feature collection with 218 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419057.4 ymax: 1541016 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 218 x 8 #>    presence  elev .fitted .resid    .hat  .cooksd .std.resid #>  * <fct>    <dbl>   <dbl>  <dbl>   <dbl>    <dbl>      <dbl> #>  1 0         469.  0.150  -0.571 0.0500  0.00904      -0.586 #>  2 0         362.  0.107  -0.477 0.0168  0.00198      -0.481 #>  3 0         173.  0.104  -0.468 0.00213 0.000235     -0.469 #>  4 0         280.  0.0939 -0.444 0.00616 0.000615     -0.445 #>  5 0         620.  0.198  -0.664 0.136   0.0402       -0.714 #>  6 0         164.  0.130  -0.528 0.00260 0.000364     -0.528 #>  7 0         164.  0.135  -0.538 0.00269 0.000392     -0.539 #>  8 0         186.  0.166  -0.603 0.00332 0.000607     -0.604 #>  9 0         362.  0.168  -0.606 0.0245  0.00474      -0.614 #> 10 0         430.  0.225  -0.714 0.0528  0.0150       -0.734 #> # ... with 208 more rows, and 1 more variable: geometry <POINT [m]>"},{"path":"/articles/basics.html","id":"prediction-kriging-1","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Prediction (Kriging)","title":"An Overview of Basic Features in spmodel","text":"spatial generalized linear models, predicting mean process generating observation rather observation . make predictions moose presence probability locations moose_preds running type argument specifies whether predictions returned link response (inverse link) scale. visualize predictions running  predictions similar spatial patterns moose presence observed data. Next remove model predictions moose_preds show augment() can used obtain predictions alongside prediction intervals (response scale):","code":"moose_preds$preds <- predict(binmod, newdata = moose_preds, type = \"response\") ggplot(moose_preds, aes(color = preds)) +    geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 1)) moose_preds$preds <- NULL augment(binmod, newdata = moose_preds, type = \"response\", interval = \"prediction\") #> Simple feature collection with 100 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 100 x 6 #>     elev strat .fitted .lower .upper           geometry #>  * <dbl> <chr>   <dbl>  <dbl>  <dbl>        <POINT [m]> #>  1  143. L       0.705 0.248   0.946 (401239.6 1436192) #>  2  324. L       0.336 0.0373  0.868 (352640.6 1490695) #>  3  158. L       0.263 0.0321  0.792 (360954.9 1491590) #>  4  221. M       0.243 0.0360  0.734 (291839.8 1466091) #>  5  209. M       0.742 0.270   0.957 (310991.9 1441630) #>  6  218. L       0.191 0.0196  0.736 (304473.8 1512103) #>  7  127. L       0.179 0.0226  0.673 (339011.1 1459318) #>  8  122. L       0.241 0.0344  0.738 (342827.3 1463452) #>  9  191  L       0.386 0.0414  0.902 (284453.8 1502837) #> 10  105. L       0.494 0.114   0.882 (391343.9 1483791) #> # ... with 90 more rows"},{"path":"/articles/basics.html","id":"function-glossary","dir":"Articles","previous_headings":"","what":"Function Glossary","title":"An Overview of Basic Features in spmodel","text":"list commonly used spmodel functions. AIC(): Compute AIC. AICc(): Compute AICc. anova(): Perform analysis variance. augment(): Augment data diagnostics new data predictions. coef(): Return coefficients. confint(): Compute confidence intervals. cooks.distance(): Compute Cook’s distance. covmatrix(): Return covariance matrices. deviance(): Compute deviance. esv(): Compute empirical semivariogram. fitted(): Compute fitted values. glance(): Glance fitted model. glances(): Glance multiple fitted models. hatvalues(): Compute leverage (hat) values. logLik(): Compute log-likelihood. loocv(): Perform leave-one-cross validation. model.matrix(): Return model matrix (\\(\\mathbf{X}\\)). plot(): Create fitted model plots. predict(): Compute predictions prediction intervals. pseudoR2(): Compute pseudo r-squared. residuals(): Compute residuals. spautor(): Fit spatial linear model areal data (.e., spatial autoregressive model). spautorRF(): Fit random forest spatial residual model areal data. spgautor(): Fit spatial generalized linear model areal data (.e., spatial generalized autoregressive model). splm(): Fit spatial linear model point-referenced data (.e., geostatistical model). splmRF(): Fit random forest spatial residual model point-referenced data. spglm(): Fit spatial generalized linear model point-referenced data (.e., generalized geostatistical model). sprbeta(): Simulate spatially correlated beta random variables. sprbinom(): Simulate spatially correlated binomial (Bernoulli) random variables. sprgamma(): Simulate spatially correlated gamma random variables. sprinvgauss(): Simulate spatially correlated inverse Gaussian random variables. sprnbinom(): Simulate spatially correlated negative binomial random variables. sprnorm(): Simulate spatially correlated normal (Gaussian) random variables. sprpois(): Simulate spatially correlated Poisson random variables. summary(): Summarize fitted models. tidy(): Tidy fitted models. varcomp(): Compare variance components. vcov(): Compute variance-covariance matrices estimated parameters. full list spmodel functions alongside documentation, see documentation manual. Documentation methods generic functions defined outside spmodel can found running help(\"generic.spmodel\", \"spmodel\") (e.g., help(\"summary.spmodel\", \"spmodel\"), help(\"predict.spmodel\", \"spmodel\"), etc.). Note ?generic.spmodel shorthand help(\"generic.spmodel\", \"spmodel\").","code":""},{"path":"/articles/basics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"An Overview of Basic Features in spmodel","text":"Pebesma, Edzer. 2018. “Simple Features R: Standardized Support Spatial Vector Data.” R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009. Robinson, David, Alex Hayes, Simon Couch. 2021. Broom: Convert Statistical Objects Tidy Tibbles. https://CRAN.R-project.org/package=broom. Wickham, Hadley. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.","code":""},{"path":"/articles/guide.html","id":"sec:introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Detailed Guide to spmodel","text":"spmodel package used fit, summarize, predict variety spatial statistical models. vignette provides introduction basic advanced features spmodel package coupled brief theoretical explanation methods. First give brief theoretical introduction spatial linear models. outline variety methods used estimate parameters spatial linear models. explain obtain predictions unobserved locations. detail advanced modeling features, including random effects, partition factors, anisotropy, big data approaches, spatial generalized linear models. Finally end short discussion. proceeding, load spmodel running using spmodel formal publication report, please cite . Citing spmodel lets us devote resources package future. view spmodel citation running create visualizations using ggplot2 (Wickham 2016), load running ggplot2 installed alongside spmodel dependencies = TRUE install.packages(), check package installed loaded reproducing vignette’s visualizations. also show code can used create interactive visualizations spatial data mapview (Appelhans et al. 2022). mapview also many backgrounds available contextualize spatial data topographical information. running mapview code interactively, make sure mapview installed loaded. spmodel contains various methods generic functions defined outside spmodel. find relevant documentation methods, run help(\"generic.spmodel\", \"spmodel\") (e.g., help(\"summary.spmodel\", \"spmodel\"), help(\"predict.spmodel\", \"spmodel\"), etc.). Note ?generic.spmodel shorthand help(\"generic.spmodel\", \"spmodel\"). provide details examples regarding methods generics throughout vignette. full list spmodel functions available, see spmodel’s documentation manual.","code":"library(spmodel) citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical #>   modeling and prediction in R. PLOS ONE 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   } library(ggplot2)"},{"path":"/articles/guide.html","id":"sec:theomodel","dir":"Articles","previous_headings":"","what":"The Spatial Linear Model","title":"A Detailed Guide to spmodel","text":"Statistical linear models often parameterized \\[ \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}, \\] sample size \\(n\\), \\(\\mathbf{y}\\) \\(n \\times 1\\) column vector response variables, \\(\\mathbf{X}\\) \\(n \\times p\\) design (model) matrix explanatory variables, \\(\\boldsymbol{\\beta}\\) \\(p \\times 1\\) column vector fixed effects controlling impact \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), \\(\\boldsymbol{\\epsilon}\\) \\(n \\times 1\\) column vector random errors. typically assume \\(\\text{E}(\\boldsymbol{\\epsilon}) = \\mathbf{0}\\) \\(\\text{Cov}(\\boldsymbol{\\epsilon}) = \\sigma^2_\\epsilon \\mathbf{}\\), \\(\\text{E}(\\cdot)\\) denotes expectation, \\(\\text{Cov}(\\cdot)\\) denotes covariance, \\(\\sigma^2_\\epsilon\\) denotes variance parameter, \\(\\mathbf{}\\) denotes identity matrix. model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\\) assumes elements \\(\\mathbf{y}\\) uncorrelated. Typically spatial data, elements \\(\\mathbf{y}\\) correlated, observations close together space tend similar observations far apart (Tobler 1970). Failing properly accommodate spatial dependence \\(\\mathbf{y}\\) can cause researchers draw incorrect conclusions data. accommodate spatial dependence \\(\\mathbf{y}\\), \\(n \\times 1\\) spatial random effect, \\(\\boldsymbol{\\tau}\\), added linear model, yielding model \\[ \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\] \\(\\boldsymbol{\\tau}\\) independent \\(\\boldsymbol{\\epsilon}\\), \\(\\text{E}(\\boldsymbol{\\tau}) = \\mathbf{0}\\), \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_\\tau \\mathbf{R}\\), \\(\\mathbf{R}\\) matrix determines spatial dependence structure \\(\\mathbf{y}\\) depends range parameter, \\(\\phi\\). discuss \\(\\mathbf{R}\\) detail shortly. parameter \\(\\sigma^2_\\tau\\) called spatially dependent random error variance partial sill. parameter \\(\\sigma^2_\\epsilon\\) called spatially independent random error variance nugget. two variance parameters henceforth intuitively written \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\), respectively. covariance \\(\\mathbf{y}\\) denoted \\(\\boldsymbol{\\Sigma}\\) given \\(\\sigma^2_{de} \\mathbf{R} + \\sigma^2_{ie} \\mathbf{}\\). parameters compose covariance contained vector \\(\\boldsymbol{\\theta}\\), called covariance parameter vector. model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\) called spatial linear model. spatial linear model applies point-referenced areal (.e., lattice) data. Spatial data point-referenced elements \\(\\mathbf{y}\\) observed point-locations indexed x-coordinates y-coordinates spatially continuous surface infinite number locations. splm() function used fit spatial linear models point-referenced data (sometimes called geostatistical models). One spatial covariance function available splm() exponential spatial covariance function, \\(\\mathbf{R}\\) matrix given \\[ \\mathbf{R} = \\exp(-\\mathbf{M} / \\phi), \\] \\(\\mathbf{M}\\) matrix Euclidean distances among observations. Recall \\(\\phi\\) range parameter, controlling behavior covariance function function distance. Parameterizations splm() spatial covariance types \\(\\mathbf{R}\\) matrices can seen running help(\"splm\", \"spmodel\") vignette(\"technical\", \"spmodel\"). spatial covariance types (e.g., Matérn) depend extra parameter beyond \\(\\sigma^2_{de}\\), \\(\\sigma^2_{ie}\\), \\(\\phi\\). Spatial data areal elements \\(\\mathbf{y}\\) observed part finite network polygons whose connections indexed neighborhood structure. example, polygons may represent counties state neighbors share least one boundary. Areal data often equivalently called lattice data (Cressie 1993). spautor() function used fit spatial linear models areal data (sometimes called spatial autoregressive models). One spatial autoregressive covariance function available spautor() simultaneous autoregressive spatial covariance function, \\(\\mathbf{R}\\) matrix given \\[ \\mathbf{R} = [(\\mathbf{} - \\phi \\mathbf{W})(\\mathbf{} - \\phi \\mathbf{W})^\\top]^{-1}, \\] \\(\\mathbf{W}\\) weight matrix describing neighborhood structure \\(\\mathbf{y}\\). Parameterizations spautor() spatial covariance types \\(\\mathbf{R}\\) matrices can seen running help(\"spautor\", \"spmodel\") vignette(\"technical\", \"spmodel\"). One way define \\(\\mathbf{W}\\) queen contiguity (Anselin, Syabri, Kho 2010). Two observations queen contiguous share boundary. \\(ij\\)th element \\(\\mathbf{W}\\) one observation \\(\\) observation \\(j\\) queen contiguous zero otherwise. Observations considered neighbors , diagonal element \\(\\mathbf{W}\\) zero. Sometimes element weight matrix \\(\\mathbf{W}\\) divided respective row sum. called row-standardization. Row-standardizing \\(\\mathbf{W}\\) several benefits, discussed detail Ver Hoef et al. (2018).","code":""},{"path":"/articles/guide.html","id":"sec:modelfit","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"A Detailed Guide to spmodel","text":"section, show use splm() spautor() functions estimate parameters spatial linear model. also explore diagnostic tools spmodel evaluate model fit. splm() spautor() functions share similar syntactic structure lm() function used fit linear models without spatial dependence. splm() spautor() generally require least three arguments: formula: formula describes relationship response variable (\\(\\mathbf{y}\\)) explanatory variables (\\(\\mathbf{X}\\)) formula splm() formula lm() data: data.frame sf object contains response variable, explanatory variables, spatial information spcov_type: spatial covariance type (\"exponential\", \"matern\", \"car\", etc) data sf (Pebesma 2018) object, spatial information stored object’s geometry. data data.frame, x-coordinates y-coordinates must provided via xcoord ycoord arguments (point-referenced data) weight matrix must provided via W argument (areal data). appendix uses caribou data, tibble (special data.frame), show provide spatial information via xcoord ycoord (splm()) W (spautor()). following subsections, use point-referenced moss data, sf object contains data heavy metals mosses near mining road Alaska. view first rows moss running can learn moss running help(\"moss\", \"spmodel\"), can visualize distribution log zinc concentration moss running Distribution log zinc concentration moss data. Log zinc concentration can viewed interactively mapview running","code":"moss #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 × 8 #>    sample field_dup lab_rep year  sideroad log_dist2road log_Zn #>    <fct>  <fct>     <fct>   <fct> <fct>            <dbl>  <dbl> #>  1 001PR  1         1       2001  N                 2.68   7.33 #>  2 001PR  1         2       2001  N                 2.68   7.38 #>  3 002PR  1         1       2001  N                 2.54   7.58 #>  4 003PR  1         1       2001  N                 2.97   7.63 #>  5 004PR  1         1       2001  N                 2.72   7.26 #>  6 005PR  1         1       2001  N                 2.76   7.65 #>  7 006PR  1         1       2001  S                 2.30   7.59 #>  8 007PR  1         1       2001  N                 2.78   7.16 #>  9 008PR  1         1       2001  N                 2.93   7.19 #> 10 009PR  1         1       2001  N                 2.79   8.07 #> # ℹ 355 more rows #> # ℹ 1 more variable: geometry <POINT [m]> ggplot(moss, aes(color = log_Zn)) +   geom_sf() +   scale_color_viridis_c() +   theme_gray(base_size = 14) mapview(moss, zcol = \"log_Zn\")"},{"path":"/articles/guide.html","id":"estimation","dir":"Articles","previous_headings":"Model Fitting","what":"Estimation","title":"A Detailed Guide to spmodel","text":"Generally covariance parameters (\\(\\boldsymbol{\\theta}\\)) fixed effects (\\(\\boldsymbol{\\beta}\\)) spatial linear model require estimation. default estimation method spmodel restricted maximum likelihood (Patterson Thompson 1971; Harville 1977; Wolfinger, Tobias, Sall 1994), estimation method can changed estmethod argument splm() spautor(). Maximum likelihood estimation also available. point-referenced data, semivariogram weighted least squares (Cressie 1985) semivariogram composite likelihood (Curriero Lele 1999) additional estimation methods. estimation method chosen using estmethod argument. estimate parameters spatial linear model regressing log zinc concentration (log_Zn) log distance haul road (log_dist2road) using exponential spatial covariance function running summarize model fit running fixed effects coefficient table contains estimates, standard errors, z-statistics, asymptotic p-values fixed effect. table, notice evidence mean log zinc concentration significantly decreases distance haul road (p-value < 2e-16). see fixed effect estimates running model summary also contains exponential spatial covariance parameter estimates, can view running dependent random error variance (\\(\\sigma^2_{de}\\)) estimated approximately 0.36 independent random error variance (\\(\\sigma^2_{ie}\\)) estimated approximately 0.079. range (\\(\\phi\\)) estimated approximately 8,237. effective range distance spatial covariance approximately zero. exponential covariance, effective range \\(3\\phi\\). means observations whose distance greater 24,711 meters approximately uncorrelated. rotate scale parameters affect modeling anisotropy. default, assumed zero one, respectively, means anisotropy modeled (.e., spatial covariance assumed isotropic, independent direction). plot fitted spatial covariance function running Empirical spatial covariance fitted model. can learn plots available fitted models running help(\"plot.splm\", \"spmodel\").","code":"spmod <- splm(log_Zn ~ log_dist2road, moss, spcov_type = \"exponential\") summary(spmod) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.6801 -1.3606 -0.8103 -0.2485  1.1298  #>  #> Coefficients (fixed): #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)    9.76825    0.25216   38.74   <2e-16 *** #> log_dist2road -0.56287    0.02013  -27.96   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.683 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.595e-01 7.897e-02 8.237e+03 coef(spmod) #>   (Intercept) log_dist2road  #>     9.7682525    -0.5628713 coef(spmod, type = \"spcov\") #>           de           ie        range       rotate        scale  #> 3.595316e-01 7.896824e-02 8.236712e+03 0.000000e+00 1.000000e+00  #> attr(,\"class\") #> [1] \"exponential\" plot(spmod, which = 7)"},{"path":"/articles/guide.html","id":"model-fit-statistics","dir":"Articles","previous_headings":"Model Fitting","what":"Model-Fit Statistics","title":"A Detailed Guide to spmodel","text":"quality model fit can assessed using variety statistics readily available spmodel. first model-fit statistic consider pseudo R-squared. pseudo R-squared generalization classical R-squared non-spatial linear models quantifies proportion variability data explained fixed effects. pseudo R-squared defined \\[ PR2 = 1 - \\frac{\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}})}{\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}}_0)}, \\] \\(\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}})\\) deviance fitted model indexed parameter vector \\(\\boldsymbol{\\hat{\\Theta}}\\) \\(\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}}_0)\\) deviance intercept-model indexed parameter vector \\(\\boldsymbol{\\hat{\\Theta}}_0\\). maximum likelihood, \\(\\hat{\\boldsymbol{\\Theta}} = \\{\\hat{\\boldsymbol{\\theta}}, \\hat{\\boldsymbol{\\beta}}\\}\\). restricted maximum likelihood \\(\\hat{\\boldsymbol{\\Theta}} = \\{\\hat{\\boldsymbol{\\theta}}\\}\\). compute pseudo R-squared running compute pseudo R-squared running Roughly 68% variability log zinc explained log distance road. pseudo R-squared can adjusted account number explanatory variables using adjust argument. Pseudo R-squared (adjusted version) helpful comparing models covariance structure. next two model-fit statistics consider AIC AICc. AIC AICc evaluate fit model penalty number parameters estimated. penalty balances model fit model parsimony. Lower AIC AICc indicate better balance model fit parsimony. AICc correction AIC small sample sizes. sample size increases, AIC AICc converge. spatial AIC AICc given \\[   \\begin{split}     \\text{AIC} & = -2\\ell(\\hat{\\boldsymbol{\\Theta}}) + 2(|\\hat{\\boldsymbol{\\Theta}}|) \\\\     \\text{AICc} & = -2\\ell(\\hat{\\boldsymbol{\\Theta}}) + 2n(|\\hat{\\boldsymbol{\\Theta}}|) / (n - |\\hat{\\boldsymbol{\\Theta}}| - 1),   \\end{split} \\] \\(\\ell(\\hat{\\boldsymbol{\\Theta}})\\) log-likelihood data evaluated estimated parameter vector \\(\\hat{\\boldsymbol{\\Theta}}\\) maximized \\(\\ell(\\boldsymbol{\\Theta})\\), \\(|\\hat{\\boldsymbol{\\Theta}}|\\) dimension \\(\\hat{\\boldsymbol{\\Theta}}\\), \\(n\\) sample size. deviance, maximum likelihood, \\(\\hat{\\boldsymbol{\\Theta}} = \\{\\hat{\\boldsymbol{\\theta}}, \\hat{\\boldsymbol{\\beta}}\\}\\), restricted maximum likelihood \\(\\hat{\\boldsymbol{\\Theta}} = \\{\\hat{\\boldsymbol{\\theta}}\\}\\). nuances consider comparing AIC across models: AIC comparisons model fit using restricted maximum likelihood model fit using maximum likelihood meaningless, models fit different likelihoods; AIC comparisons models fit using restricted maximum likelihood valid models fixed effect structure; AIC comparisons models fit using maximum likelihood valid even models different fixed effect structures (Pinheiro Bates 2006). Suppose want quantify difference model quality spatial model non-spatial model using AIC AICc criteria. fit non-spatial model spmodel running model equivalent one fit using lm(). compute spatial AIC AICc spatial model non-spatial model running noticeably lower AIC AICc spatial model indicate better fit data non-spatial model. Recall AIC AICc comparisons valid models fit using restricted maximum likelihood (default). Another approach comparing fitted models perform leave-one-cross validation (Hastie et al. 2009). leave-one-cross validation, single observation removed data, model re-fit, prediction made held-observation. , loss metric like mean-squared-prediction error computed used evaluate model fit. lower mean-squared-prediction error, better model fit. computational efficiency, leave-one-cross validation spmodel performed first estimating \\(\\boldsymbol{\\theta}\\) using data re-estimating \\(\\boldsymbol{\\beta}\\) predict removed observation. perform leave-one-cross validation spatial non-spatial model running noticeably lower mean-squared-prediction error spatial model indicates better fit data non-spatial model.","code":"pseudoR2(spmod) #> [1] 0.6829687 lmod <- splm(log_Zn ~ log_dist2road, moss, spcov_type = \"none\") AIC(spmod, lmod) #>       df      AIC #> spmod  3 373.2089 #> lmod   1 636.0635 AICc(spmod, lmod) #>       df     AICc #> spmod  3 373.2754 #> lmod   1 636.0745 loocv(spmod) #> # A tibble: 1 × 4 #>      bias  MSPE RMSPE  cor2 #>     <dbl> <dbl> <dbl> <dbl> #> 1 0.00655 0.111 0.333 0.886 loocv(lmod) #> # A tibble: 1 × 4 #>       bias  MSPE RMSPE  cor2 #>      <dbl> <dbl> <dbl> <dbl> #> 1 0.000644 0.324 0.569 0.667"},{"path":"/articles/guide.html","id":"diagnostics","dir":"Articles","previous_headings":"Model Fitting","what":"Diagnostics","title":"A Detailed Guide to spmodel","text":"addition model fit metrics, spmodel provides functions compute diagnostic metrics help assess model assumptions identify unusual observations. observation said high leverage combination explanatory variable values far mean vector explanatory variables. non-spatial model, leverage \\(\\)th observation \\(\\)th diagonal element hat matrix given \\[   \\mathbf{H} = \\mathbf{X}(\\mathbf{X}^\\top\\mathbf{X})^{-1}\\mathbf{X}^\\top . \\] spatial model, leverage \\(\\)th observation \\(\\)th diagonal element spatial hat matrix given \\[   \\mathbf{H}^* = (\\mathbf{X}^* (\\mathbf{X}^{* \\top} \\mathbf{X})^{-1} \\mathbf{X}^{* \\top}) , \\] \\(\\mathbf{X}^* = \\boldsymbol{\\Sigma}^{-1/2}\\mathbf{X}\\) \\(\\boldsymbol{\\Sigma}^{-1/2}\\) inverse square root covariance matrix, \\(\\boldsymbol{\\Sigma}\\) (Montgomery, Peck, Vining 2021). spatial hat matrix can viewed non-spatial hat matrix applied \\(\\mathbf{X}^*\\) instead \\(\\mathbf{X}\\). compute hat values (leverage) running Larger hat values indicate leverage, observations large hat values may unusual warrant investigation. fitted value observation estimated mean response given observation’s explanatory variable values model fit: \\[ \\hat{\\mathbf{y}} = \\mathbf{X} \\hat{\\boldsymbol{\\beta}}. \\] compute fitted values running Fitted values spatially dependent random errors (\\(\\boldsymbol{\\tau}\\)), spatially independent random errors (\\(\\boldsymbol{\\epsilon}\\)), random effects can also obtained via fitted() changing type argument. residuals measure response’s deviation fitted value. response residuals given \\[   \\mathbf{e}_{r} = \\mathbf{y} - \\hat{\\mathbf{y}}. \\] compute response residuals spatial model running response residuals typically directly checked linear model assumptions, covariance closely resembling covariance \\(\\mathbf{y}\\). Pre-multiplying residuals \\(\\boldsymbol{\\Sigma}^{-1/2}\\) yields Pearson residuals (Myers et al. 2012): \\[   \\mathbf{e}_{p} = \\boldsymbol{\\Sigma}^{-1/2}\\mathbf{e}_{r}. \\] model correct, Pearson residuals mean zero, variance approximately one, uncorrelated. compute Pearson residuals spatial model running covariance \\(\\mathbf{e}_{p}\\) \\((\\mathbf{} - \\mathbf{H}^*)\\), approximately \\(\\mathbf{}\\) large sample sizes. Explicitly dividing \\(\\mathbf{e}_{p}\\) respective diagonal element \\((\\mathbf{} - \\mathbf{H}^*)\\) yields standardized residuals (Myers et al. 2012): \\[   \\mathbf{e}_{s} = \\mathbf{e}_{p} \\odot \\frac{1}{\\sqrt{(1 - \\text{diag}(\\mathbf{H}^*))}}, \\] \\(\\text{diag}(\\mathbf{H}^*)\\) denotes diagonal \\(\\mathbf{H}^*\\) \\(\\odot\\) denotes Hadmard (element-wise) product. compute standardized residuals spatial model running model correct, standardized residuals mean zero, variance one, uncorrelated. common check linear model assumptions visualizations. can plot standardized residuals vs fitted values running model correct, standardized residuals evenly spread around zero discernible pattern. can plot normal QQ-plot standardized residuals running standardized residuals normally distributed, closely follow normal QQ-line. observation said influential omission large impact model fit. Typically, measured using Cook’s distance (Cook Weisberg 1982). non-spatial model, Cook’s distance \\(\\)th observation denoted \\(\\mathbf{D}\\) given \\[   \\mathbf{D} = \\frac{\\mathbf{e}_{s}^2}{p} \\odot \\text{diag}(\\mathbf{H}) \\odot \\frac{1}{(1 - \\text{diag}(\\mathbf{H}))}, \\] \\(p\\) dimension \\(\\boldsymbol{\\beta}\\) (number fixed effects). spatial model, Cook’s distance \\(\\)th observation denoted \\(\\mathbf{D}^*\\) given \\[ \\mathbf{D}^* = \\frac{\\mathbf{e}_{s}^2}{p} \\odot \\text{diag}(\\mathbf{H}^*) \\odot \\frac{1}{(1 - \\text{diag}(\\mathbf{H}^*))} . \\] larger Cook’s distance indicates influence, observations large Cook’s distance values may unusual warrant investigation. compute Cook’s distance running Cook’s distance versus leverage (hat values) can visualized running Though described model diagnostics subsection using \\(\\boldsymbol{\\Sigma}\\), generally covariance parameters estimated \\(\\boldsymbol{\\Sigma}\\) replaced \\(\\boldsymbol{\\hat{\\Sigma}}\\).","code":"hatvalues(spmod) fitted(spmod) residuals(spmod) residuals(spmod, type = \"pearson\") residuals(spmod, type = \"standardized\") rstandard(spmod) plot(spmod, which = 1) # figure omitted plot(spmod, which = 2) # figure omitted cooks.distance(spmod) plot(spmod, which = 6) # figure omitted"},{"path":"/articles/guide.html","id":"the-broom-functions-tidy-glance-and-augment","dir":"Articles","previous_headings":"Model Fitting","what":"The broom functions: tidy(), glance(), and augment()","title":"A Detailed Guide to spmodel","text":"tidy(), glance(), augment() functions broom package (Robinson, Hayes, Couch 2021) provide convenient output many model fit diagnostic metrics discussed previous two sections. tidy() function returns tidy tibble coefficient table summary(): tibble format makes easy pull coefficient names, estimates, standard errors, z-statistics, p-values summary() output. glance() function returns tidy tibble model-fit statistics: glances() function extension glance() can used look many models simultaneously: Finally, augment() function augments original data model diagnostics: default, columns data used fit model returned alongside diagnostics. original columns data returned setting drop FALSE. augment() especially powerful data sf object model diagnostics can easily visualized spatially. example, subset augmented object includes observations whose standardized residuals absolute values greater cutoff visualize spatially. learn broom functions spatial linear models, run help(\"tidy.splm\", \"spmodel\"), help(\"glance.splm\", \"spmodel\"), help(\"augment.splm\", \"spmodel\").","code":"tidy(spmod) #> # A tibble: 2 × 5 #>   term          estimate std.error statistic p.value #>   <chr>            <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)      9.77     0.252       38.7       0 #> 2 log_dist2road   -0.563    0.0201     -28.0       0 glance(spmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   365     2     3  367.  373.  373.  -184.     363.            0.683 glances(spmod, lmod) #> # A tibble: 2 × 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spmod   365     2     3  367.  373.  373.  -184.     363.            0.683 #> 2 lmod    365     2     1  634.  636.  636.  -317.     363.            0.671 augment(spmod) #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 × 8 #>    log_Zn log_dist2road .fitted .resid   .hat .cooksd .std.resid #>  *  <dbl>         <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl> #>  1   7.33          2.68    8.26 -0.928 0.0200 0.0142       1.18  #>  2   7.38          2.68    8.26 -0.880 0.0200 0.0186       1.35  #>  3   7.58          2.54    8.34 -0.755 0.0225 0.00482      0.647 #>  4   7.63          2.97    8.09 -0.464 0.0197 0.0305       1.74  #>  5   7.26          2.72    8.24 -0.977 0.0215 0.131        3.45  #>  6   7.65          2.76    8.21 -0.568 0.0284 0.0521       1.89  #>  7   7.59          2.30    8.47 -0.886 0.0300 0.0591       1.96  #>  8   7.16          2.78    8.20 -1.05  0.0335 0.00334      0.439 #>  9   7.19          2.93    8.12 -0.926 0.0378 0.0309       1.26  #> 10   8.07          2.79    8.20 -0.123 0.0314 0.00847      0.723 #> # ℹ 355 more rows #> # ℹ 1 more variable: geometry <POINT [m]>"},{"path":"/articles/guide.html","id":"an-areal-data-example","dir":"Articles","previous_headings":"Model Fitting","what":"An Areal Data Example","title":"A Detailed Guide to spmodel","text":"Next use seal data, sf object contains log estimated harbor-seal trends abundance data across polygons Alaska, provide example fitting spatial linear model areal data using spautor(). view first rows seal running can learn data running help(\"seal\", \"spmodel\"). can visualize distribution log seal trends seal data running Distribution log seal trends seal data. Polygons gray seal trends missing. Log trends can viewed interactively mapview running gray polygons denote areas log trend missing. missing areas need kept data fitting model preserve overall neighborhood structure. estimate parameters spatial autoregressive model log seal trends (log_trend) using intercept-model conditional autoregressive (CAR) spatial covariance running weight matrix provided spautor(), calculated internally using queen contiguity. Recall queen contiguity defines two observations neighbors share least one common boundary. least one observation neighbors, extra parameter estimated, quantifies variability among observations without neighbors. default, spautor() uses row standardization (Ver Hoef et al. 2018) assumes independent error variance (ie) zero. summarize, tidy, glance , augment fitted model running Note spautor() models, ie spatial covariance parameter assumed zero default (omitted summary() output). default behavior can overridden specifying ie spcov_initial argument spautor(). Also note pseudo R-squared zero explanatory variables model (.e., intercept-model).","code":"seal #> Simple feature collection with 62 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1116002 ymax: 1145054 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 62 × 2 #>    log_trend                                                            geometry #>        <dbl>                                                       <POLYGON [m]> #>  1  NA       ((1035002 1054710, 1035002 1054542, 1035002 1053542, 1035002 10525… #>  2  -0.282   ((1037002 1039492, 1037006 1039490, 1037017 1039492, 1037035 10394… #>  3  -0.00121 ((1070158 1030216, 1070185 1030207, 1070187 1030207, 1070211 10302… #>  4   0.0354  ((1054906 1034826, 1054931 1034821, 1054936 1034822, 1055001 10348… #>  5  -0.0160  ((1025142 1056940, 1025184 1056889, 1025222 1056836, 1025256 10567… #>  6   0.0872  ((1026035 1044623, 1026037 1044605, 1026072 1044610, 1026083 10446… #>  7  -0.266   ((1100345 1060709, 1100287 1060706, 1100228 1060706, 1100170 10607… #>  8   0.0743  ((1030247 1029637, 1030248 1029637, 1030265 1029642, 1030328 10296… #>  9  NA       ((1043093 1020553, 1043097 1020550, 1043101 1020550, 1043166 10205… #> 10  -0.00961 ((1116002 1024542, 1116002 1023542, 1116002 1022542, 1116002 10215… #> # ℹ 52 more rows ggplot(seal, aes(fill = log_trend)) +   geom_sf(size = 0.75) +   scale_fill_viridis_c() +   theme_bw(base_size = 14) mapview(seal, zcol = \"log_trend\") sealmod <- spautor(log_trend ~ 1, seal, spcov_type = \"car\") summary(sealmod) #>  #> Call: #> spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\") #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.34455 -0.10417  0.04410  0.07338  0.20475  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)    #> (Intercept) -0.07090    0.02497  -2.839  0.00452 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Coefficients (car spatial covariance): #>      de   range   extra  #> 0.03252 0.42037 0.02177 tidy(sealmod) #> # A tibble: 1 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)  -0.0709    0.0250     -2.84 0.00452 glance(sealmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1    34     1     3 -36.9 -30.9 -30.1   18.4     33.1                0 augment(sealmod) #> Simple feature collection with 34 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 980001.5 ymin: 1010815 xmax: 1116002 ymax: 1145054 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 34 × 7 #>    log_trend .fitted  .resid   .hat .cooksd .std.resid                  geometry #>  *     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>      <dbl>             <POLYGON [m]> #>  1  -0.282   -0.0709 -0.211  0.0161 0.0209      -1.13  ((1037002 1039492, 10370… #>  2  -0.00121 -0.0709  0.0697 0.0473 0.0256       0.718 ((1070158 1030216, 10701… #>  3   0.0354  -0.0709  0.106  0.0290 0.0183       0.782 ((1054906 1034826, 10549… #>  4  -0.0160  -0.0709  0.0549 0.0228 0.00157      0.260 ((1025142 1056940, 10251… #>  5   0.0872  -0.0709  0.158  0.0276 0.0383       1.16  ((1026035 1044623, 10260… #>  6  -0.266   -0.0709 -0.195  0.0287 0.0530      -1.34  ((1100345 1060709, 11002… #>  7   0.0743  -0.0709  0.145  0.0491 0.0901       1.32  ((1030247 1029637, 10302… #>  8  -0.00961 -0.0709  0.0613 0.0122 0.00242      0.442 ((1116002 1024542, 11160… #>  9  -0.182   -0.0709 -0.111  0.0225 0.0224      -0.986 ((1079864 1025088, 10798… #> 10   0.00351 -0.0709  0.0744 0.0316 0.0100       0.555 ((1110363 1037056, 11103… #> # ℹ 24 more rows"},{"path":"/articles/guide.html","id":"sec:prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"A Detailed Guide to spmodel","text":"section, show use predict() perform spatial prediction (also called Kriging) spmodel. fit model using point-referenced sulfate data, sf object contains sulfate measurements conterminous United States, make predictions location point-referenced sulfate_preds data, sf object contains locations conterminous United States predict sulfate. first visualize distribution sulfate data running fit spatial linear model sulfate using intercept-model spherical spatial covariance function running obtain best linear unbiased predictions (Kriging predictions) using predict(), newdata argument contains locations predict, storing new variable sulfate_preds called preds: can visualize model predictions running Distribution observed sulfate (left) sulfate predictions (right) conterminous United States. making predictions, important properly specify newdata object. explanatory variables used fit model, explanatory variables must included newdata names data. Additionally, explanatory variable categorical factor, values variable newdata must also values data (e.g., categorical variable values \"\", \"B\" used fit model, corresponding variable newdata value \"C\"). data data.frame, coordinates must included newdata names data. data sf object, coordinates must included newdata geometry name data. using projected coordinates, projection newdata projection data. Prediction standard errors returned setting se.fit argument TRUE: interval argument determines type interval returned. interval \"none\" (default), intervals returned. interval \"prediction\", 100 * level% prediction intervals returned (default 95% prediction intervals): interval \"confidence\", predictions instead estimated mean given observation’s explanatory variable values. corresponding 100 * level% confidence intervals returned: Previously used augment() function augment data model diagnostics. can also use augment() alternative predict() augment newdata predictions, standard errors, intervals. remove model predictions sulfate_preds showing augment() used obtain predictions running view first rows sulfate_preds augmented 90% prediction intervals running , .fitted represents predictions. alternative (equivalent) approach can used model fitting prediction circumvents need keep data newdata separate objects. Suppose observations requiring prediction stored data missing (NA) values. can add column missing values sulfate_preds bind together sulfate running can fit spatial linear model running missing values ignored model-fitting stored sulfmod_with_NA newdata: can predict missing values running call predict() finds sulfmod_with_NA newdata object equivalent can also use augment() make predictions data set missing values running Unlike predict(), augment() explicitly requires newdata argument specified order obtain predictions. Omitting newdata (e.g., running augment(sulfmod_with_NA)) returns model diagnostics, predictions. areal data models fit spautor(), predictions computed locations incorporated neighborhood structure used fit model. Thus, predictions possible observations data whose response values missing (NA), locations incorporated neighborhood structure. example, make predictions log seal trends missing polygons running can also use augment() make predictions:","code":"ggplot(sulfate, aes(color = sulfate)) +   geom_sf(size = 2.5) +   scale_color_viridis_c(limits = c(0, 45)) +   theme_gray(base_size = 18) sulfmod <- splm(sulfate ~ 1, sulfate, spcov_type = \"spherical\") sulfate_preds$preds <- predict(sulfmod, newdata = sulfate_preds) ggplot(sulfate_preds, aes(color = preds)) +   geom_sf(size = 2.5) +   scale_color_viridis_c(limits = c(0, 45)) +   theme_gray(base_size = 18) predict(sulfmod, newdata = sulfate_preds, se.fit = TRUE) predict(sulfmod, newdata = sulfate_preds, interval = \"prediction\") predict(sulfmod, newdata = sulfate_preds, interval = \"confidence\") sulfate_preds$preds <- NULL augment(sulfmod, newdata = sulfate_preds, interval = \"prediction\", level = 0.90) #> Simple feature collection with 100 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 4 #>    .fitted .lower .upper            geometry #>  *   <dbl>  <dbl>  <dbl>         <POINT [m]> #>  1    1.40  -5.33   8.14  (-1771413 1752976) #>  2   24.5   18.2   30.8    (1018112 1867127) #>  3    8.99   2.36  15.6  (-291256.8 1553212) #>  4   16.4    9.92  23.0    (1274293 1267835) #>  5    4.91  -1.56  11.4  (-547437.6 1638825) #>  6   26.7   20.4   33.0    (1445080 1981278) #>  7    3.00  -3.65   9.66  (-1629090 3037173) #>  8   14.3    7.97  20.6    (1302757 1039534) #>  9    1.49  -5.08   8.06  (-1429838 2523494) #> 10   14.4    7.97  20.8    (1131970 1096609) #> # ℹ 90 more rows sulfate_preds$sulfate <- NA sulfate_with_NA <- rbind(sulfate, sulfate_preds) sulfmod_with_NA <- splm(sulfate ~ 1, sulfate_with_NA, \"spherical\") sulfmod_with_NA$newdata #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> First 10 features: #>     sulfate                  geometry #> 198      NA  POINT (-1771413 1752976) #> 199      NA   POINT (1018112 1867127) #> 200      NA POINT (-291256.8 1553212) #> 201      NA   POINT (1274293 1267835) #> 202      NA POINT (-547437.6 1638825) #> 203      NA   POINT (1445080 1981278) #> 204      NA  POINT (-1629090 3037173) #> 205      NA   POINT (1302757 1039534) #> 206      NA  POINT (-1429838 2523494) #> 207      NA   POINT (1131970 1096609) predict(sulfmod_with_NA) predict(sulfmod_with_NA, newdata = sulfmod_with_NA$newdata) augment(sulfmod_with_NA, newdata = sulfmod_with_NA$newdata) #> Simple feature collection with 100 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 3 #>    sulfate .fitted            geometry #>  *   <dbl>   <dbl>         <POINT [m]> #>  1      NA    1.40  (-1771413 1752976) #>  2      NA   24.5    (1018112 1867127) #>  3      NA    8.99 (-291256.8 1553212) #>  4      NA   16.4    (1274293 1267835) #>  5      NA    4.91 (-547437.6 1638825) #>  6      NA   26.7    (1445080 1981278) #>  7      NA    3.00  (-1629090 3037173) #>  8      NA   14.3    (1302757 1039534) #>  9      NA    1.49  (-1429838 2523494) #> 10      NA   14.4    (1131970 1096609) #> # ℹ 90 more rows predict(sealmod) augment(sealmod, newdata = sealmod$newdata) #> Simple feature collection with 28 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1115097 ymax: 1132682 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 28 × 3 #>    log_trend  .fitted                                                   geometry #>  *     <dbl>    <dbl>                                              <POLYGON [m]> #>  1        NA -0.115   ((1035002 1054710, 1035002 1054542, 1035002 1053542, 1035… #>  2        NA -0.00908 ((1043093 1020553, 1043097 1020550, 1043101 1020550, 1043… #>  3        NA -0.0602  ((1099737 1054310, 1099752 1054262, 1099788 1054278, 1099… #>  4        NA -0.0359  ((1099002 1036542, 1099134 1036462, 1099139 1036431, 1099… #>  5        NA -0.0723  ((1076902 1053189, 1076912 1053179, 1076931 1053179, 1076… #>  6        NA -0.0548  ((1070501 1046969, 1070317 1046598, 1070308 1046542, 1070… #>  7        NA -0.0976  ((1072995 1054942, 1072996 1054910, 1072997 1054878, 1072… #>  8        NA -0.0714  ((960001.5 1127667, 960110.8 1127542, 960144.1 1127495, 9… #>  9        NA -0.0825  ((1031308 1079817, 1031293 1079754, 1031289 1079741, 1031… #> 10        NA -0.0592  ((998923.7 1053647, 998922.5 1053609, 998950 1053631, 999… #> # ℹ 18 more rows"},{"path":"/articles/guide.html","id":"sec:advfeatures","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"A Detailed Guide to spmodel","text":"spmodel offers several advanced features fitting spatial linear models. briefly discuss features next using moss data, moose data, simulated data. Technical details advanced feature can seen running vignette(\"technical\", \"spmodel\").","code":""},{"path":"/articles/guide.html","id":"sec:spcov_init","dir":"Articles","previous_headings":"Advanced Features","what":"Fixing Spatial Covariance Parameters","title":"A Detailed Guide to spmodel","text":"may desire fix specific spatial covariance parameters particular value. Perhaps parameter value known, example. perhaps want compare nested models reduced model uses fixed parameter value full model estimates parameter. Fixing spatial covariance parameters fitting model possible using spcov_initial argument splm() spautor(). spcov_initial argument takes spcov_initial object (run help(\"spcov_initial\", \"spmodel\") ). spcov_initial objects can also used specify initial values used optimization, even assumed fixed. default, spmodel uses grid search find suitable initial values use optimization. example, suppose goal compare model exponential covariance dependent error variance, independent error variance, range parameters model assumes independent random error variance parameter (nugget) zero. First, spcov_initial object specified latter model: init output shows ie parameter initial value zero assumed known. Next model fit: Notice spcov_initial object contains information spatial covariance type, spcov_type argument required spcov_initial provided. can use glances() glance models: lower AIC AICc full model compared reduced model indicates independent random error variance important model. likelihood ratio test comparing full reduced models also possible using anova(). Another application fixing spatial covariance parameters involves calculating profile likelihood confidence intervals (Box Cox 1964). calculating profile likelihood confidence interval \\(\\boldsymbol{\\Theta}_i\\), \\(\\)th element general parameter vector \\(\\boldsymbol{\\Theta}\\), necessary obtain \\(-2\\ell(\\hat{\\boldsymbol{\\Theta}})\\), minus twice log-likelihood evaluated estimated parameter vector, \\(\\hat{\\boldsymbol{\\Theta}}\\). \\((1 - \\alpha)\\)% profile likelihood confidence interval set values \\(\\boldsymbol{\\Theta}_i\\) \\(2\\ell(\\hat{\\boldsymbol{\\Theta}}) - 2\\ell(\\hat{\\boldsymbol{\\Theta}}_{-}) \\leq \\chi^2_{1, 1 - \\alpha}\\), \\(\\ell(\\hat{\\boldsymbol{\\Theta}}_{-})\\) value log-likelihood maximized fixing \\(\\boldsymbol{\\Theta}_i\\) optimizing remaining parameters, \\(\\boldsymbol{\\Theta}_{-}\\), \\(\\chi^2_{1, 1 - \\alpha}\\) \\(1 - \\alpha\\) quantile chi-squared distribution one degree freedom. result follows inverting likelihood ratio test comparing full model reduced model fixes value \\(\\boldsymbol{\\Theta}_i\\). approach requires refitting model many times different fixed values \\(\\boldsymbol{\\Theta}_i\\), can computationally intensive. approached can generalized yield joint profile likelihood confidence intervals cases \\(\\) dimension greater one.","code":"init <- spcov_initial(\"exponential\", ie = 0, known = \"ie\") print(init) #> $initial #> ie  #>  0  #>  #> $is_known #>   ie  #> TRUE  #>  #> attr(,\"class\") #> [1] \"exponential\" spmod_red <- splm(log_Zn ~ log_dist2road, moss, spcov_initial = init) glances(spmod, spmod_red) #> # A tibble: 2 × 10 #>   model         n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr>     <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spmod       365     2     3  367.  373.  373.  -184.     363.            0.683 #> 2 spmod_red   365     2     2  378.  382.  382.  -189.     374.            0.703"},{"path":"/articles/guide.html","id":"fitting-and-predicting-for-multiple-models","dir":"Articles","previous_headings":"Advanced Features","what":"Fitting and Predicting for Multiple Models","title":"A Detailed Guide to spmodel","text":"Fitting multiple models possible single call splm() spautor() spcov_type vector length greater one spcov_initial list (length greater one) spcov_initial objects. fit three separate spatial linear models using exponential spatial covariance, spherical spatial covariance, spatial covariance running spmods list whose names indicate spatial covariance type whose values indicate model fit spatial covariance type. Generic functions can called individually list element. example, can augment model fit using exponential covariance function diagnostics running can find AIC model fit using spherical covariance function running glances() predict() functions can work directly spmods, calling glances() predict() list element organizing results. glance fitted model object running predict newdata separately fitted model object running","code":"spmods <- splm(sulfate ~ 1, sulfate, spcov_type = c(\"exponential\", \"spherical\", \"none\")) augment(spmods$exponential) #> Simple feature collection with 197 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2292550 ymin: 386181.1 xmax: 2173345 ymax: 3090370 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 197 × 7 #>    sulfate .fitted .resid    .hat   .cooksd .std.resid           geometry #>  *   <dbl>   <dbl>  <dbl>   <dbl>     <dbl>      <dbl>        <POINT [m]> #>  1  12.9      5.92   7.00 0.00334 0.00161      -0.694  (817738.8 1080571) #>  2  20.2      5.92  14.2  0.00256 0.00192       0.865  (914593.6 1295545) #>  3  16.8      5.92  10.9  0.00259 0.000395      0.390  (359574.1 1178228) #>  4  16.2      5.92  10.3  0.00239 0.000363      0.390  (265331.9 1239089) #>  5   7.86     5.92   1.93 0.00202 0.00871      -2.07   (304528.8 1453636) #>  6  15.4      5.92   9.43 0.00201 0.000240      0.345  (162932.8 1451625) #>  7   0.986    5.92  -4.94 0.00380 0.000966     -0.503  (-1437776 1568022) #>  8   0.425    5.92  -5.50 0.0138  0.00584      -0.646  (-1572878 1125529) #>  9   3.58     5.92  -2.34 0.00673 0.0000148    -0.0467 (-1282009 1204889) #> 10   2.38     5.92  -3.54 0.0123  0.0000139    -0.0335 (-1972775 1464991) #> # ℹ 187 more rows AIC(spmods$spherical) #> [1] 1143.202 glances(spmods) #> # A tibble: 3 × 10 #>   model         n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr>     <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spherical   197     1     3 1137. 1143. 1143.  -569.     196.                0 #> 2 exponent…   197     1     3 1140. 1146. 1146.  -570.     196.                0 #> 3 none        197     1     1 1448. 1450. 1450.  -724.     196                 0 predict(spmods, newdata = sulfate_preds)"},{"path":"/articles/guide.html","id":"random-effects","dir":"Articles","previous_headings":"Advanced Features","what":"Random Effects","title":"A Detailed Guide to spmodel","text":"Non-spatial random effects incorporate additional sources variability model fitting. accommodated spmodel using similar syntax random effects nlme (Pinheiro Bates 2006) lme4 (Bates et al. 2015) packages. Random effects specified via formula passed random argument. Next show two examples incorporate random effects spatial linear model using moss data. first example explores random intercepts sample variable. sample variable indexes unique location, can replicate observations due field duplicates (field_dup) lab replicates (lab_rep). 365 observations moss 318 unique locations, means 47 observations moss either field duplicates lab replicates. likely repeated observations location correlated one another. can incorporate repeated-observation correlation creating random intercept level sample. model random intercepts sample running Note ~ sample shorthand (1 | sample), explicit notation indicates random intercepts level sample. second example adds random intercept year, creates extra correlation observations within year. also adds random slope log_dist2road within year, lets effect log_dist2road vary years. fit model running Note sample + (log_dist2road | year) shorthand (1 | sample) + (log_dist2road | year). random slopes within year desired (random intercepts), - 1 given relevant portion formula: (log_dist2road - 1 | year). one term random, term must surrounded parentheses (recall random intercept shorthand automatically includes relevant parentheses). examples random effect syntax provided appendix. compare AIC models running rand2 model lowest AIC. possible fix random effect variances using randcov_initial argument, randcov_initial can also used set initial values optimization.","code":"rand1 <- splm(   log_Zn ~ log_dist2road,   moss,   spcov_type = \"exponential\",   random = ~ sample ) rand2 <- splm(   log_Zn ~ log_dist2road,   moss,   spcov_type = \"exponential\",   random = ~ sample + (log_dist2road | year) ) glances(rand1, rand2) #> # A tibble: 2 × 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 rand2   365     2     6  190.  202.  202.  -94.9     363.            0.215 #> 2 rand1   365     2     4  335.  343.  343. -168.      363.            0.661"},{"path":"/articles/guide.html","id":"partition-factors","dir":"Articles","previous_headings":"Advanced Features","what":"Partition Factors","title":"A Detailed Guide to spmodel","text":"partition factor variable allows observations uncorrelated different levels partition factor. Partition factors specified spmodel providing formula single variable partition_factor argument. Suppose moss data, want observations different years (year) uncorrelated. fit model treats year partition factor running","code":"part <- splm(   log_Zn ~ log_dist2road,   moss,   spcov_type = \"exponential\",   partition_factor = ~ year )"},{"path":"/articles/guide.html","id":"sec:anisotropy","dir":"Articles","previous_headings":"Advanced Features","what":"Anisotropy","title":"A Detailed Guide to spmodel","text":"Ellipses isotropic (left) anisotropic (right) covariance function centered origin. black outline ellipse level curve equal correlation. black outline ellipse level curve equal correlation. left ellipse (circle) represents isotropic covariance function. distance correlation two observations lays level curve directions. right ellipse represents anisotropic covariance function. distance correlation two observations lays level curve different different directions. Accounting anisotropy involves rotation scaling x-coordinates y-coordinates spatial covariance function uses transformed distances isotropic. use anisotropy argument splm() fit model anisotropy running rotate parameter zero \\(\\pi\\) radians represents angle clockwise rotation ellipse major axis ellipse new x-axis minor axis ellipse new y-axis. scale parameter zero one represents ratio distance origin edge ellipse along minor axis distance origin edge ellipse along major axis. shows transformation turns anisotropic ellipse isotropic one (.e., circle). transformation requires rotating coordinates clockwise rotate scaling reciprocal scale. transformed coordinates used instead original coordinates compute distances spatial covariances. visual representation anisotropy transformation. left figure, first step rotate anisotropic ellipse clockwise parameter (0.75\\(\\pi\\) radians 135 degrees). middle figure, second step scale y axis reciprocal parameter (0.5). right figure, anisotropic ellipse transformed isotropic one (.e., circle). transformed coordinates used instead original coordinates compute distances spatial covariances. Note specifying initial value rotate different zero, specifying initial value scale different one, assuming either rotate scale unknown spcov_initial cause splm() fit model anisotropy (override anisotropy = FALSE). Estimating anisotropy parameters possible maximum likelihood restricted maximum likelihood estimation, fixed anisotropy parameters can accommodated semivariogram weighted least squares semivariogram composite likelihood estimation. Also note anisotropy relevant areal data spatial covariance function depends neighborhood structure instead distances points.","code":"spmod_anis <- splm(   log_Zn ~ log_dist2road,   moss,   spcov_type = \"exponential\",   anisotropy = TRUE ) summary(spmod_anis) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\",  #>     anisotropy = TRUE) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.5279 -1.2239 -0.7202 -0.1921  1.1659  #>  #> Coefficients (fixed): #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)    9.54798    0.22291   42.83   <2e-16 *** #> log_dist2road -0.54601    0.01855  -29.44   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.7048 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range    rotate     scale  #> 3.561e-01 6.812e-02 8.732e+03 2.435e+00 4.753e-01  #> attr(,\"class\") #> [1] \"exponential\""},{"path":"/articles/guide.html","id":"sec:sim_data","dir":"Articles","previous_headings":"Advanced Features","what":"Simulating Spatial Data","title":"A Detailed Guide to spmodel","text":"sprnorm() function used simulate normal (Gaussian) spatial data. use sprnorm(), spcov_params() function used create spcov_params object. spcov_params() function requires spatial covariance type parameter values. create spcov_params object running set reproducible seed simulate data 3000 random locations unit square using spatial covariance parameters sim_params running can visualize simulated data running noticeable spatial patterning response variable (sim_response). default mean sprnorm() zero observations, though mean vector can provided using mean argument. default number samples generated sprnorm() one, though can changed using samples argument. sim_data tibble (data.frame) sf object, columns sim_data representing x-coordinates y-coordinates must provided sprnorm(). Note output coef(object, type = \"spcov\") spcov_params object. useful want simulate data given estimated spatial covariance parameters fitted model. Random effects incorporated simulation via randcov_params argument.","code":"sim_params <- spcov_params(\"exponential\", de = 5, ie = 1, range = 0.5) set.seed(0) n <- 3000 x <- runif(n) y <- runif(n) sim_coords <- tibble::tibble(x, y) sim_response <- sprnorm(sim_params, data = sim_coords, xcoord = x, ycoord = y) sim_data <- tibble::tibble(sim_coords, sim_response) ggplot(sim_data, aes(x = x, y = y, color = sim_response)) +   geom_point(size = 1.5) +   scale_color_viridis_c(limits = c(-7, 7)) +    theme_gray(base_size = 18)"},{"path":"/articles/guide.html","id":"big-data","dir":"Articles","previous_headings":"Advanced Features","what":"Big Data","title":"A Detailed Guide to spmodel","text":"computational cost associated model fitting exponential sample size estimation methods. maximum likelihood restricted maximum likelihood, computational cost estimating \\(\\boldsymbol{\\theta}\\) cubic. semivariogram weighted least squares semivariogram composite likelihood, computational cost estimating \\(\\boldsymbol{\\theta}\\) quadratic. computational cost associated estimating \\(\\boldsymbol{\\beta}\\) prediction cubic, regardless estimation method. Typically, samples sizes approaching 10,000 make computational cost model fitting prediction infeasible, necessitates use big data methods. spmodel offers big data methods model fitting point-referenced data via local argument splm(). method capable quickly fitting models hundreds thousands observations. neighborhood structure areal data, big data methods used point-referenced data apply areal data. Thus, big data method areal data local argument spautor(), model fitting sample sizes large spmodel offers big data methods prediction point-referenced data areal data via local argument predict(). method capable quickly predicting hundreds thousands observations. show use spmodel big data estimation prediction, use sim_data data previous section. sim_data tibble (data.frame) sf object, columns data representing x-coordinates y-coordinates must explicitly provided splm(). Next briefly discuss model fitting prediction big data spmodel, details provided Ver Hoef, Dumelle, et al. (2023).","code":""},{"path":"/articles/guide.html","id":"sec:modelfit-big","dir":"Articles","previous_headings":"Advanced Features > Big Data","what":"Model Fitting","title":"A Detailed Guide to spmodel","text":"spmodel uses “local spatial indexing” (SPIN) approach big data model fitting point-referenced data. Observations first assigned index. purposes model fitting, observations different indexes assumed uncorrelated. Assuming observations different indexes uncorrelated induces sparsity covariance matrix, greatly reduces computational time operations involve covariance matrix. local argument splm() controls big data options. local list several arguments. arguments local list control method used assign indexes, number observations index, number unique indexes, variance adjustments covariance matrix \\(\\hat{\\boldsymbol{\\beta}}\\), whether use parallel processing, parallel processing used, number cores. Big data simply accommodated setting local TRUE. shorthand local = list(method = \"kmeans\", size = 100, var_adjust = \"theoretical\", parallel = FALSE), assigns observations index groups based k-means clustering (MacQueen 1967), ensures index group approximately 100 observations, uses theoretically-correct variance adjustment, use parallel processing. Instead using local = TRUE, can explicitly set local. example, can fit model using random assignment 60 groups, use pooled variance adjustment, use parallel processing two cores running Likelihood-based statistics like AIC(), AICc(), logLik(), deviance() used compare model fit big data approximation model fit without big data approximation.","code":"local1 <- splm(sim_response ~ 1, sim_data, spcov_type = \"exponential\",                 xcoord = x, ycoord = y, local = TRUE) summary(local1) #>  #> Call: #> splm(formula = sim_response ~ 1, data = sim_data, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y, local = TRUE) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.9414 -1.2573 -0.0527  1.3783  6.6322  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)  -1.1149     0.6416  -1.738   0.0823 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Coefficients (exponential spatial covariance): #>     de     ie  range  #> 2.3112 1.0260 0.2395 local2_list <- list(method = \"random\", groups = 60, var_adjust = \"pooled\",                     parallel = TRUE, ncores = 2) local2 <- splm(sim_response ~ 1, sim_data, spcov_type = \"exponential\",                 xcoord = x, ycoord = y, local = local2_list)"},{"path":"/articles/guide.html","id":"sec:prediction-big","dir":"Articles","previous_headings":"Advanced Features > Big Data","what":"Prediction","title":"A Detailed Guide to spmodel","text":"point-referenced data, spmodel uses “local neighborhood” approach big data prediction. prediction computed using subset observed data instead observed data. discussing big data prediction, simulate 1000 locations unit square requiring prediction: local argument predict() controls big data options. local list several arguments. arguments local list control method used subset observed data, number observations subset, whether use parallel processing, parallel processing used, number cores. simplest way accommodate big data prediction set local TRUE. shorthand local = list(method = \"covariance\", size = 100, parallel = FALSE), implies , location requiring prediction, 100 observations data correlated used computation parallel processing used. Using local1 fitted model, store predictions variable called preds sim_preds data running predictions visualized running display similar pattern observed data. Observed data big data predictions unobserved locations. left figure, spatial data simulated unit square. spatial linear model fit using default big data approximation model-fitting. right figure, predictions made using fitted model default big data approximation prediction. Instead using local = TRUE, can explicitly set local: code implies uniquely location requiring prediction, 30 observations data closest (terms Euclidean distance) used computation parallel processing used two cores. areal data, local neighborhood approximation exists data’s underlying neighborhood structure. Thus, data must used compute predictions, consequence, method size components local list. components local list areal data parallel ncores.","code":"n_pred <- 1000 x <- runif(n_pred) y <- runif(n_pred) sim_preds <- tibble::tibble(x = x, y = y) sim_preds$preds <- predict(local1, newdata = sim_preds, local = TRUE) ggplot(sim_preds, aes(x = x, y = y, color = preds)) +   geom_point(size = 1.5) +   scale_color_viridis_c(limits = c(-7, 7)) +    theme_gray(base_size = 18) pred_list <- list(method = \"distance\", size = 30, parallel = TRUE, ncores = 2) predict(local1, newdata = sim_preds, local = pred_list)"},{"path":"/articles/guide.html","id":"sec:rf","dir":"Articles","previous_headings":"Advanced Features","what":"Random Forest Spatial Residual Models","title":"A Detailed Guide to spmodel","text":"Random forest spatial residual models used prediction. combine aspects random forest prediction spatial linear model prediction, can lead significant improvements predictive accuracy compared standard random forest prediction (Fox, Ver Hoef, Olsen 2020). fit random forest spatial residual model, use splmRF() (point-referenced data) spautorRF() (areal data). functions require least one explanatory variable specified, add explanatory variable called var sulfate sulfate_preds illustrative purposes. fit random forest spatial residual model running make predictions running","code":"sulfate$var <- rnorm(NROW(sulfate)) sulfate_preds$var <- rnorm(NROW(sulfate_preds)) sprfmod <- splmRF(sulfate ~ var, sulfate, spcov_type = \"exponential\") predict(sprfmod, newdata = sulfate_preds)"},{"path":"/articles/guide.html","id":"sec:spglm","dir":"Articles","previous_headings":"Advanced Features","what":"Spatial Generalized Linear Models","title":"A Detailed Guide to spmodel","text":"building spatial linear models, response vector \\(\\mathbf{y}\\) typically assumed Gaussian (given \\(\\mathbf{X}\\)). Relaxing assumption distribution \\(\\mathbf{y}\\) yields rich class spatial generalized linear models can describe binary data, proportion data, count data, skewed data parameterized \\[ g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\] \\(g(\\cdot)\\) called link function, \\(\\boldsymbol{\\mu}\\) mean \\(\\mathbf{y}\\), remaining terms \\(\\mathbf{X}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\) represent quantities spatial linear models. link function, \\(g(\\cdot)\\), “links” function \\(\\boldsymbol{\\mu}\\) linear term \\(\\boldsymbol{\\eta}\\) , denoted \\(\\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\), familiar spatial linear models. Note linking \\(\\boldsymbol{\\mu}\\) \\(\\boldsymbol{\\eta}\\) applies element-wise vector. link function \\(g(\\cdot)\\) corresponding inverse link function, \\(g^{-1}(\\cdot)\\). inverse link function “links” function \\(\\boldsymbol{\\eta}\\) \\(\\boldsymbol{\\mu}\\). Notice spatial generalized linear models, modeling \\(\\mathbf{y}\\) directly spatial linear models, rather modeling function mean \\(\\mathbf{y}\\). Also notice \\(\\boldsymbol{\\eta}\\) unconstrained \\(\\boldsymbol{\\mu}\\) usually constrained way (e.g., positive). model \\(g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\) called spatial generalized linear model. spmodel allows fitting spatial generalized linear models \\(\\mathbf{y}\\) binomial (Bernoulli), beta, Poisson, negative binomial, gamma, inverse Gaussian random vector via Laplace approximation restricted maximum likelihood estimation maximum likelihood estimation – Ver Hoef, Blagg, et al. (2023) provide details. binomial beta \\(\\mathbf{y}\\), logit link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\frac{\\boldsymbol{\\mu}}{1 - \\boldsymbol{\\mu}}) = \\boldsymbol{\\eta}\\), inverse logit link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\frac{\\exp(\\boldsymbol{\\eta})}{1 + \\exp(\\boldsymbol{\\eta})} = \\boldsymbol{\\mu}\\). Poisson, negative binomial, gamma, inverse Gaussian \\(\\mathbf{y}\\), log link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta}\\), inverse log link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\exp(\\boldsymbol{\\eta}) = \\boldsymbol{\\mu}\\). Full parameterizations distributions given technical details vignette, can viewed running vignette(\"technical\", \"spmodel\"). advanced features available spmodel spatial linear models also available spatial generalized linear models. means spatial generalized linear models spmodel can accommodate fixing spatial covariance parameters, fitting predicting multiple models, random effects (link scale), partition factors, anisotropy (link scale), simulation, big data, prediction.","code":""},{"path":"/articles/guide.html","id":"sec:modelfit-glm","dir":"Articles","previous_headings":"Advanced Features > Spatial Generalized Linear Models","what":"Model Fitting","title":"A Detailed Guide to spmodel","text":"spatial linear models, spatial generalized linear models fit spmodel point-referenced areal data. spglm() function used fit spatial generalized linear models point-referenced data, spgautor() function used fit spatial generalized linear models areal data. spglm() spgautor() share similar syntax splm() spautor(), respectively, though one additional argument required: family: generalized linear model family (.e., distribution \\(\\mathbf{y}\\)). family can binomial, beta, poisson, nbinomial, Gamma, inverse.gaussian. family uses similar syntax family argument glm(). One difference family spglm() compared family glm() link function fixed spglm(). splm() spautor(), data argument spglm() spgautor() can sf object data.frame (appropriate coordinate weight matrix information). Additionally, arguments splm() spautor() also available spglm() spgautor(). Next show basic features syntax spglm() using moose data. study impact elevation (elev) presence moose (presence) observed site location Alaska. presence equals one least one moose observed site zero otherwise. view first rows moose data running can visualize distribution moose presence (presence) running Distribution moose presence Alaska. presence equals one least one moose observed site zero otherwise. One example generalized linear model binomial (e.g., logistic) regression model. Binomial regression models often used model presence data . quantify relationship moose presence elevation, fit spatial binomial regression model (specific spatial generalized linear model) running estimation method specified via estmethod argument, default value \"reml\" restricted maximum likelihood. estimation method \"ml\" maximum likelihood. summarize fitted model running Similar summaries glm() objects, summaries spglm() objects include original function call, summary statistics deviance residuals, coefficients table fixed effects. logit moose presence probability appear related elevation, evidenced large p-value associated asymptotic z-test. pseudo r-squared also returned, quantifies proportion variability explained fixed effects. spatial covariance parameters dispersion parameter also returned. dispersion parameter estimated spatial generalized linear models changes mean-variance relationship \\(\\mathbf{y}\\). binomial regression models, dispersion parameter estimated always fixed one. tidy, glance, augment fitted model running","code":"moose #> Simple feature collection with 218 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> First 10 features: #>        elev strat count presence                 geometry #> 1  468.9167     L     0        0 POINT (293542.6 1541016) #> 2  362.3125     L     0        0 POINT (298313.1 1533972) #> 3  172.7500     M     0        0 POINT (281896.4 1532516) #> 4  279.6250     L     0        0 POINT (298651.3 1530264) #> 5  619.6000     L     0        0 POINT (311325.3 1527705) #> 6  164.1250     M     0        0 POINT (291421.5 1518398) #> 7  163.5000     M     0        0 POINT (287298.3 1518035) #> 8  186.3500     L     0        0 POINT (279050.9 1517324) #> 9  362.3125     L     0        0 POINT (346145.9 1512479) #> 10 430.5000     L     0        0 POINT (321354.6 1509966) ggplot(moose, aes(color = presence)) +   geom_sf(size = 2) +   scale_color_viridis_d(option = \"H\") +   theme_gray(base_size = 14) binmod <- spglm(presence ~ elev, family = \"binomial\",                 data  = moose, spcov_type = \"exponential\") summary(binmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #> Deviance Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5249 -0.8114  0.5600  0.8306  1.5757  #>  #> Coefficients (fixed): #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) -0.874038   1.140953  -0.766    0.444 #> elev         0.002365   0.003184   0.743    0.458 #>  #> Pseudo R-squared: 0.00311 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.746e+00 4.392e-03 3.203e+04  #>  #> Coefficients (Dispersion for binomial family): #> dispersion  #>          1 tidy(binmod) #> # A tibble: 2 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept) -0.874     1.14       -0.766   0.444 #> 2 elev         0.00237   0.00318     0.743   0.458 glance(binmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   218     2     3  692.  698.  698.  -346.     190.          0.00311 augment(binmod) #> Simple feature collection with 218 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419057.4 ymax: 1541016 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 218 × 8 #>    presence  elev .fitted .resid    .hat  .cooksd .std.resid #>  * <fct>    <dbl>   <dbl>  <dbl>   <dbl>    <dbl>      <dbl> #>  1 0         469.  0.150  -0.571 0.0500  0.00904      -0.586 #>  2 0         362.  0.107  -0.477 0.0168  0.00198      -0.481 #>  3 0         173.  0.104  -0.468 0.00213 0.000235     -0.469 #>  4 0         280.  0.0939 -0.444 0.00616 0.000615     -0.445 #>  5 0         620.  0.198  -0.664 0.136   0.0402       -0.714 #>  6 0         164.  0.130  -0.528 0.00260 0.000364     -0.528 #>  7 0         164.  0.135  -0.538 0.00269 0.000392     -0.539 #>  8 0         186.  0.166  -0.603 0.00332 0.000607     -0.604 #>  9 0         362.  0.168  -0.606 0.0245  0.00474      -0.614 #> 10 0         430.  0.225  -0.714 0.0528  0.0150       -0.734 #> # ℹ 208 more rows #> # ℹ 1 more variable: geometry <POINT [m]>"},{"path":"/articles/guide.html","id":"sec:predict-glm","dir":"Articles","previous_headings":"Advanced Features > Spatial Generalized Linear Models","what":"Prediction","title":"A Detailed Guide to spmodel","text":"spatial generalized linear models, predicting mean process generating observation (includes spatial effects) rather observation . make predictions moose presence probability locations moose_preds running type argument specifies whether predictions returned link response (inverse link) scale. visualize predictions running Distribution moose presence probability predictions Alaska. predictions similar spatial patterns moose presence observed data. Next remove model predictions moose_preds show augment() can used obtain predictions alongside prediction intervals (response scale):","code":"moose_preds$preds <- predict(binmod, newdata = moose_preds, type = \"response\") ggplot(moose_preds, aes(color = preds)) +    geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 1), option = \"H\") +    theme_gray(base_size = 14) moose_preds$preds <- NULL augment(binmod, newdata = moose_preds, type = \"response\", interval = \"prediction\") #> Simple feature collection with 100 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 100 × 6 #>     elev strat .fitted .lower .upper           geometry #>  * <dbl> <chr>   <dbl>  <dbl>  <dbl>        <POINT [m]> #>  1  143. L       0.705 0.248   0.946 (401239.6 1436192) #>  2  324. L       0.336 0.0373  0.868 (352640.6 1490695) #>  3  158. L       0.263 0.0321  0.792 (360954.9 1491590) #>  4  221. M       0.243 0.0360  0.734 (291839.8 1466091) #>  5  209. M       0.742 0.270   0.957 (310991.9 1441630) #>  6  218. L       0.191 0.0196  0.736 (304473.8 1512103) #>  7  127. L       0.179 0.0226  0.673 (339011.1 1459318) #>  8  122. L       0.241 0.0344  0.738 (342827.3 1463452) #>  9  191  L       0.386 0.0414  0.902 (284453.8 1502837) #> 10  105. L       0.494 0.114   0.882 (391343.9 1483791) #> # ℹ 90 more rows"},{"path":"/articles/guide.html","id":"sec:sim_data-glm","dir":"Articles","previous_headings":"Advanced Features > Spatial Generalized Linear Models","what":"Simulating Spatial Generalized Data","title":"A Detailed Guide to spmodel","text":"Several functions exist simulate spatial generalized data: sprbinom() binomial random variables; sprbeta() beta random variables; sprpois() Poisson random variables; sprnbinom() negative binomial random variables; sprgamma() gamma random variables; spinvgauss() inverse Gaussian random variables. functions share similar syntax sprnorm() simulating spatial Gaussian data require spcov_params() object. generalized data simulation functions work first simulating spatial Gaussian data link scale. realization used mean simulate spatial generalized linear model data. recreate sim_params sim_data running simulate Bernoulli (binomial size one) random variable running visualize running Spatial binomial data simulated unit square. noticeable patterning response variable (sim_response) places noticeable patterning spatial Gaussian data. expected, spatial Gaussian data used inform mean (proportion) parameter binomial data. Thus mean (proportion) parameter higher, likely binomial observation takes value one (successes usually coded one).","code":"sim_params <- spcov_params(\"exponential\", de = 5, ie = 1, range = 0.5) set.seed(0) n <- 3000 x <- runif(n) y <- runif(n) sim_coords <- tibble::tibble(x, y) sim_response <- sprbinom(sim_params, data = sim_coords, xcoord = x, ycoord = y) sim_data <- tibble::tibble(sim_coords, sim_response = factor(sim_response)) ggplot(sim_data, aes(x = x, y = y, color = sim_response)) +   geom_point(size = 1.5) +   scale_color_viridis_d(option = \"H\") +   theme_gray(base_size = 14)"},{"path":"/articles/guide.html","id":"additional-examples","dir":"Articles","previous_headings":"Advanced Features > Spatial Generalized Linear Models","what":"Additional Examples","title":"A Detailed Guide to spmodel","text":"previously showed use spmodel model binary data via spatial binomial regression. Recall spmodel can also used model count data via spatial Poisson regression spatial negative binomial regression, proportion data via spatial beta regression, skewed, positive data via spatial gamma regression spatial inverse Gaussian regression. Next provide examples fitting models. Poisson regression used model count data. quantify relationship moose counts (count) elevation, fit spatial Poisson regression model make predictions running Poisson regression assumes mean variance equal. Often practice, variance larger mean. variance larger mean, said overdispersion data. Negative binomial regression accounts overdispersion via extra dispersion parameter allows variance change separately mean (recall full negative binomial regression parameterization available technical details vignette). fit spatial negative binomial regression model moose count data make predictions running Gamma regression used model skewed, positive data. Suppose instead modeling sulfate data using spatial linear model, modeled sulfate using spatial gamma regression. fit spatial gamma regression model sulfate data make predictions running","code":"poismod <- spglm(count ~ elev, family = \"poisson\",                  data = moose, spcov_type = \"exponential\") predict(poismod, newdata = moose_preds) nbmod <- spglm(count ~ elev, family = \"nbinomial\",                data = moose, spcov_type = \"exponential\") predict(nbmod, newdata = moose_preds) gammamod <- spglm(sulfate ~ 1, family = \"Gamma\",                   data = sulfate, spcov_type = \"exponential\") predict(gammamod, newdata = sulfate_preds)"},{"path":"/articles/guide.html","id":"sec:discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"A Detailed Guide to spmodel","text":"Throughout vignette, shown use spmodel fit, summarize, predict variety spatial statistical models. Spatial linear models point-referenced data (.e., geostatistical models) fit using splm() function spatial linear models areal data (.e., spatial autoregressive models) fit using spautor() function. Spatial generalized linear models point-referenced data (.e., generalized geostatistical models) fit using spglm() function spatial generalized linear models areal data (.e., spatial generalized autoregressive models) fit using spgautor() function. Several model-fit statistics diagnostics available. broom functions tidy() glance() used tidy glance fitted model. broom function augment() used augment data model diagnostics augment newdata predictions. Several advanced features available accommodate fixed covariance parameter values, random effects, partition factors, anisotropy, simulated data, big data approximations, random forests model fitting prediction. appreciate feedback users regarding spmodel. learn provide feedback contribute spmodel, please visit GitHub repository https://github.com/USEPA/spmodel.","code":""},{"path":[]},{"path":[]},{"path":"/articles/guide.html","id":"app:caribou","dir":"Articles","previous_headings":"Appendices","what":"An Additional Example Using caribou","title":"A Detailed Guide to spmodel","text":"purpose example show applications splm() spautor() functions data sf object, well show functions spmodel. caribou data designed experiment two treatments observed equally spaced grid can analyzed point-referenced areal data. view first rows caribou running First analyze caribou point-referenced data. caribou sf object, must provide columns caribou represent x-coordinates y-coordinates. fit spatial linear model regressing nitrogen percentage (z) water presence (water) tarp cover (tarp) running analysis variance can conducted assess overall impact tarp variable, three levels (clear, shade, none), water variable, two levels (water water). perform analysis variance tidy results running significant evidence least one tarp cover impacts nitrogen. Note , like summary(), p-values associated asymptotic hypothesis test (, asymptotic Chi-squared test). Next analyze caribou areal data. caribou sf object, must create weights matrix. define two observations neighbors adjacent (directly east, west, north, south) one another. Two observations caribou adjacent distance equals one (recall observations neighbors ): Currently, W logical matrix TRUEs FALSEs. coerce numeric matrix running \\(ij\\)th value W 1 observation \\(\\)th row neighbors observation \\(j\\)th row 0 otherwise. fit spatial autoregressive model regressing nitrogen percentage (z) water presence (water) tarp cover (tarp) running perform analysis variance tidy results running significant evidence least one tarp cover impacts nitrogen. Note , like summary(), p-values associated asymptotic hypothesis test (, asymptotic Chi-squared test).","code":"caribou #> # A tibble: 30 × 5 #>    water tarp      z     x     y #>    <fct> <fct> <dbl> <dbl> <dbl> #>  1 Y     clear  2.42     1     6 #>  2 Y     shade  2.44     2     6 #>  3 Y     none   1.81     3     6 #>  4 N     clear  1.97     4     6 #>  5 N     shade  2.38     5     6 #>  6 Y     none   2.22     1     5 #>  7 N     clear  2.10     2     5 #>  8 Y     clear  1.80     3     5 #>  9 Y     shade  1.96     4     5 #> 10 Y     none   2.10     5     5 #> # ℹ 20 more rows cariboumod <- splm(z ~ water + tarp, data = caribou,                    spcov_type = \"exponential\", xcoord = x, ycoord = y) tidy(anova(cariboumod)) #> # A tibble: 3 × 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 (Intercept)     1     43.5  4.33e-11 #> 2 water           1      1.66 1.98e- 1 #> 3 tarp            2     15.4  4.51e- 4 coords <- cbind(caribou$x, caribou$y) dists <- as.matrix(dist(coords)) W <- dists == 1 W <- W * 1 cariboumod <- spautor(z ~ water + tarp, data = caribou,                       spcov_type = \"car\", W = W) tidy(anova(cariboumod)) #> # A tibble: 3 × 4 #>   effects        df statistic   p.value #>   <chr>       <int>     <dbl>     <dbl> #> 1 (Intercept)     1    720.   1.67e-158 #> 2 water           1      1.80 1.80e-  1 #> 3 tarp            2     15.1  5.31e-  4"},{"path":"/articles/guide.html","id":"app:rand","dir":"Articles","previous_headings":"Appendices","what":"Random Effect Syntax","title":"A Detailed Guide to spmodel","text":"couple common ways specify random effects random argument splm() spautor() include: ~ (1 | group) : Random intercepts level group. ~ group shorthand ~ (1 | group). ~ (var | group): Random intercepts level group random slopes depend variable var level group. additional syntax complicated random effects structures include: ~ (var - 1 | group): Random slopes (without intercepts) depend variable var level group. ~ (1 | group:subgroup): Random intercepts combination levels group levels subgroup. ~ group:subgroup shorthand ~ (1 | group:subgroup). ~ (var | group:subgroup): Random intercepts combination levels group levels subgroup random slopes depend variable var combination levels group levels subgroup. ~ (var - 1 | group:subgroup): Random slopes (without intercepts) depend variable var combination levels group levels subgroup. ~ (1 | group/subgroup): Shorthand ~ (1 | group) + (1 | group:subgroup). Commonly, group/subgroup notation implies subgroup nested within group. ~ (var | group/subgroup): Shorthand ~ (var | group) + (var | group:subgroup). Commonly, group/subgroup notation implies subgroup nested within group. ~ (var - 1 | group/subgroup): Shorthand ~ (var - 1 | group) + (var - 1 | group:subgroup). Commonly, group/subgroup notation implies subgroup nested within group. Distinct random effects terms separated random +. term must wrapped parentheses. example, incorporate random intercepts group subgroup, random looks like ~ (1 | group) + (1 | subgroup). random intercepts, recall ~ group shorthand ~ (1 | group). Thus, equivalent representation ~ (1 | group) + (1 | subgroup) ~ group + subgroup. Note random intercepts random slopes, variable right-hand side | (.e., group, subgroup, group:subgroup) must factor (character) variable.","code":""},{"path":"/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Introduction to spmodel","text":"spmodel package used fit summarize spatial models make predictions unobserved locations (Kriging). vignette provides overview basic features spmodel. load spmodel running use spmodel formal publication report, please cite . Citing spmodel lets us devote resources future. view spmodel citation running three spmodel vignettes available website https://usepa.github.io/spmodel/: Detailed Guide spmodel Spatial Generalized Linear Models `spmodel Technical Details Additionally, workbook accompanied recent spmodel workshop available https://usepa.github.io/spmodel.spatialstat2023/","code":"library(spmodel) citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical #>   modeling and prediction in R. PLOS ONE 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   }"},{"path":"/articles/introduction.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The Data","title":"An Introduction to spmodel","text":"Many data sets use vignette sf objects. sf objects data frames (tibbles) special structure stores spatial information. built using sf (Pebesma 2018) package, installed alongside spmodel. use six data sets throughout vignette: moss: sf object heavy metal concentrations Alaska. sulfate: sf object sulfate measurements conterminous United States. sulfate_preds: sf object locations predict sulfate measurements conterminous United States. caribou: tibble (special data.frame) caribou foraging experiment Alaska. moose: sf object moose measurements Alaska. moose_preds: sf object locations predict moose measurements Alaska. create visualizations using ggplot2 (Wickham 2016), load running ggplot2 installed alongside spmodel dependencies = TRUE install.packages(), check installed reproducing visualizations vignette.","code":"library(ggplot2)"},{"path":"/articles/introduction.html","id":"sec:splm","dir":"Articles","previous_headings":"","what":"Spatial Linear Models","title":"An Introduction to spmodel","text":"Spatial linear models quantitative response vector \\(\\mathbf{y}\\) spatially dependent random errors often parameterized \\[ \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\] \\(\\mathbf{X}\\) matrix explanatory variables (usually including column 1’s intercept), \\(\\boldsymbol{\\beta}\\) vector fixed effects describe average impact \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), \\(\\boldsymbol{\\tau}\\) vector spatially dependent (correlated) random errors, \\(\\boldsymbol{\\epsilon}\\) vector spatially independent (uncorrelated) random errors. spatial dependence \\(\\boldsymbol{\\tau}\\) explicitly specified using spatial covariance function incorporates variance \\(\\boldsymbol{\\tau}\\), often called partial sill, range parameter controls behavior spatial covariance. variance \\(\\boldsymbol{\\epsilon}\\) often called nugget. Spatial linear models fit spmodel point-referenced areal data. Data point-referenced elements \\(\\mathbf{y}\\) observed point-locations indexed x-coordinates y-coordinates spatially continuous surface infinite number locations. splm() function used fit spatial linear models point-referenced data (often called geostatistical models). Data areal elements \\(\\mathbf{y}\\) observed part finite network polygons whose connections indexed neighborhood structure. example, polygons may represent counties state neighbors share least one boundary. spautor() function used fit spatial linear models areal data (often called spatial autoregressive models). vignette focuses spatial linear models point-referenced data, though spmodel’s vignettes discuss spatial linear models areal data. splm() function similar syntax output commonly used lm() function used fit non-spatial linear models. splm() generally requires least three arguments: formula uses syntax formula argument lm() data: data.frame sf object contains response variable, explanatory variables, spatial information. spcov_type: spatial covariance type (\"exponential\", \"spherical\", \"matern\", etc). data sf object, coordinate information taken object’s geometry. data data.frame (tibble), xcoord ycoord required arguments splm() specify columns data representing x-coordinates y-coordinates, respectively. spmodel uses spatial coordinates “-,” meaning spmodel perform projections. project data change coordinate reference system, use sf::st_transform(). sf object polygon geometries given splm(), centroids polygon used fit spatial linear model. Next show basic features syntax splm() using Alaskan moss data. study impact log distance road (log_dist2road) log zinc concentration (log_Zn). view first rows moss data running can visualize distribution log zinc concentration (log_Zn) running  Log zinc concentration appears highest middle spatial domain, road running . fit spatial linear model regressing log zinc concentration log distance road using exponential spatial covariance function running estimation method specified via estmethod argument, default value \"reml\" restricted maximum likelihood. estimation methods \"ml\" maximum likelihood, \"sv-wls\" semivariogram weighted least squares, \"sv-cl\" semivariogram composite likelihood. Printing spmod shows function call, estimated fixed effect coefficients, estimated spatial covariance parameters. de estimated variance \\(\\boldsymbol{\\tau}\\) (spatially dependent random error), ie estimated variance \\(\\boldsymbol{\\epsilon}\\) (spatially independent random error), range range parameter. Next show obtain detailed summary information fitted model.","code":"moss #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 × 8 #>    sample field_dup lab_rep year  sideroad log_dist2road log_Zn #>    <fct>  <fct>     <fct>   <fct> <fct>            <dbl>  <dbl> #>  1 001PR  1         1       2001  N                 2.68   7.33 #>  2 001PR  1         2       2001  N                 2.68   7.38 #>  3 002PR  1         1       2001  N                 2.54   7.58 #>  4 003PR  1         1       2001  N                 2.97   7.63 #>  5 004PR  1         1       2001  N                 2.72   7.26 #>  6 005PR  1         1       2001  N                 2.76   7.65 #>  7 006PR  1         1       2001  S                 2.30   7.59 #>  8 007PR  1         1       2001  N                 2.78   7.16 #>  9 008PR  1         1       2001  N                 2.93   7.19 #> 10 009PR  1         1       2001  N                 2.79   8.07 #> # ℹ 355 more rows #> # ℹ 1 more variable: geometry <POINT [m]> ggplot(moss, aes(color = log_Zn)) +   geom_sf() +   scale_color_viridis_c() spmod <- splm(log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") print(spmod) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") #>  #>  #> Coefficients (fixed): #>   (Intercept)  log_dist2road   #>        9.7683        -0.5629   #>  #>  #> Coefficients (exponential spatial covariance): #>        de         ie      range   #> 3.595e-01  7.897e-02  8.237e+03"},{"path":"/articles/introduction.html","id":"model-summaries","dir":"Articles","previous_headings":"Spatial Linear Models","what":"Model Summaries","title":"An Introduction to spmodel","text":"summarize fitted model running Similar summaries lm() objects, summaries splm() objects include original function call, residuals, coefficients table fixed effects. Log zinc concentration appears significantly decrease log distance road, evidenced small p-value associated asymptotic z-test. pseudo r-squared also returned, quantifies proportion variability explained fixed effects. remainder subsection, describe broom (Robinson, Hayes, Couch 2021) functions tidy(), glance() augment(). tidy() tidies coefficient output convenient tibble, glance() glances model-fit statistics, augment() augments data fitted model diagnostics. tidy fixed effects running glance model-fit statistics running columns tibble represent: n: sample size p: number fixed effects (linearly independent columns \\(\\mathbf{X}\\)) npar: number estimated covariance parameters value: value minimized objective function used fitting model AIC: Akaike Information Criterion (AIC) AICc: AIC small sample size correction logLik: log-likelihood deviance: deviance pseudo.r.squared: pseudo r-squared glances() function can used glance multiple models . Suppose wanted compare current model, uses exponential spatial covariance, new model without spatial covariance (equivalent model fit using lm()). using glances() running much lower AIC AICc spatial linear model indicates much better fit data. Outside glance() glances(), functions AIC(), AICc(), logLik(), deviance(), pseudoR2() available compute relevant statistics. augment data diagnostics running columns tibble represent: log_Zn: log zinc concentration. log_dist2road: log distance road. .fitted: fitted values (estimated mean given explanatory variable values). .resid: residuals (response minus fitted values). .hat: leverage (hat) values. .cooksd: Cook’s distance .std.residuals: Standardized residuals geometry: spatial information sf object. default, augment() returns variables data used model. variables original data returned setting drop = FALSE. Many model diagnostics can visualized running plot(spmod). can learn plot() spmodel running help(\"plot.spmodel\", \"spmodel\").","code":"summary(spmod) #>  #> Call: #> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\") #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.6801 -1.3606 -0.8103 -0.2485  1.1298  #>  #> Coefficients (fixed): #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)    9.76825    0.25216   38.74   <2e-16 *** #> log_dist2road -0.56287    0.02013  -27.96   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.683 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.595e-01 7.897e-02 8.237e+03 tidy(spmod) #> # A tibble: 2 × 5 #>   term          estimate std.error statistic p.value #>   <chr>            <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept)      9.77     0.252       38.7       0 #> 2 log_dist2road   -0.563    0.0201     -28.0       0 glance(spmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   365     2     3  367.  373.  373.  -184.     363.            0.683 lmod <- splm(log_Zn ~ log_dist2road, data = moss, spcov_type = \"none\") glances(spmod, lmod) #> # A tibble: 2 × 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spmod   365     2     3  367.  373.  373.  -184.     363.            0.683 #> 2 lmod    365     2     1  634.  636.  636.  -317.     363.            0.671 augment(spmod) #> Simple feature collection with 365 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 365 × 8 #>    log_Zn log_dist2road .fitted .resid   .hat .cooksd .std.resid #>  *  <dbl>         <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl> #>  1   7.33          2.68    8.26 -0.928 0.0200 0.0142       1.18  #>  2   7.38          2.68    8.26 -0.880 0.0200 0.0186       1.35  #>  3   7.58          2.54    8.34 -0.755 0.0225 0.00482      0.647 #>  4   7.63          2.97    8.09 -0.464 0.0197 0.0305       1.74  #>  5   7.26          2.72    8.24 -0.977 0.0215 0.131        3.45  #>  6   7.65          2.76    8.21 -0.568 0.0284 0.0521       1.89  #>  7   7.59          2.30    8.47 -0.886 0.0300 0.0591       1.96  #>  8   7.16          2.78    8.20 -1.05  0.0335 0.00334      0.439 #>  9   7.19          2.93    8.12 -0.926 0.0378 0.0309       1.26  #> 10   8.07          2.79    8.20 -0.123 0.0314 0.00847      0.723 #> # ℹ 355 more rows #> # ℹ 1 more variable: geometry <POINT [m]>"},{"path":"/articles/introduction.html","id":"prediction-kriging","dir":"Articles","previous_headings":"Spatial Linear Models","what":"Prediction (Kriging)","title":"An Introduction to spmodel","text":"Commonly goal data analysis make predictions unobserved locations. spatial contexts, prediction often called Kriging. Next use sulfate data build spatial linear model sulfate measurements conterminous United States goal making sulfate predictions (Kriging) unobserved locations sulfate_preds. visualize distribution sulfate running  Sulfate appears spatially dependent, measurements highest Northeast lowest Midwest West. fit spatial linear model regressing sulfate intercept using spherical spatial covariance function running make predictions locations sulfate_preds store new variable called preds sulfate_preds data set running visualize predictions running  predictions similar sulfate patterns observed data (predicted values highest Northeast lowest Midwest West). Next remove model predictions sulfate_preds showing augment() can used obtain predictions: augment() previously used augment original data model diagnostics, can also used augment newdata data predictions: .fitted represents predictions. Confidence intervals mean response prediction intervals predicted response can obtained specifying interval argument predict() augment(): default, predict() augment() compute 95% intervals, though can changed using level argument. fitted model example used intercept, code used prediction fitted models explanatory variables. explanatory variables used fit model, explanatory variables must included newdata names data. data data.frame, coordinates must included newdata names data. data sf object, coordinates must included newdata geometry name data. using projected coordinates, projection newdata projection data.","code":"ggplot(sulfate, aes(color = sulfate)) +   geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 45)) sulfmod <- splm(sulfate ~ 1, data = sulfate, spcov_type =  \"spherical\") sulfate_preds$preds <- predict(sulfmod, newdata = sulfate_preds) ggplot(sulfate_preds, aes(color = preds)) +   geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 45)) sulfate_preds$preds <- NULL augment(sulfmod, newdata = sulfate_preds) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 2 #>    .fitted            geometry #>  *   <dbl>         <POINT [m]> #>  1    1.40  (-1771413 1752976) #>  2   24.5    (1018112 1867127) #>  3    8.99 (-291256.8 1553212) #>  4   16.4    (1274293 1267835) #>  5    4.91 (-547437.6 1638825) #>  6   26.7    (1445080 1981278) #>  7    3.00  (-1629090 3037173) #>  8   14.3    (1302757 1039534) #>  9    1.49  (-1429838 2523494) #> 10   14.4    (1131970 1096609) #> # ℹ 90 more rows augment(sulfmod, newdata = sulfate_preds, interval = \"prediction\") #> Simple feature collection with 100 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 4 #>    .fitted .lower .upper            geometry #>  *   <dbl>  <dbl>  <dbl>         <POINT [m]> #>  1    1.40  -6.62   9.42  (-1771413 1752976) #>  2   24.5   17.0   32.0    (1018112 1867127) #>  3    8.99   1.09  16.9  (-291256.8 1553212) #>  4   16.4    8.67  24.2    (1274293 1267835) #>  5    4.91  -2.80  12.6  (-547437.6 1638825) #>  6   26.7   19.2   34.2    (1445080 1981278) #>  7    3.00  -4.92  10.9   (-1629090 3037173) #>  8   14.3    6.76  21.8    (1302757 1039534) #>  9    1.49  -6.34   9.32  (-1429838 2523494) #> 10   14.4    6.74  22.1    (1131970 1096609) #> # ℹ 90 more rows"},{"path":"/articles/introduction.html","id":"an-additional-example","dir":"Articles","previous_headings":"Spatial Linear Models","what":"An Additional Example","title":"An Introduction to spmodel","text":"now use caribou data foraging experiment conducted Alaska show application splm() data stored tibble (data.frame) instead sf object. caribou, x-coordinates stored x column y-coordinates stored y column. view first rows caribou running fit spatial linear model regressing nitrogen percentage (z) water presence (water) tarp cover (tarp) running analysis variance can conducted assess overall impact tarp variable, three levels (clear, shade, none), water variable, two levels (water water). perform analysis variance running seems significant evidence least one tarp cover impacts nitrogen. Note , like summary(), p-values associated asymptotic hypothesis test (, asymptotic Chi-squared test).","code":"caribou #> # A tibble: 30 × 5 #>    water tarp      z     x     y #>    <fct> <fct> <dbl> <dbl> <dbl> #>  1 Y     clear  2.42     1     6 #>  2 Y     shade  2.44     2     6 #>  3 Y     none   1.81     3     6 #>  4 N     clear  1.97     4     6 #>  5 N     shade  2.38     5     6 #>  6 Y     none   2.22     1     5 #>  7 N     clear  2.10     2     5 #>  8 Y     clear  1.80     3     5 #>  9 Y     shade  1.96     4     5 #> 10 Y     none   2.10     5     5 #> # ℹ 20 more rows cariboumod <- splm(z ~ water + tarp, data = caribou,                    spcov_type = \"exponential\", xcoord = x, ycoord = y) anova(cariboumod) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/articles/introduction.html","id":"spatial-generalized-linear-models","dir":"Articles","previous_headings":"","what":"Spatial Generalized Linear Models","title":"An Introduction to spmodel","text":"building spatial linear models, response vector \\(\\mathbf{y}\\) typically assumed Gaussian (given \\(\\mathbf{X}\\)). Relaxing assumption distribution \\(\\mathbf{y}\\) yields rich class spatial generalized linear models can describe binary data, proportion data, count data, skewed data. Spatial generalized linear models parameterized \\[ g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\] \\(g(\\cdot)\\) called link function, \\(\\boldsymbol{\\mu}\\) mean \\(\\mathbf{y}\\), remaining terms \\(\\mathbf{X}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\) represent quantities spatial linear models. link function, \\(g(\\cdot)\\), “links” function \\(\\boldsymbol{\\mu}\\) linear term \\(\\boldsymbol{\\eta}\\), denoted \\(\\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\), familiar spatial linear models. Note linking \\(\\boldsymbol{\\mu}\\) \\(\\boldsymbol{\\eta}\\) applies element-wise vector. link function \\(g(\\cdot)\\) corresponding inverse link function, \\(g^{-1}(\\cdot)\\). inverse link function “links” function \\(\\boldsymbol{\\eta}\\) \\(\\boldsymbol{\\mu}\\). Notice spatial generalized linear models, modeling \\(\\mathbf{y}\\) directly spatial linear models, rather modeling function mean \\(\\mathbf{y}\\). Also notice \\(\\boldsymbol{\\eta}\\) unconstrained \\(\\boldsymbol{\\mu}\\) usually constrained way (e.g., positive). Next discuss specific distributions link functions used spmodel. spmodel allows fitting spatial generalized linear models \\(\\mathbf{y}\\) binomial (Bernoulli), beta, Poisson, negative binomial, gamma, inverse Gaussian random vector. binomial beta \\(\\mathbf{y}\\), logit link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\frac{\\boldsymbol{\\mu}}{1 - \\boldsymbol{\\mu}}) = \\boldsymbol{\\eta}\\), inverse logit link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\frac{\\exp(\\boldsymbol{\\eta})}{1 + \\exp(\\boldsymbol{\\eta})} = \\boldsymbol{\\mu}\\). Poisson, negative binomial, gamma, inverse Gaussian \\(\\mathbf{y}\\), log link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta}\\), inverse log link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\exp(\\boldsymbol{\\eta}) = \\boldsymbol{\\mu}\\). spatial linear models, spatial generalized linear models fit spmodel point-referenced areal data. spglm() function used fit spatial generalized linear models point-referenced data, spgautor() function used fit spatial generalized linear models areal data. Though vignette focuses point-referenced data, spmodel’s vignettes discuss spatial generalized linear models areal data. spglm() function quite similar splm() function, though one additional argument required: family uses similar syntax family argument glm(). One difference family spglm() compared family glm() link function fixed spglm(). Next show basic features syntax spglm() using moose data. study impact elevation (elev) presence moose (presence) observed site location Alaska. presence equals one least one moose observed site zero otherwise. view first rows moose data running can visualize distribution moose presence running  One example generalized linear model binomial (e.g., logistic) regression model. Binomial regression models often used model presence data . quantify relationship moose presence elevation, fit spatial binomial regression model (specific spatial generalized linear model) running estimation method specified via estmethod argument, default value \"reml\" restricted maximum likelihood. estimation method \"ml\" maximum likelihood. Printing binmod shows function call, estimated fixed effect coefficients (link scale), estimated spatial covariance parameters, dispersion parameter. dispersion parameter estimated spatial generalized linear models changes mean-variance relationship \\(\\mathbf{y}\\). binomial regression models, dispersion parameter estimated always fixed one.","code":"moose #> Simple feature collection with 218 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> First 10 features: #>        elev strat count presence                 geometry #> 1  468.9167     L     0        0 POINT (293542.6 1541016) #> 2  362.3125     L     0        0 POINT (298313.1 1533972) #> 3  172.7500     M     0        0 POINT (281896.4 1532516) #> 4  279.6250     L     0        0 POINT (298651.3 1530264) #> 5  619.6000     L     0        0 POINT (311325.3 1527705) #> 6  164.1250     M     0        0 POINT (291421.5 1518398) #> 7  163.5000     M     0        0 POINT (287298.3 1518035) #> 8  186.3500     L     0        0 POINT (279050.9 1517324) #> 9  362.3125     L     0        0 POINT (346145.9 1512479) #> 10 430.5000     L     0        0 POINT (321354.6 1509966) ggplot(moose, aes(color = presence)) +   scale_color_viridis_d(option = \"H\") +   geom_sf(size = 2) binmod <- spglm(presence ~ elev, family = \"binomial\",                 data  = moose, spcov_type = \"exponential\") print(binmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #>  #> Coefficients (fixed): #> (Intercept)         elev   #>   -0.874038     0.002365   #>  #>  #> Coefficients (exponential spatial covariance): #>        de         ie      range   #> 3.746e+00  4.392e-03  3.203e+04   #>  #>  #> Coefficients (Dispersion for binomial family): #> dispersion   #>          1"},{"path":"/articles/introduction.html","id":"model-summaries-1","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Model Summaries","title":"An Introduction to spmodel","text":"summarize fitted model running Similar summaries glm() objects, summaries spglm() objects include original function call, summary statistics deviance residuals, coefficients table fixed effects. logit moose presence probability appear related elevation, evidenced large p-value associated asymptotic z-test. pseudo r-squared also returned, quantifies proportion variability explained fixed effects. spatial covariance parameters dispersion parameter also returned. tidy(), glance(), augment() functions behave similarly spglm() objects splm() objects. tidy fixed effects (link scale) running glance model-fit statistics running glance spatial binomial regression model non-spatial binomial regression model running lower AIC AICc spatial binomial regression model indicates much better fit data. augment data diagnostics running","code":"summary(binmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #> Deviance Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5249 -0.8114  0.5600  0.8306  1.5757  #>  #> Coefficients (fixed): #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) -0.874038   1.140953  -0.766    0.444 #> elev         0.002365   0.003184   0.743    0.458 #>  #> Pseudo R-squared: 0.00311 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.746e+00 4.392e-03 3.203e+04  #>  #> Coefficients (Dispersion for binomial family): #> dispersion  #>          1 tidy(binmod) #> # A tibble: 2 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept) -0.874     1.14       -0.766   0.444 #> 2 elev         0.00237   0.00318     0.743   0.458 glance(binmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   218     2     3  692.  698.  698.  -346.     190.          0.00311 glmod <- spglm(presence ~ elev, family = \"binomial\", data = moose, spcov_type = \"none\") glances(binmod, glmod) #> # A tibble: 2 × 10 #>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 binmod   218     2     3  692.  698.  698.  -346.     190.          0.00311 #> 2 glmod    218     2     1  715.  717.  717.  -358.     302.          0.00185 augment(binmod) #> Simple feature collection with 218 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419057.4 ymax: 1541016 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 218 × 8 #>    presence  elev .fitted .resid    .hat  .cooksd .std.resid #>  * <fct>    <dbl>   <dbl>  <dbl>   <dbl>    <dbl>      <dbl> #>  1 0         469.  0.150  -0.571 0.0500  0.00904      -0.586 #>  2 0         362.  0.107  -0.477 0.0168  0.00198      -0.481 #>  3 0         173.  0.104  -0.468 0.00213 0.000235     -0.469 #>  4 0         280.  0.0939 -0.444 0.00616 0.000615     -0.445 #>  5 0         620.  0.198  -0.664 0.136   0.0402       -0.714 #>  6 0         164.  0.130  -0.528 0.00260 0.000364     -0.528 #>  7 0         164.  0.135  -0.538 0.00269 0.000392     -0.539 #>  8 0         186.  0.166  -0.603 0.00332 0.000607     -0.604 #>  9 0         362.  0.168  -0.606 0.0245  0.00474      -0.614 #> 10 0         430.  0.225  -0.714 0.0528  0.0150       -0.734 #> # ℹ 208 more rows #> # ℹ 1 more variable: geometry <POINT [m]>"},{"path":"/articles/introduction.html","id":"prediction-kriging-1","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Prediction (Kriging)","title":"An Introduction to spmodel","text":"spatial generalized linear models, predicting mean process generating observation rather observation . make predictions moose presence probability locations moose_preds running type argument specifies whether predictions returned link response (inverse link) scale. visualize predictions running  predictions similar spatial patterns moose presence observed data. Next remove model predictions moose_preds show augment() can used obtain predictions alongside prediction intervals (response scale):","code":"moose_preds$preds <- predict(binmod, newdata = moose_preds, type = \"response\") ggplot(moose_preds, aes(color = preds)) +    geom_sf(size = 2) +   scale_color_viridis_c(limits = c(0, 1), option = \"H\") moose_preds$preds <- NULL augment(binmod, newdata = moose_preds, type = \"response\", interval = \"prediction\") #> Simple feature collection with 100 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 100 × 6 #>     elev strat .fitted .lower .upper           geometry #>  * <dbl> <chr>   <dbl>  <dbl>  <dbl>        <POINT [m]> #>  1  143. L       0.705 0.248   0.946 (401239.6 1436192) #>  2  324. L       0.336 0.0373  0.868 (352640.6 1490695) #>  3  158. L       0.263 0.0321  0.792 (360954.9 1491590) #>  4  221. M       0.243 0.0360  0.734 (291839.8 1466091) #>  5  209. M       0.742 0.270   0.957 (310991.9 1441630) #>  6  218. L       0.191 0.0196  0.736 (304473.8 1512103) #>  7  127. L       0.179 0.0226  0.673 (339011.1 1459318) #>  8  122. L       0.241 0.0344  0.738 (342827.3 1463452) #>  9  191  L       0.386 0.0414  0.902 (284453.8 1502837) #> 10  105. L       0.494 0.114   0.882 (391343.9 1483791) #> # ℹ 90 more rows"},{"path":"/articles/introduction.html","id":"function-glossary","dir":"Articles","previous_headings":"","what":"Function Glossary","title":"An Introduction to spmodel","text":"list commonly used spmodel functions. AIC(): Compute AIC. AICc(): Compute AICc. anova(): Perform analysis variance. augment(): Augment data diagnostics new data predictions. coef(): Return coefficients. confint(): Compute confidence intervals. cooks.distance(): Compute Cook’s distance. covmatrix(): Return covariance matrices. deviance(): Compute deviance. esv(): Compute empirical semivariogram. fitted(): Compute fitted values. glance(): Glance fitted model. glances(): Glance multiple fitted models. hatvalues(): Compute leverage (hat) values. logLik(): Compute log-likelihood. loocv(): Perform leave-one-cross validation. model.matrix(): Return model matrix (\\(\\mathbf{X}\\)). plot(): Create fitted model plots. predict(): Compute predictions prediction intervals. pseudoR2(): Compute pseudo r-squared. residuals(): Compute residuals. spautor(): Fit spatial linear model areal data (.e., spatial autoregressive model). spautorRF(): Fit random forest spatial residual model areal data. spgautor(): Fit spatial generalized linear model areal data (.e., spatial generalized autoregressive model). splm(): Fit spatial linear model point-referenced data (.e., geostatistical model). splmRF(): Fit random forest spatial residual model point-referenced data. spglm(): Fit spatial generalized linear model point-referenced data (.e., generalized geostatistical model). sprbeta(): Simulate spatially correlated beta random variables. sprbinom(): Simulate spatially correlated binomial (Bernoulli) random variables. sprgamma(): Simulate spatially correlated gamma random variables. sprinvgauss(): Simulate spatially correlated inverse Gaussian random variables. sprnbinom(): Simulate spatially correlated negative binomial random variables. sprnorm(): Simulate spatially correlated normal (Gaussian) random variables. sprpois(): Simulate spatially correlated Poisson random variables. summary(): Summarize fitted models. tidy(): Tidy fitted models. varcomp(): Compare variance components. vcov(): Compute variance-covariance matrices estimated parameters. full list spmodel functions alongside documentation, see documentation manual. Documentation methods generic functions defined outside spmodel can found running help(\"generic.spmodel\", \"spmodel\") (e.g., help(\"summary.spmodel\", \"spmodel\"), help(\"predict.spmodel\", \"spmodel\"), etc.). Note ?generic.spmodel shorthand help(\"generic.spmodel\", \"spmodel\").","code":""},{"path":[]},{"path":"/articles/SPGLMs.html","id":"sec:introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Spatial Generalized Linear Models in spmodel","text":"spmodel package used fit, summarize, predict variety spatial statistical models. vignette provides introduction spatial generalized linear models non-Gaussian response distributions spmodel. proceeding, load spmodel running using spmodel formal publication report, please cite . Citing spmodel lets us devote resources package future. view spmodel citation running create visualizations using ggplot2 (Wickham 2016), load running ggplot2 installed alongside spmodel dependencies = TRUE install.packages(), check package installed loaded reproducing vignette’s visualizations. also show code can used create interactive visualizations spatial data mapview (Appelhans et al. 2022). mapview also many backgrounds available contextualize spatial data topographical information. running mapview code interactively, make sure mapview installed loaded. spmodel contains various methods generic functions defined outside spmodel. find relevant documentation methods, run help(\"generic.spmodel\", \"spmodel\") (e.g., help(\"summary.spmodel\", \"spmodel\"), help(\"predict.spmodel\", \"spmodel\"), etc.). Note ?generic.spmodel shorthand help(\"generic.spmodel\", \"spmodel\"). provide details examples regarding methods generics throughout vignette. full list spmodel functions available, see spmodel’s documentation manual.","code":"library(spmodel) citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical #>   modeling and prediction in R. PLOS ONE 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   } library(ggplot2)"},{"path":"/articles/SPGLMs.html","id":"a-review-of-the-spatial-linear-model","dir":"Articles","previous_headings":"","what":"A Review of the Spatial Linear Model","title":"Spatial Generalized Linear Models in spmodel","text":"first focus spatial linear models Gaussian response vector. spatial linear model defined \\[\\begin{equation}\\label{eq:splm} \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation}\\] sample size \\(n\\), \\(\\mathbf{y}\\) \\(n \\times 1\\) column vector response variables, \\(\\mathbf{X}\\) \\(n \\times p\\) design (model) matrix explanatory variables, \\(\\boldsymbol{\\beta}\\) \\(p \\times 1\\) column vector fixed effects controlling impact \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), \\(\\boldsymbol{\\tau}\\) \\(n \\times 1\\) column vector spatially dependent random errors, \\(\\boldsymbol{\\epsilon}\\) \\(n \\times 1\\) column vector spatially independent random errors. make assumptions \\(\\boldsymbol{\\tau}\\) \\(\\boldsymbol{\\epsilon}\\) spatial linear model: first, \\(\\text{E}(\\boldsymbol{\\tau}) = \\text{E}(\\boldsymbol{\\epsilon}) = \\boldsymbol{0}\\), \\(\\text{E}(\\cdot)\\) denotes expectation; second, \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_\\tau \\mathbf{R}\\), \\(\\mathbf{R}\\) \\(n \\times n\\) matrix determines spatial dependence structure \\(\\mathbf{y}\\) depends range parameter, \\(\\phi\\); third, \\(\\text{Cov}(\\boldsymbol{\\epsilon}) = \\sigma^2_\\epsilon \\mathbf{}\\), \\(\\mathbf{}\\) \\(n \\times n\\) identity matrix; fourth, \\(\\boldsymbol{\\tau}\\) \\(\\boldsymbol{\\epsilon}\\) independent one another. parameter \\(\\sigma^2_{\\tau}\\) called spatially dependent random error variance partial sill. parameter \\(\\sigma^2_\\epsilon\\) called spatially independent random error variance nugget. two variance parameters henceforth intuitively written \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\), respectively. covariance \\(\\mathbf{y}\\) denoted \\(\\boldsymbol{\\Sigma}\\) given \\[\\begin{equation}\\label{eq:spcov} \\boldsymbol{\\Sigma} = \\sigma^2_{de}\\mathbf{R} + \\sigma^2_{ie} \\mathbf{}. \\end{equation}\\] parameters \\(\\sigma^2_{de}\\), \\(\\phi\\), \\(\\sigma^2_{ie}\\) elements \\(\\boldsymbol{\\theta}\\), covariance parameter vector. spatial linear model applies point-referenced areal (.e., lattice; polygon) data. Spatial data point-referenced elements \\(\\mathbf{y}\\) observed point-locations indexed x-coordinates y-coordinates spatially continuous surface infinite number locations. example, consider sampling soil point-location field. Spatial linear models point-referenced data sometimes called geostatistical models. example \\(\\mathbf{R}\\) matrix point-referenced data spherical correlation matrix given \\[\\begin{equation}\\label{eq:spherical} \\mathbf{R} = \\left(1 - 1.5\\frac{\\mathbf{H}}{\\phi} + 0.5\\frac{\\mathbf{H}^3}{\\phi^3}\\right) \\odot \\mathcal{}(\\mathbf{H} \\leq \\phi), \\end{equation}\\] \\(\\mathbf{H}\\) matrix Euclidean distances among observations, \\(\\mathbf{H}^3\\) matrix cubed Euclidean distances, \\(\\odot\\) Hadmard (element-wise; direct) product, \\(\\mathcal{}(\\mathbf{H} \\leq \\phi)\\) indicator function equal one \\(ij\\)th element \\(\\mathbf{H}\\) less \\(\\phi\\) (range) zero otherwise. second example Matérn correlation matrix given \\[\\begin{equation}\\label{eq:matern} \\mathbf{R} = \\frac{2^{1 - \\nu}}{\\Gamma(\\nu)} \\left(2\\nu \\mathbf{H} / \\phi \\right)^{\\nu / 2} \\odot B_k(2\\nu \\mathbf{H}, \\nu), \\end{equation}\\] \\(\\nu\\) smoothness parameter, \\(\\odot\\) Hadmart (element-wise; direct) product, \\(B_k(\\cdot, \\nu)\\) Bessel-K function order \\(\\nu\\). Chiles Delfiner (2012) provide examples several spatial dependence structures. Spatial data areal observed part finite network polygons whose connections indexed neighborhood structure. example, polygons may represent counties state neighbors share least one boundary. example \\(\\mathbf{R}\\) matrix areal data simultaneous-autoregressive spatial correlation matrix given \\[\\begin{equation*}   \\mathbf{R} = [(\\mathbf{} - \\phi \\mathbf{W})(\\mathbf{} - \\phi \\mathbf{W})^\\top]^{-1}, \\end{equation*}\\] \\(\\mathbf{W}\\) weight matrix describes neighborhood structure among observations. Spatial linear models areal data sometimes called spatial autoregressive models. thorough reviews spatial linear model, see Cressie (1993), Banerjee, Carlin, Gelfand (2014), Schabenberger Gotway (2017).","code":""},{"path":"/articles/SPGLMs.html","id":"the-spatial-generalized-linear-model","dir":"Articles","previous_headings":"","what":"The Spatial Generalized Linear Model","title":"Spatial Generalized Linear Models in spmodel","text":"common implicitly assume \\(\\mathbf{y}\\) spatial linear model unconstrained Gaussian. restrictive assumption often inappropriate binary data, proportion data, count data, skewed data, common many practical applications. types data naturally described using generalized linear models (Nelder Wedderburn 1972; McCullagh Nelder 1989). Generalized linear models extension linear models “link” function distribution’s mean linear function \\(\\mathbf{X} \\boldsymbol{\\beta}\\) (explanatory variables fixed effects). can extend generalized linear models adding linear, latent (.e., unobserved) random effects \\(\\mathbf{X} \\boldsymbol{\\beta}\\). types models called generalized linear mixed models (Breslow Clayton 1993) often formulated using hierarchical construction (Lee Nelder 1996). thorough reviews generalized linear models generalized linear mixed models, see Bolker et al. (2009), Myers et al. (2012), Faraway (2016), Wood (2017). recent spmodel release (version 0.4.0) provided support spatial generalized linear models (.e., generalized linear mixed model spatial random effects). define spatial generalized linear model \\[\\begin{equation}\\label{eq:spglm} f(\\boldsymbol{\\mu}) \\equiv \\mathbf{w} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation}\\] \\(f(\\cdot)\\) link function, \\(\\boldsymbol{\\mu}\\) mean \\(\\mathbf{y}\\), remaining terms \\(\\mathbf{X}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\) represent quantities spatial linear models. , \\(\\text{E}(\\boldsymbol{\\tau}) = \\text{E}(\\boldsymbol{\\epsilon}) = \\boldsymbol{0}\\), \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_{de}\\mathbf{R}\\), \\(\\text{Cov}(\\boldsymbol{\\epsilon}) = \\sigma^2_{ie} \\mathbf{}\\), \\(\\boldsymbol{\\tau}\\) independent \\(\\boldsymbol{\\epsilon}\\), \\(\\boldsymbol{\\Sigma} = \\sigma^2_{de} \\mathbf{R} + \\sigma^2_{ie} \\mathbf{}\\). link function, \\(f(\\cdot)\\), “links” function \\(\\boldsymbol{\\mu}\\) linear term \\(\\mathbf{w}\\). Note linking \\(\\boldsymbol{\\mu}\\) \\(\\mathbf{w}\\) applies element-wise vector. link function \\(f(\\cdot)\\) corresponding inverse link function, \\(f^{-1}(\\cdot)\\), “links” function \\(\\mathbf{w}\\) \\(\\boldsymbol{\\mu}\\). Notice \\(\\mathbf{w}\\) unconstrained \\(\\boldsymbol{\\mu}\\) usually constrained way (e.g., positive) depends distribution assumed \\(\\mathbf{y}\\). Spatial linear generalized linear models rely components: explanatory variables, fixed effects, spatially dependent random errors, spatial independent random errors. components related response linearly (spatial linear models) non-linearly (spatial generalized linear models). response generally assumed follow Gaussian distribution (spatial linear models) one many non-Gaussian distributions (spatial generalized linear models). non-Gaussian distributions include binomial distribution binary responses, beta distribution proportion responses, Poisson negative binomial distributions count responses, gamma inverse Gaussian distributions skewed, positive continuous responses. spmodel implements marginal approach inference uses novel application Laplace approximation. marginal approach powerful flexible, accommodating wide range covariance structures. frequentist approach, means rely Bayesian sampling routines, common handling complex hierarchical structures. also formally maximizes likelihood, advantageous means likelihood-based statistics AIC (Akaike 1974; Hoeting et al. 2006) defined, contrast approaches specify first two moments distribution (e.g., quasi-likelihood fit via iteratively re-weighted least squares). Ver Hoef et al. (2023) provide methodology’s full details. spmodel accommodates binomial, beta, Poisson, negative binomial, gamma, inverse Gaussian distributions. binomial beta response distributions (specified ) use logit link, Poisson, negative binomial, gamma, inverse Gaussian distributions use log link – see following table. Spatial generalized linear model response distributions available spmodel alongside corresponding link functions data types.","code":""},{"path":"/articles/SPGLMs.html","id":"sec:model-fit","dir":"Articles","previous_headings":"The Spatial Generalized Linear Model","what":"Model fitting","title":"Spatial Generalized Linear Models in spmodel","text":"Spatial generalized linear models spmodel fit using (point-referenced data) (areal data). functions similar structure one another function base R. generally require following four arguments: , formula describes relationship response explanatory variables; , response distribution, can , , , , , ; , object (Pebesma 2018) whose rows index observations whose columns contain response variable, explanatory variables, spatial information; , one 19 spatial covariance types (e.g., spherical spatial covariance, Matérn spatial covariance, simultaneous-autoregressive spatial covariance etc.). binomial beta response distributions (specified ) use logit link, Poisson, negative binomial, gamma, inverse Gaussian distributions use log link. arguments either required specific situations default values specified. arguments functions summarized following table. Models several hundred observations can take anywhere seconds minutes fit, depending shape likelihood surface quickly covariance parameters converge. Models several thousand observations can utilize spmodel’s large data set options. Arguments spglm() spgautor(), purpose, whether argument applies spglm() spgautor() just one .","code":""},{"path":"/articles/SPGLMs.html","id":"sec:diagnostics","dir":"Articles","previous_headings":"The Spatial Generalized Linear Model","what":"Model evaluation and diagnostics","title":"Spatial Generalized Linear Models in spmodel","text":"fitting model, usually beneficial evaluate certain aspects model fit inspect visualize model diagnostics like residuals. many functions spmodel used purposes, main argument fitted model object returned . names functions meant illustrative, describing purpose function . functions evaluating model fit (see ) return likelihood-based statistics like AIC, AICc, deviance (McCullagh Nelder 1989), return coefficient estimates confidence intervals, perform cross validation, . Model evaluation functions available models fit using spglm() spgautor() purpose. functions inspecting model diagnostics (see ) return Cook’s distances (Cook 1979), fitted values, leverage (hat) values, residuals (several types), visualizations. Mode diagnostic functions available models fit using spglm() spgautor() purpose. functions , , , popularized broom R package (Robinson, Hayes, Couch 2021), particularly useful. function tidies parameter estimate output, returning special called (Müller Wickham 2021) much easier manipulate work parameter estimate output printed R console. function glances model fit, returning sample size, number estimated parameters, several model-fit statistics. extension glances multiple models simultaneously. function augments model fit, returning data used fit model well model diagnostics. function can also used augment prediction data, discuss next.","code":""},{"path":"/articles/SPGLMs.html","id":"sec:prediction","dir":"Articles","previous_headings":"The Spatial Generalized Linear Model","what":"Prediction","title":"Spatial Generalized Linear Models in spmodel","text":"Often priority spatial data analysis using fitted model make predictions unobserved locations quantify uncertainties predictions. function spmodel used predict mean process unobserved locations. similar structure objects fit using base R takes two main arguments: , fitted model object returned ; , object whose rows index locations requiring prediction whose columns contain explanatory variables spatial information locations. arguments either required specific situations default values specified. arguments function summarized following table. function can also used augment predictions, taking arguments . Arguments predict() purpose.","code":""},{"path":"/articles/SPGLMs.html","id":"sec:simulation","dir":"Articles","previous_headings":"The Spatial Generalized Linear Model","what":"Simulation","title":"Spatial Generalized Linear Models in spmodel","text":"spmodel functions used simulate spatial data Gaussian, binomial, beta, Poisson, negative binomial, gamma, inverse Gaussian response distributions. simulation functions similar structure commonly used base R functions simulating data. also similar name, simply adding prefix conventional name base R. example, used simulate Poisson data base R, used simulate spatial Poisson data spmodel. functions summarized following table. Functions simulate spatial data purpose.","code":""},{"path":"/articles/SPGLMs.html","id":"sec:application-binary","dir":"Articles","previous_headings":"","what":"An application to binary (presence/abscence) data","title":"Spatial Generalized Linear Models in spmodel","text":"next two sections show use spmodel analyze data collected moose Togiak region Alaska, USA. data spmodel contain information moose counts survey sites Togiak region. data stored sf object, special built store spatial data. several variables: ; stratification variable two levels ( low medium) based surrounding landscape metrics; , site elevation; , whether least one moose observed site; , number moose observed site; , spatial coordinates Alaska Albers projection (EPSG: 3338). load spmodel data running interested quantifying effects moose begin visualizations. First, visualize presence observed sites: Moose presence. spatial patterning distribution moose presence, moose tend present eastern southwestern parts domain. spatial pattern seems directional orientation, seemingly strongest northwest--southeast direction. Next, visualize elevation strata: Elevation versus strata moose data. obvious spatial patterns assignment sites strata, elevation highest boundaries domain lowest middle domain. spatial patterning distribution moose presence, moose tend present eastern southwestern parts domain. spatial pattern seems directional orientation, seemingly strongest northwest--southeast direction. quantify effects , , spatial dependence moose presence, fit three binomial (.e., ) logistic regression models using : three models fixed effect structure, using elevation, strata, interaction explain moose presence. three models vary covariance structure. first model, , spatial covariance (\\(\\sigma^2_{de} = 0\\)). second model, spherical spatial covariance. third model, , spherical spatial covariance incorporates geometric anisotropy. Geometric anisotropy allows spatial covariance vary direction evaluating spatial covariance \\(\\mathbf{H}^*\\) (instead \\(\\mathbf{H}\\)), matrix distances transformed coordinates rotated scaled appropriately (Schabenberger Gotway 2017). evaluate three models using AIC running spatial models (, ) much lower AIC non-spatial model (), suggests models benefit incorporating spatial dependence. lower AIC , suggests model benefits incorporating directionality spatial dependence. Next inspect later use predict moose presence probability unobserved sites. summarize using : output model similar output base-R model, returning original function call, deviance residuals, fixed effects coefficients table, pseudo R-squared (quantifies amount variability explained fixed effects), covariance parameter coefficients. fixed effects coefficients table provides evidence elevation strata associated moose presence effect elevation varies across two strata (\\(p~\\)values \\(<\\) 0.05). function returns graphics several model diagnostics. Running Spatial dependence function distance (left) anisotropic level curve equal correlation (right). shows spatial dependence evident appears strongest northwest--southeast direction. findings supported clear spatial patterns data. Recall , , functions particularly useful tools manipulating understanding fitted model objects. function tidies model output, returning parameter estimates (confidence intervals): default, fixed effects estimates returned, covariance parameter estimates returned via argument: column indicates whether covariance parameters assumed known, possible specify using argument . , parameters assumed unknown estimated. function glances model fit, returning model fit statistics: can used glance multiple models simultaneously sorts models ascending AICc: function augments data model diagnostics: fitted values (estimated \\(f^{-1}(\\mathbf{w})\\), moose presence probability), response residuals, values indicate leverage, values indicate Cook’s distance (.e., influence), standardized residuals. data contains survey sites sampled. can use make predictions underlying probabilities moose presence sites using . return predictions augments prediction data predictions: Estimated moose presence probability data (obtained via ) predicted moose presence probability data (obtained via ) overlain share similar patterns: Fitted values predictions moose presence probability.","code":"library(\"spmodel\") data(\"moose\") ggplot(moose, aes(color = presence)) +    geom_sf(size = 2) +    scale_color_viridis_d(option = \"H\") +   theme_gray(base_size = 14) ggplot(moose, aes(color = elev)) +   geom_sf(size = 1) +    facet_grid(~ strat) +   scale_color_viridis_c()  +   scale_y_continuous(breaks = seq(62.6, 63.6, length.out = 5)) +   scale_x_continuous(breaks = seq(-148.5, -146, length.out = 3)) +   theme_gray(base_size = 12) # model one bin_mod <- spglm(   formula = presence ~ elev + strat + elev:strat,   family = \"binomial\",   data = moose,   spcov_type = \"none\" ) # model two bin_spmod <- spglm(   formula = presence ~ elev + strat + elev:strat,   family = \"binomial\",   data = moose,   spcov_type = \"spherical\" ) # model three bin_spmod_anis <- spglm(   formula = presence ~ elev + strat + elev:strat,   family = \"binomial\",   data = moose,   spcov_type = \"spherical\",   anisotropy = TRUE ) AIC(bin_mod, bin_spmod, bin_spmod_anis) #>                df      AIC #> bin_mod         1 719.1628 #> bin_spmod       3 686.9031 #> bin_spmod_anis  5 677.9403 summary(bin_spmod_anis) #>  #> Call: #> spglm(formula = presence ~ elev + strat + elev:strat, family = \"binomial\",  #>     data = moose, spcov_type = \"spherical\", anisotropy = TRUE) #>  #> Deviance Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.7970 -0.7348  0.3291  0.6855  1.7384  #>  #> Coefficients (fixed): #>              Estimate Std. Error z value Pr(>|z|)    #> (Intercept) -3.112818   1.522362  -2.045  0.04088 *  #> elev         0.010990   0.004655   2.361  0.01824 *  #> stratM       3.820320   1.176127   3.248  0.00116 ** #> elev:stratM -0.014020   0.006933  -2.022  0.04316 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.1119 #>  #> Coefficients (spherical spatial covariance): #>        de        ie     range    rotate     scale  #> 6.580e+00 2.220e-03 1.791e+05 2.718e+00 2.154e-01  #> attr(,\"class\") #> [1] \"spherical\" #>  #> Coefficients (Dispersion for binomial family): #> dispersion  #>          1 plot(bin_spmod_anis, which = c(7, 8)) tidy(bin_spmod_anis, conf.int = TRUE) #> # A tibble: 4 × 7 #>   term        estimate std.error statistic p.value conf.low conf.high #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 (Intercept)  -3.11     1.52        -2.04 0.0409  -6.10    -0.129    #> 2 elev          0.0110   0.00466      2.36 0.0182   0.00187  0.0201   #> 3 elev:stratM  -0.0140   0.00693     -2.02 0.0432  -0.0276  -0.000431 #> 4 stratM        3.82     1.18         3.25 0.00116  1.52     6.13 tidy(bin_spmod_anis, effects = \"spcov\") #> # A tibble: 5 × 3 #>   term       estimate is_known #>   <chr>         <dbl> <lgl>    #> 1 de          6.58    FALSE    #> 2 ie          0.00222 FALSE    #> 3 range  179082.      FALSE    #> 4 rotate      2.72    FALSE    #> 5 scale       0.215   FALSE glance(bin_spmod_anis) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1   218     4     5  668.  678.  678.  -334.     161.            0.112 glances(bin_mod, bin_spmod, bin_spmod_anis) #> # A tibble: 3 × 10 #>   model         n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr>     <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 bin_spmo…   218     4     5  668.  678.  678.  -334.     161.           0.112  #> 2 bin_spmod   218     4     3  681.  687.  687.  -340.     161.           0.0885 #> 3 bin_mod     218     4     1  717.  719.  719.  -359.     294.           0.0283 aug_mod <- augment(bin_spmod_anis) aug_mod #> Simple feature collection with 218 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269085 ymin: 1416151 xmax: 419057.4 ymax: 1541016 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 218 × 9 #>    presence  elev strat .fitted .resid    .hat   .cooksd .std.resid #>  * <fct>    <dbl> <chr>   <dbl>  <dbl>   <dbl>     <dbl>      <dbl> #>  1 0         469. L      0.130  -0.527 0.0923  0.00777       -0.553 #>  2 0         362. L      0.0272 -0.235 0.00973 0.000137      -0.236 #>  3 0         173. M      0.0297 -0.246 0.00136 0.0000205     -0.246 #>  4 0         280. L      0.0120 -0.155 0.00187 0.0000113     -0.155 #>  5 0         620. L      0.276  -0.804 0.360   0.142         -1.01  #>  6 0         164. M      0.0669 -0.372 0.00286 0.0000996     -0.373 #>  7 0         164. M      0.0960 -0.449 0.00397 0.000202      -0.450 #>  8 0         186. L      0.0754 -0.396 0.00486 0.000192      -0.397 #>  9 0         362. L      0.0610 -0.355 0.0211  0.000692      -0.359 #> 10 0         430. L      0.165  -0.600 0.0871  0.00941       -0.628 #> # ℹ 208 more rows #> # ℹ 1 more variable: geometry <POINT [m]> data(\"moose_preds\")  spmod_anis_preds <- predict(   bin_spmod_anis,   newdata = moose_preds,   type = \"response\",   interval = \"prediction\" ) head(spmod_anis_preds) #>          fit         lwr       upr #> 1 0.53625613 0.150268897 0.8831963 #> 2 0.45236331 0.106721924 0.8509940 #> 3 0.09535359 0.010375867 0.5144805 #> 4 0.10772261 0.022873507 0.3837176 #> 5 0.83772891 0.466479245 0.9682358 #> 6 0.03276524 0.003867679 0.2281264 aug_pred <- augment(   bin_spmod_anis,   newdata = moose_preds,   type = \"response\",    interval = \"prediction\" ) aug_pred #> Simple feature collection with 100 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 269386.2 ymin: 1418453 xmax: 419976.2 ymax: 1541763 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 100 × 6 #>     elev strat .fitted  .lower .upper           geometry #>  * <dbl> <chr>   <dbl>   <dbl>  <dbl>        <POINT [m]> #>  1  143. L      0.536  0.150    0.883 (401239.6 1436192) #>  2  324. L      0.452  0.107    0.851 (352640.6 1490695) #>  3  158. L      0.0954 0.0104   0.514 (360954.9 1491590) #>  4  221. M      0.108  0.0229   0.384 (291839.8 1466091) #>  5  209. M      0.838  0.466    0.968 (310991.9 1441630) #>  6  218. L      0.0328 0.00387  0.228 (304473.8 1512103) #>  7  127. L      0.0381 0.00511  0.234 (339011.1 1459318) #>  8  122. L      0.0747 0.00983  0.396 (342827.3 1463452) #>  9  191  L      0.375  0.0410   0.893 (284453.8 1502837) #> 10  105. L      0.142  0.0197   0.577 (391343.9 1483791) #> # ℹ 90 more rows aug_mod$type <- \"mod\" aug_pred$type <- \"pred\" keep_cols <- c(\".fitted\", \"type\") aug_combined <- rbind(aug_mod[, keep_cols], aug_pred[, keep_cols]) ggplot(aug_combined, aes(color = .fitted, shape = type)) +   geom_sf(size = 2) +   scale_color_viridis_c(option = \"H\")  +   theme_gray(base_size = 14)"},{"path":"/articles/SPGLMs.html","id":"sec:application-count","dir":"Articles","previous_headings":"","what":"An application to count data","title":"Spatial Generalized Linear Models in spmodel","text":"data also contain number moose observed site: Moose counts. moose counts similarly distributed moose presence, highest eastern southwestern parts domain. compare two count models, Poisson negative binomial. Poisson model assumes underlying process generating counts mean variance negative binomial model allows overdispersion (.e., variance greater mean). interested quantifying effects moose count, albeit using slightly different approach moose presence. , model elevation fixed effect allow effect change strata, model strata random effect highlight additional flexibility spmodel package. fit relevant Poisson negative binomial models Matérn spatial covariance using : Random effects specified spmodel via argument using similar syntax commonly used lme4 (Bates et al. 2015) nlme (Pinheiro Bates 2006) R packages non-spatial mixed models. spmodel, short-hand . Random effects alter covariance structure model, building additional correlation model sites sharing level random effect (, sites within strata). formally, incorporating random effect, spatial generalized linear model becomes \\[\\begin{equation}\\label{eq:spglm-rand} f(\\boldsymbol{\\mu}) \\equiv \\mathbf{w} = \\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z}\\mathbf{v} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation}\\] \\(\\mathbf{Z}\\) design matrix indexes random effects, \\(\\mathbf{v}\\), \\(\\text{Cov}(\\mathbf{v}) = \\sigma^2_{v}\\mathbf{}\\). covariance matrix, \\(\\boldsymbol{\\Sigma}\\), becomes \\(\\sigma^2_v \\mathbf{Z} \\mathbf{Z}^\\top + \\sigma^2_{de}\\mathbf{R} + \\sigma^2_{ie}\\mathbf{}\\). Previously compared models using , another way compare models leave-one-cross validation (Hastie et al. 2009). leave-one-cross validation, observation held-model re-fit used predict held-observation. loss statistic computed compares prediction true value. calculate mean-squared-prediction error (MSPE) using leave-one-cross validation Poisson negative binomial model running negative binomial model lower MSPE, suggests incorporating overdispersion improves model fit . Tidying fitted model see evidence elevation related moose counts effect changes across strata (\\(p~\\)values \\(< 0.1\\)): function spmodel apportions model variability fixed random components: model variability explained spatially dependent random error () random effect strata (). Running Model diagnostics. shows observations high influence leverage standardized residuals tend spread around zero. Estimated mean moose counts data (obtained via ) predicted mean moose counts data (obtained via ) share similiar patterns overlain running Fitted values predictions moose counts.","code":"ggplot(moose, aes(color = count)) +   geom_sf(size = 2) +   scale_color_viridis_c(option = \"H\")  +   theme_gray(base_size = 14) count_mod_pois <- spglm(   count ~ elev + elev:strat,   family = \"poisson\",   data = moose,   spcov_type = \"matern\",   random = ~ (1 | strat) )  count_mod_nb <- spglm(   count ~ elev + elev:strat,   family = \"nbinomial\",   data = moose,   spcov_type = \"matern\",   random = ~ (1 | strat) ) loocv(count_mod_pois) #> # A tibble: 1 × 3 #>    bias  MSPE RMSPE #>   <dbl> <dbl> <dbl> #> 1  1.37  32.0  5.66 loocv(count_mod_nb) #> # A tibble: 1 × 3 #>    bias  MSPE RMSPE #>   <dbl> <dbl> <dbl> #> 1 0.291  27.1  5.20 tidy(count_mod_nb) #> # A tibble: 3 × 5 #>   term        estimate std.error statistic p.value #>   <chr>          <dbl>     <dbl>     <dbl>   <dbl> #> 1 (Intercept) -0.301     1.50       -0.200  0.841  #> 2 elev         0.00590   0.00300     1.96   0.0494 #> 3 elev:stratM -0.00717   0.00408    -1.76   0.0789 varcomp(count_mod_nb) #> # A tibble: 4 × 2 #>   varcomp            proportion #>   <chr>                   <dbl> #> 1 Covariates (PR-sq)    0.0329  #> 2 de                    0.498   #> 3 ie                    0.00174 #> 4 1 | strat             0.467 plot(count_mod_nb, which = c(4, 5)) aug_mod <- augment(count_mod_nb) aug_pred <- augment(count_mod_nb, newdata = moose_preds, type = \"response\") aug_mod$type <- \"mod\" aug_pred$type <- \"pred\" keep_cols <- c(\".fitted\", \"type\") aug_combined <- rbind(aug_mod[, keep_cols], aug_pred[, keep_cols]) ggplot(aug_combined, aes(color = .fitted, shape = type)) +   geom_sf(size = 2) +   scale_color_viridis_c(option = \"H\")  +   theme_gray(base_size = 18)"},{"path":"/articles/SPGLMs.html","id":"sec:discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"Spatial Generalized Linear Models in spmodel","text":"Throughout vignette, shown several features spmodel offers, including novel application Laplace approximation, similarity base R’s function, dozen spatial covariance functions, variety tools available evaluate models, inspect model diagnostics, make predictions using ubiquitous base R functions (e.g., , , ) . Spatial generalized linear models point-referenced data (.e., generalized geostatistical models) fit using function. Spatial generalized linear models areal data (.e., generalized spatial autoregressive models) fit using function. functions share common structure syntax. Spatial data simulated spmodel adding prefix commonly used base R simulation functions (e.g., ). appreciate feedback users regarding spmodel. learn provide feedback contribute spmodel, please visit GitHub repository https://github.com/USEPA/spmodel.","code":""},{"path":[]},{"path":"/articles/technical.html","id":"sec:introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Technical Details","text":"vignette covers technical details regarding functions perform computations spmodel. first provide notation guide describe relevant details function. use spmodel formal publication report, please cite . Citing spmodel lets us devote resources future. view spmodel citation, run","code":"citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical #>   modeling and prediction in R. PLOS ONE 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   }"},{"path":"/articles/technical.html","id":"sec:notation","dir":"Articles","previous_headings":"","what":"Notation Guide","title":"Technical Details","text":"hat indicates parameters estimated (.e., \\(\\hat{\\boldsymbol{\\beta}}\\)) evaluated relevant estimated parameter vector (e.g., \\(\\hat{\\boldsymbol{\\Sigma}}\\) evaluated \\(\\hat{\\boldsymbol{\\theta}}\\)). \\(\\ell(\\boldsymbol{\\hat{\\Theta}})\\) written, means log-likelihood evaluated maximum, \\(\\boldsymbol{\\hat{\\Theta}}\\). covariance matrix \\(\\mathbf{}\\) \\(\\boldsymbol{\\Sigma}\\), say \\(\\mathbf{}^*\\) “whitens” \\(\\mathbf{}\\) \\[\\begin{equation*} \\text{Cov}(\\mathbf{}^*) = \\text{Cov}(\\boldsymbol{\\Sigma}^{-1/2}\\mathbf{}) = \\boldsymbol{\\Sigma}^{-1/2}\\text{Cov}(\\mathbf{})\\boldsymbol{\\Sigma}^{-1/2} = \\boldsymbol{\\Sigma}^{-1/2}\\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma}^{-1/2} = (\\boldsymbol{\\Sigma}^{-1/2}\\boldsymbol{\\Sigma}^{1/2})(\\boldsymbol{\\Sigma}^{1/2}\\boldsymbol{\\Sigma}^{-1/2}) = \\mathbf{}. \\end{equation*}\\] Later discuss obtain \\(\\boldsymbol{\\Sigma}^{1/2}\\). Additional notation used predict() section: \\[\\begin{equation*}   \\begin{split}    \\mathbf{y}_o & = \\text{Observed response vector} \\\\    \\mathbf{y}_u & = \\text{Unobserved response vector} \\\\    \\mathbf{X}_o & = \\text{Design matrix known explanatory variables observed response variable locations} \\\\    \\mathbf{X}_u & = \\text{Design matrix known explanatory variables unobserved response variable locations} \\\\    \\boldsymbol{\\Sigma}_o & = \\text{Covariance matrix $\\mathbf{y}_o$ evaluated } \\boldsymbol{\\theta} \\\\    \\boldsymbol{\\Sigma}_u & = \\text{Covariance matrix $\\mathbf{y}_u$ evaluated } \\boldsymbol{\\theta} \\\\    \\boldsymbol{\\Sigma}_{uo} & = \\text{matrix covariances $\\mathbf{y}_u$ $\\mathbf{y}_o$ evaluated } \\boldsymbol{\\theta} \\\\    \\mathbf{w}_o & = \\text{Latent $\\mathbf{w}$ observation $\\mathbf{y}_o$} \\\\    \\mathbf{w}_u & = \\text{Latent $\\mathbf{w}$ observation $\\mathbf{y}_o$} \\\\    \\mathbf{G}_o & = \\text{Hessian $\\mathbf{w}_o$} \\\\   \\end{split} \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:splms","dir":"Articles","previous_headings":"","what":"Spatial Linear Models","title":"Technical Details","text":"Statistical linear models often parameterized \\[\\begin{equation}\\label{eq:lm} \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}, \\end{equation}\\] sample size \\(n\\), \\(\\mathbf{y}\\) \\(n \\times 1\\) column vector response variables, \\(\\mathbf{X}\\) \\(n \\times p\\) design (model) matrix explanatory variables, \\(\\boldsymbol{\\beta}\\) \\(p \\times 1\\) column vector fixed effects controlling impact \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), \\(\\boldsymbol{\\epsilon}\\) \\(n \\times 1\\) column vector random errors. typically assume \\(\\text{E}(\\boldsymbol{\\epsilon}) = \\mathbf{0}\\) \\(\\text{Cov}(\\boldsymbol{\\epsilon}) = \\sigma^2_\\epsilon \\mathbf{}\\), \\(\\text{E}(\\cdot)\\) denotes expectation, \\(\\text{Cov}(\\cdot)\\) denotes covariance, \\(\\sigma^2_\\epsilon\\) denotes variance parameter, \\(\\mathbf{}\\) denotes identity matrix. model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\\) assumes elements \\(\\mathbf{y}\\) uncorrelated. Typically spatial data, elements \\(\\mathbf{y}\\) correlated, observations close together space tend similar observations far apart (Tobler 1970). Failing properly accommodate spatial dependence \\(\\mathbf{y}\\) can cause researchers draw incorrect conclusions data. accommodate spatial dependence \\(\\mathbf{y}\\), \\(n \\times 1\\) spatial random effect, \\(\\boldsymbol{\\tau}\\), added linear model, yielding model \\[\\begin{equation}\\label{eq:splm} \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation}\\] \\(\\boldsymbol{\\tau}\\) independent \\(\\boldsymbol{\\epsilon}\\), \\(\\text{E}(\\boldsymbol{\\tau}) = \\mathbf{0}\\), \\(\\text{Cov}(\\boldsymbol{\\tau}) = \\sigma^2_\\tau \\mathbf{R}\\), \\(\\mathbf{R}\\) matrix determines spatial dependence structure \\(\\mathbf{y}\\) depends range parameter, \\(\\phi\\). discuss \\(\\mathbf{R}\\) detail shortly. parameter \\(\\sigma^2_\\tau\\) called spatially dependent random error variance partial sill. parameter \\(\\sigma^2_\\epsilon\\) called spatially independent random error variance nugget. two variance parameters henceforth intuitively written \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\), respectively. covariance \\(\\mathbf{y}\\) denoted \\(\\boldsymbol{\\Sigma}\\) given \\(\\sigma^2_{de} \\mathbf{R} + \\sigma^2_{ie} \\mathbf{}\\). parameters compose covariance contained vector \\(\\boldsymbol{\\theta}\\), called covariance parameter vector. model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\) called spatial linear model. spatial linear model applies point-referenced areal (.e., lattice) data. Spatial data point-referenced elements \\(\\mathbf{y}\\) observed point-locations indexed x-coordinates y-coordinates spatially continuous surface infinite number locations. splm() function used fit spatial linear models point-referenced data (sometimes called geostatistical models). One spatial covariance function available splm() exponential spatial covariance function, \\(\\mathbf{R}\\) matrix given \\[\\begin{equation*}   \\mathbf{R} = \\exp(-\\mathbf{M} / \\phi), \\end{equation*}\\] \\(\\mathbf{M}\\) matrix Euclidean distances among observations. Recall \\(\\phi\\) range parameter, controlling behavior covariance function function distance. Parameterizations splm() spatial covariance types \\(\\mathbf{R}\\) matrices can seen running help(\"splm\", \"spmodel\") vignette(\"technical\", \"spmodel\"). spatial covariance types (e.g., Matérn) depend extra parameter beyond \\(\\sigma^2_{de}\\), \\(\\sigma^2_{ie}\\), \\(\\phi\\). Spatial data areal elements \\(\\mathbf{y}\\) observed part finite network polygons whose connections indexed neighborhood structure. example, polygons may represent counties state neighbors share least one boundary. Areal data often equivalently called lattice data (Cressie 1993). spautor() function used fit spatial linear models areal data (sometimes called spatial autoregressive models). One spatial autoregressive covariance function available spautor() simultaneous autoregressive spatial covariance function, \\(\\mathbf{R}\\) matrix given \\[\\begin{equation*}   \\mathbf{R} = [(\\mathbf{} - \\phi \\mathbf{W})(\\mathbf{} - \\phi \\mathbf{W})^\\top]^{-1}, \\end{equation*}\\] \\(\\mathbf{W}\\) weight matrix describing neighborhood structure \\(\\mathbf{y}\\). Parameterizations spautor() spatial covariance types \\(\\mathbf{R}\\) matrices can seen running help(\"spautor\", \"spmodel\") vignette(\"technical\", \"spmodel\"). One way define \\(\\mathbf{W}\\) queen contiguity (Anselin, Syabri, Kho 2010). Two observations queen contiguous share boundary. \\(ij\\)th element \\(\\mathbf{W}\\) one observation \\(\\) observation \\(j\\) queen contiguous zero otherwise. Observations considered neighbors , diagonal element \\(\\mathbf{W}\\) zero. Sometimes element weight matrix \\(\\mathbf{W}\\) divided respective row sum. called row-standardization. Row-standardizing \\(\\mathbf{W}\\) several benefits, discussed detail Ver Hoef et al. (2018).","code":""},{"path":"/articles/technical.html","id":"sec:aic-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"AIC() and AICc()","title":"Technical Details","text":"AIC() AICc() functions spmodel defined restricted maximum likelihood maximum likelihood estimation, maximize likelihood. AIC AICc defined Hoeting et al. (2006) given \\[\\begin{equation*}\\label{eq:sp_aic}   \\begin{split}     \\text{AIC} & = -2\\ell(\\hat{\\boldsymbol{\\Theta}}) + 2(|\\hat{\\boldsymbol{\\Theta}}|) \\\\     \\text{AICc} & = -2\\ell(\\hat{\\boldsymbol{\\Theta}}) + 2n(|\\hat{\\boldsymbol{\\Theta}}|) / (n - |\\hat{\\boldsymbol{\\Theta}}| - 1),   \\end{split} \\end{equation*}\\] \\(|\\hat{\\boldsymbol{\\Theta}}|\\) cardinality \\(\\hat{\\boldsymbol{\\Theta}}\\). restricted maximum likelihood, \\(\\hat{\\boldsymbol{\\Theta}} \\equiv \\{\\hat{\\boldsymbol{\\theta}}\\}\\). maximum likelihood, \\(\\hat{\\boldsymbol{\\Theta}} \\equiv \\{\\hat{\\boldsymbol{\\theta}}, \\hat{\\boldsymbol{\\beta}}\\}\\) discrepancy arises restricted maximum likelihood integrates fixed effects likelihood, likelihood depend \\(\\boldsymbol{\\beta}\\). AIC comparisons model fit using restricted maximum likelihood model fit using maximum likelihood meaningless, models fit different likelihoods. AIC comparisons models fit using restricted maximum likelihood valid models fixed effect structure. contrast, AIC comparisons models fit using maximum likelihood valid models different fixed effect structures.","code":""},{"path":"/articles/technical.html","id":"sec:anova-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"anova()","title":"Technical Details","text":"Test statistics formed using general linear hypothesis test. Let \\(\\mathbf{L}\\) \\(l \\times p\\) contrast matrix \\(l_0\\) \\(l \\times 1\\) vector. null hypothesis \\(\\mathbf{L} \\boldsymbol{\\hat{\\beta}} = l_0\\) alternative hypothesis \\(\\mathbf{L} \\boldsymbol{\\hat{\\beta}} \\neq l_0\\). Usually, \\(l_0\\) zero vector (spmodel, assumed). test statistic denoted \\(Chi2\\) given \\[\\begin{equation*}\\label{eq:glht}   Chi2 = [(\\mathbf{L} \\boldsymbol{\\hat{\\beta}} - l_0)^\\top(\\mathbf{L} (\\mathbf{X}^\\top \\mathbf{\\hat{\\Sigma}} \\mathbf{X})^{-1} \\mathbf{L}^\\top)^{-1}(\\mathbf{L} \\boldsymbol{\\hat{\\beta}} - l_0)] \\end{equation*}\\] default, \\(\\mathbf{L}\\) chosen variable data used fit model tested marginally (.e., controlling variables) \\(l_0 = \\mathbf{0}\\). default desired, arguments can used pass user-defined \\(\\mathbf{L}\\) matrices . must constructed way \\(l_0 = \\mathbf{0}\\). notoriously difficult determine appropriate p-values linear mixed models based general linear hypothesis test. lme4, example, report p-values default. reasons obtaining p-values challenging: first (often important) challenge estimating \\(\\boldsymbol{\\theta}\\) using finite sample, usually clear null distribution \\(Chi2\\) . certain cases ordinary least squares regression experimental designs (e.g., blocked design, split plot design, etc.), \\(Chi2 / rank(\\mathbf{L})\\) F-distributed known numerator denominator degrees freedom. outside well-studied cases, general results exist. second challenge standard error \\(Chi2\\) account uncertainty \\(\\boldsymbol{\\hat{\\theta}}\\). approaches addressing problem, see Kackar Harville (1984), Prasad Rao (1990), Harville Jeske (1992), Kenward Roger (1997). third challenge determining denominator degrees freedom. , cases, known – true general. approaches addressing problem, see Satterthwaite (1946), Schluchter Elashoff (1990), Hrong-Tai Fai Cornelius (1996), Kenward Roger (1997), Littell et al. (2006), Pinheiro Bates (2006), Kenward Roger (2009). reasons, spmodel uses asymptotic (.e., large sample) Chi-squared test calculating p-values using anova(). approach addresses three points assuming large enough sample size: \\(Chi2\\) asymptotically Chi-squared (certain conditions) \\(rank(\\mathbf{L})\\) degrees freedom null hypothesis true. uncertainty estimating \\(\\boldsymbol{\\hat{\\theta}}\\) small enough safely ignored. approximation asymptotic, degree freedom adjustments can ignored (also worth noting F distribution infinite denominator degrees freedom Chi-squared distribution scaled \\(rank(\\mathbf{L})\\). asymptotic approximation implies p-values likely unreliable small samples. Note comparing full reduced models, general linear hypothesis test analogous extra sum (whitened) squares approach (Myers et al. 2012). second approach determining p-values likelihood ratio test. Let \\(\\ell(\\boldsymbol{\\hat{\\Theta}})\\) log-likelihood full model \\(\\ell(\\boldsymbol{\\hat{\\Theta}}_0)\\) log-likelihood reduced model. likelihood ratio test valid, reduced model must nested full model, means \\(\\ell(\\boldsymbol{\\hat{\\Theta}}_0)\\) obtained fixing parameters \\(\\boldsymbol{\\Theta}\\). likelihood ratio test valid, \\(X^2 = 2\\ell(\\boldsymbol{\\hat{\\Theta}}) - 2\\ell(\\boldsymbol{\\hat{\\Theta}}_0)\\) asymptotically Chi-squared degrees freedom equal difference estimated parameters full reduced models. restricted maximum likelihood estimation, likelihood ratio tests can used compare nested models explanatory variables. use likelihood ratio tests comparing different explanatory variable structures, parameters must estimated using maximum likelihood estimation. using likelihood ratio tests assess importance parameters boundary parameter space (e.g., variance parameter zero), p-values tend large (Self Liang 1987; Stram Lee 1994; Goldman Whelan 2000; Pinheiro Bates 2006).","code":""},{"path":"/articles/technical.html","id":"sec:coef-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"coef()","title":"Technical Details","text":"coef() returns relevant coefficients based type argument. type = \"fixed\" (default), coef() returns \\[\\begin{equation*} \\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{y} . \\end{equation*}\\] estimation method restricted maximum likelihood maximum likelihood, \\(\\hat{\\boldsymbol{\\beta}}\\) known restricted maximum likelihood maximum likelihood estimator \\(\\boldsymbol{\\beta}\\). estimation method semivariogram weighted least squares semivariogram composite likelihood, \\(\\hat{\\boldsymbol{\\beta}}\\) known empirical generalized least squares estimator \\(\\boldsymbol{\\beta}\\). type = \"spcov\", estimated spatial covariance parameters returned (available estimation methods). type = \"randcov\", estimated random effect variance parameters returned (available restricted maximum likelihood maximum likelihood estimation).","code":""},{"path":"/articles/technical.html","id":"sec:confint-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"confint()","title":"Technical Details","text":"confint() returns confidence intervals estimated parameters. Currently, confint() returns confidence intervals \\(\\boldsymbol{\\beta}\\). \\((1 - \\alpha)\\)% confidence interval \\(\\beta_i\\) \\[\\begin{equation*} \\hat{\\beta}_i \\pm z^* \\sqrt{(\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}_{, }}, \\end{equation*}\\] \\((\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}_{, }\\) \\(\\)th diagonal element \\((\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\), \\(\\Phi(z^*) = 1 - \\alpha / 2\\), \\(\\Phi(\\cdot)\\) standard normal (Gaussian) cumulative distribution function, \\(\\alpha = 1 -\\) level, level argument confint(). default level 0.95, corresponds \\(z^*\\) approximately 1.96.","code":""},{"path":"/articles/technical.html","id":"sec:cooks-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"cooks.distance()","title":"Technical Details","text":"Cook’s distance measures influence observation (Cook 1979; Cook Weisberg 1982). influential observation large impact model fit. vector Cook’s distances spatial linear model given \\[\\begin{equation} \\label{eq:cooksd} \\frac{\\mathbf{e}_p^2}{p} \\odot diag(\\mathbf{H}_s) \\odot \\frac{1}{1 - diag(\\mathbf{H}_s)}, \\end{equation}\\] \\(\\mathbf{e}_p\\) Pearson residuals \\(diag(\\mathbf{H}_s)\\) diagonal spatial hat matrix, \\(\\mathbf{H}_s \\equiv \\mathbf{X}^* (\\mathbf{X}^{* \\top} \\mathbf{X}^*)^{-1} \\mathbf{X}^{* \\top}\\) (Montgomery, Peck, Vining 2021), \\(\\odot\\) denotes Hadmard (element-wise) product. larger Cook’s distance, larger influence. better understand previous form, recall non-spatial linear model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\\) assumes elements \\(\\boldsymbol{\\epsilon}\\) independent identically distributed (iid) constant variance. context vector non-spatial Cook’s distances given \\[\\begin{equation*} \\frac{\\mathbf{e}_p^2}{p} \\odot diag(\\mathbf{H}) \\odot \\frac{1}{1 - diag(\\mathbf{H})}, \\end{equation*}\\] \\(diag(\\mathbf{H})\\) diagonal non-spatial hat matrix, \\(\\mathbf{H} \\equiv \\mathbf{X} (\\mathbf{X}^{\\top} \\mathbf{X})^{-1} \\mathbf{X}^{\\top}\\). elements \\(\\boldsymbol{\\epsilon}\\) iid constant variance , spatial Cook’s distance calculated using \\(\\mathbf{H}\\). First linear model must whitened according \\(\\mathbf{y}^* = \\mathbf{X}^* \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}^*\\), \\(\\boldsymbol{\\epsilon}^*\\) whitened version sum random errors model. spatial Cook’s distance follows using \\(\\mathbf{X}^*\\), whitened version \\(\\mathbf{X}\\).","code":""},{"path":"/articles/technical.html","id":"sec:deviance-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"deviance()","title":"Technical Details","text":"deviance fitted model \\[\\begin{equation*} \\mathcal{D}_{\\boldsymbol{\\Theta}} = 2\\ell(\\boldsymbol{\\Theta}_s) - 2\\ell(\\boldsymbol{\\hat{\\Theta}}), \\end{equation*}\\] \\(\\ell(\\boldsymbol{\\Theta}_s)\\) log-likelihood “saturated” model fits every observation perfectly. normal (Gaussian) random errors, \\[\\begin{equation*} \\mathcal{D}_{\\boldsymbol{\\Theta}} = (\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} (\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}}) \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:fitted-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"fitted()","title":"Technical Details","text":"Fitted values can obtained response, spatial random errors, random effects. fitted values response (type = \"response\"), denoted \\(\\mathbf{\\hat{y}}\\), given \\[\\begin{equation*}\\label{eq:fit_resp}   \\mathbf{\\hat{y}} = \\mathbf{X} \\boldsymbol{\\hat{\\beta}} . \\end{equation*}\\] estimated mean response given set explanatory variables observation. Fitted values spatial random errors (type = \"spcov\") random effects (type = \"randcov\") linked best linear unbiased predictors linear mixed model theory. Consider standard random effects parameterization \\[\\begin{equation*}   \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z} \\mathbf{u} + \\boldsymbol{\\epsilon}, \\end{equation*}\\] \\(\\mathbf{Z}\\) denotes random effects design matrix, \\(\\mathbf{u}\\) denotes random effects, \\(\\boldsymbol{\\epsilon}\\) denotes independent random error. Henderson (1975) states best linear unbiased predictor (BLUP) single random effect vector \\(\\mathbf{u}\\), denoted \\(\\mathbf{\\hat{u}}\\), given \\[\\begin{equation}\\label{eq:blup_mm}   \\mathbf{\\hat{u}} = \\sigma^2_u \\mathbf{Z}^\\top \\mathbf{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}), \\end{equation}\\] \\(\\sigma^2_u\\) variance \\(\\mathbf{u}\\). Searle, Casella, McCulloch (2009) generalize idea showing random vector \\(\\boldsymbol{\\alpha}\\) linear model, best linear unbiased predictor (based response, \\(\\mathbf{y}\\)) \\(\\boldsymbol{\\alpha}\\), denoted \\(\\boldsymbol{\\hat{\\alpha}}\\), given \\[\\begin{equation}\\label{eq:blup_gen}   \\boldsymbol{\\hat{\\alpha}} = \\text{E}(\\boldsymbol{\\alpha}) + \\boldsymbol{\\Sigma}_\\alpha \\boldsymbol{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}), \\end{equation}\\] \\(\\boldsymbol{\\Sigma}_\\alpha = \\text{Cov}(\\boldsymbol{\\alpha}, \\mathbf{y})\\). Evaluating equation plug-(empirical) estimates covariance parameters yields empirical best linear unbiased predictor (EBLUP) \\(\\boldsymbol{\\alpha}\\). Recall spatial linear model random effects \\[\\begin{equation*}   \\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z} \\mathbf{u} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation*}\\] Building previous results, can find BLUPs random term spatial linear model (\\(\\mathbf{u}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\)). example, BLUP \\(\\mathbf{u}\\) found noting \\(\\text{E}(\\mathbf{u}) = \\mathbf{0}\\) \\[\\begin{equation*}   \\mathbf{\\Sigma}_u = \\text{Cov}(\\mathbf{u}, \\mathbf{y}) = \\text{Cov}(\\mathbf{u}, \\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z} \\mathbf{u} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}) = \\text{Cov}(\\mathbf{u}, \\mathbf{Z}\\mathbf{u}) = \\text{Cov}(\\mathbf{u}, \\mathbf{u})\\mathbf{Z}^\\top = \\sigma^2_u \\mathbf{Z}^\\top, \\end{equation*}\\] result follows random terms \\(\\mathbf{y}\\) independent \\(\\text{Cov}(\\mathbf{u}, \\mathbf{u}) = \\sigma^2_u \\mathbf{}\\). follows \\[\\begin{equation*}   \\hat{\\mathbf{u}} = \\text{E}(\\mathbf{u}) + \\boldsymbol{\\Sigma}_u \\boldsymbol{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}) = \\sigma^2_u \\mathbf{Z}^\\top \\boldsymbol{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}), \\end{equation*}\\] matches previous form BLUP. Similarly, BLUP \\(\\boldsymbol{\\tau}\\) found noting \\(\\text{E}(\\boldsymbol{\\tau}) = \\mathbf{0}\\) \\[\\begin{equation*}   \\mathbf{\\Sigma}_{de} = \\text{Cov}(\\boldsymbol{\\tau}, \\mathbf{y}) = \\text{Cov}(\\boldsymbol{\\tau}, \\mathbf{X} \\boldsymbol{\\beta} + \\mathbf{Z} \\mathbf{u} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}) = \\text{Cov}(\\boldsymbol{\\tau}, \\boldsymbol{\\tau}) = \\sigma^2_{de} \\mathbf{R}, \\end{equation*}\\] result follows random terms \\(\\mathbf{y}\\) independent \\(\\text{Cov}(\\boldsymbol{\\tau}, \\boldsymbol{\\tau}) = \\sigma^2_{de} \\mathbf{R}\\), \\(\\sigma^2_{de}\\) variance \\(\\boldsymbol{\\tau}\\). follows \\[\\begin{equation}\\label{eq:blup_sp}   \\hat{\\boldsymbol{\\tau}} = \\text{E}(\\boldsymbol{\\tau}) + \\boldsymbol{\\Sigma}_{de} \\boldsymbol{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}) = \\sigma^2_{de} \\mathbf{R} \\boldsymbol{\\Sigma}^{-1}(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\hat{\\beta}}). \\end{equation}\\] Fitted values \\(\\boldsymbol{\\epsilon}\\) obtained using similar arguments. Evaluating equations plug-(empirical) estimates covariance parameters yields EBLUPs. partition factors used, covariance matrix random effects (spatial non-spatial) can viewed interaction non-partitioned covariance matrix partition matrix, \\(\\mathbf{P}\\). \\(ij\\)th entry \\(\\mathbf{P}\\) equals one observation \\(\\) observation \\(j\\) share level partition factor zero otherwise. spatial random effects, adjustment straightforward, column \\(\\boldsymbol{\\Sigma}_{de}\\) corresponds distinct spatial random effect. Thus partition factors, \\(\\boldsymbol{\\Sigma}_{de}^* = \\boldsymbol{\\Sigma}_{de} \\odot \\mathbf{P} = \\sigma^2_{de} \\mathbf{R} \\odot \\mathbf{P}\\), \\(\\odot\\) denotes Hadmart (element-wise) product, used instead \\(\\boldsymbol{\\Sigma}_{de}\\). Note \\(\\boldsymbol{\\Sigma}_{ie}\\) unchanged proportional identity matrix. non-spatial random effects, however, situation complicated. Applying BLUP formula directly yields BLUPs random effects corresponding interaction random effect levels partition levels. Thus logical approach average non-zero BLUPs random effect level across partition levels, yielding prediction random effect level. imply, however, estimates BLUPs random effect. big data without partition factors, local indexes act partition factors. , BLUPs correspond random effects interacted local index. big data partition factors, adjusted partition factor created interaction local index partition factor. adjusted partition factor applied yield \\(\\hat{\\boldsymbol{\\alpha}}\\).","code":""},{"path":"/articles/technical.html","id":"sec:hatvalues-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"hatvalues()","title":"Technical Details","text":"Hat values measure leverage observation. observation high leverage combination explanatory variables atypical (far mean explanatory vector). spatial leverage (hat) matrix given \\[\\begin{equation} \\label{eq:leverage} \\mathbf{H}_s = \\mathbf{X}^* (\\mathbf{X}^{* \\top} \\mathbf{X}^*)^{-1} \\mathbf{X}^{* \\top}. \\end{equation}\\] diagonal matrix yields leverage (hat) values observation (Montgomery, Peck, Vining 2021). larger hat value, larger leverage. better understand previous form, recall non-spatial linear model \\(\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\\) assumes elements \\(\\boldsymbol{\\epsilon}\\) independent identically distributed (iid) constant variance. context, leverage (hat) matrix given \\[\\begin{equation*} \\mathbf{H} \\equiv \\mathbf{X} (\\mathbf{X}^{\\top} \\mathbf{X})^{-1} \\mathbf{X}^{\\top}, \\end{equation*}\\] elements \\(\\boldsymbol{\\epsilon}\\) iid constant variance , spatial leverage (hat) matrix \\(\\mathbf{H}\\). First linear model must whitened according \\(\\mathbf{y}^* = \\mathbf{X}^* \\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}^*\\), \\(\\boldsymbol{\\epsilon}^*\\) whitened version sum random errors model. spatial leverage (hat) matrix follows using \\(\\mathbf{X}^*\\), whitened version \\(\\mathbf{X}\\).","code":""},{"path":"/articles/technical.html","id":"sec:loglik-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"logLik()","title":"Technical Details","text":"log-likelihood given \\(\\ell(\\boldsymbol{\\hat{\\Theta}})\\).","code":""},{"path":"/articles/technical.html","id":"sec:loocv-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"loocv()","title":"Technical Details","text":"\\(k\\)-fold cross validation useful tool evaluating model fits using “hold-” data. data split \\(k\\) sets. One--one, one \\(k\\) sets held , model fit remaining \\(k - 1\\) sets, predictions observation hold-set compared true values. closer predictions true observations, better model fit. special case \\(k = n\\) known leave-one-cross validation (loocv), observation left one--one. Computationally efficient solutions exist leave-one-cross validation non-spatial linear model (iid, constant variance errors). Outside case, however, fitting \\(n\\) separate models can computationally infeasible. loocv() makes compromise balances approximation true solution computational feasibility. First \\(\\boldsymbol{\\theta}\\) estimated using data. \\(n\\) model fits, loocv() re-estimate \\(\\boldsymbol{\\theta}\\) re-estimate \\(\\boldsymbol{\\beta}\\). approach relies assumption covariance parameter estimates obtained using \\(n - 1\\) observations approximately covariance parameter estimates obtained using \\(n\\) observations. large enough sample size, reasonable assumption. First define \\(\\boldsymbol{\\Sigma}_{-, -}\\) \\(\\boldsymbol{\\Sigma}\\) \\(\\)th row column deleted, \\(\\boldsymbol{\\Sigma}_{, -}\\) \\(\\)th row \\(\\boldsymbol{\\Sigma}\\) \\(\\)th column deleted, \\(\\boldsymbol{\\Sigma}_{, }\\) \\(\\)th diagonal element \\(\\boldsymbol{\\Sigma}\\), \\(\\mathbf{X}_{-}\\) \\(\\mathbf{X}\\) \\(\\)th row deleted, \\(\\mathbf{X}_{}\\) \\(\\)th row \\(\\mathbf{X}\\), \\(y_{-}\\) \\(\\mathbf{y}\\) \\(\\)th element deleted, \\(\\mathbf{y}_i\\) \\(\\)th element \\(\\mathbf{y}\\). Wolf (1978) shows given \\(\\boldsymbol{\\Sigma}^{-1}\\), computationally efficient form \\(\\boldsymbol{\\Sigma}^{-1}_{-}\\) exists. First observe \\(\\boldsymbol{\\Sigma}^{-1}\\) can represented blockwise \\[\\begin{equation*} \\boldsymbol{\\Sigma}^{-1} = \\begin{bmatrix}   \\tilde{\\boldsymbol{\\Sigma}}_{-, -} & \\tilde{\\boldsymbol{\\Sigma}}_{,-}^\\top \\\\   \\tilde{\\boldsymbol{\\Sigma}}_{,-} & \\tilde{\\boldsymbol{\\Sigma}}_{, } \\end{bmatrix}, \\end{equation*}\\] dimensions \\(\\tilde{\\boldsymbol{\\Sigma}}\\) match respective dimensions relevant blocks \\(\\boldsymbol{\\Sigma}\\). follows \\[\\begin{equation*} \\boldsymbol{\\Sigma}^{-1}_{-, -} = \\tilde{\\boldsymbol{\\Sigma}}_{-, -} - \\tilde{\\boldsymbol{\\Sigma}}_{,-}^\\top \\tilde{\\boldsymbol{\\Sigma}}_{, }^{-1}\\tilde{\\boldsymbol{\\Sigma}}_{,-} \\end{equation*}\\] \\[\\begin{equation*}   \\boldsymbol{\\beta}_{-} = (\\mathbf{X}^\\top_{-} \\boldsymbol{\\Sigma}^{-1}_{-, -} \\mathbf{X}_{-})^{-1} \\mathbf{X}^\\top_{-} \\boldsymbol{\\Sigma}^{-1}_{-, -} \\mathbf{y}_{-}, \\end{equation*}\\] \\(\\boldsymbol{\\beta}_i\\) estimate \\(\\boldsymbol{\\beta}\\) constructed without \\(\\)th observation. loocv prediction \\(y_i\\) given \\[\\begin{equation*}   \\hat{y}_i = \\mathbf{X}_i \\hat{\\boldsymbol{\\beta}}_{-} + \\hat{\\boldsymbol{\\Sigma}}_{, -}\\hat{\\boldsymbol{\\Sigma}}_{-, -}(\\mathbf{y}_i - \\mathbf{X}_{-} \\hat{\\boldsymbol{\\beta}}_{-}) \\end{equation*}\\] prediction variance loocv prediction \\(y_i\\) given \\[\\begin{equation*}   \\dot{\\sigma}^2_i = \\hat{\\boldsymbol{\\Sigma}}_{, } - \\hat{\\boldsymbol{\\Sigma}}_{, - } \\hat{\\boldsymbol{\\Sigma}}^{-1}_{-, -} \\hat{\\boldsymbol{\\Sigma}}_{, - }^\\top + \\mathbf{Q}_i(\\mathbf{X}_{-}^\\top \\hat{\\boldsymbol{\\Sigma}}_{-, -}^{-1} \\mathbf{X}_{-})^{-1}\\mathbf{Q}_i^\\top , \\end{equation*}\\] \\(\\mathbf{Q}_i = \\mathbf{X}_i - \\hat{\\boldsymbol{\\Sigma}}_{, -} \\hat{\\boldsymbol{\\Sigma}}^{-1}_{-, -} \\mathbf{X}_{-}\\). formulas analogous formulas used obtain linear unbiased predictions unobserved data prediction variances. Model fits evaluated using several statistics: bias, mean-squared-prediction error (MSPE), root-mean-squared-prediction error (RMSPE), squared correlation (cor2) observed data leave-one-predictions (regarded prediction version r-squared appropriate comparing across spatial nonspatial models). Bias formally defined \\[\\begin{equation*} bias = \\frac{1}{n}\\sum_{= 1}^n(y_i - \\hat{y}_i). \\end{equation*}\\] MSPE formally defined \\[\\begin{equation*} MSPE = \\frac{1}{n}\\sum_{= 1}^n(y_i - \\hat{y}_i)^2. \\end{equation*}\\] RMSPE formally defined \\[\\begin{equation*} RMSPE = \\sqrt{\\frac{1}{n}\\sum_{= 1}^n(y_i - \\hat{y}_i)^2}. \\end{equation*}\\] cor2 formally defined \\[\\begin{equation*} cor2 = \\text{Cor}(\\mathbf{y}, \\hat{\\mathbf{y}})^2, \\end{equation*}\\] Cor\\((\\cdot)\\) correlation function. cor2 returned spatial linear models, applicable spatial generalized linear models (predicting latent mean parameter, unknown scale original data). Generally, bias near zero well-fitting models. lower MSPE RMSPE, better model fit. higher cor2, better model fit.","code":""},{"path":"/articles/technical.html","id":"sec:bigdata-loocv-lm","dir":"Articles","previous_headings":"Spatial Linear Models > loocv()","what":"Big Data","title":"Technical Details","text":"Options big data leave-one-cross validation rely local argument, passed predict(). local list predict() explained detail predict() section, provide short summary local interacts loocv() . splm() spautor() objects, local method can \"\". local method \"\", data used leave-one-cross validation (.e., implemented exactly previously described). Parallelization implemented setting parallel = TRUE local, number cores use parallelization specified via ncores. splm() objects, additional options local method \"covariance\" \"distance\". local method \"covariance\", number observations (specified via size argument) highest covariance held-observation used local neighborhood prediction approach. local method \"distance\", number observations (specified via size argument) closest held-observation used local neighborhood prediction approach. random effects used, partition factor used, spatial covariance function monotone decreasing, \"covariance\" \"distance\" equivalent. local neighborhood approach uses observations local neighborhood held-observation perform prediction, thus approximation true solution. computational efficiency derives using \\(\\boldsymbol{\\Sigma}_{l, l}\\) (covariance matrix observations local neighborhood) instead \\(\\boldsymbol{\\Sigma}\\) (covariance matrix observations). Parallelization implemented setting parallel = TRUE local, number cores use parallelization specified via ncores.","code":""},{"path":[]},{"path":"/articles/technical.html","id":"sec:predict-none-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"interval = \"none\"","title":"Technical Details","text":"empirical best linear unbiased predictions (.e., empirical Kriging predictor) \\(\\mathbf{y}_u\\) given \\[\\begin{equation}\\label{eq:blup}   \\mathbf{\\dot{y}}_u =  \\mathbf{X}_u \\hat{\\boldsymbol{\\beta}} + \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_{o} (\\mathbf{y}_o - \\mathbf{X}_o \\hat{\\boldsymbol{\\beta}}) . \\end{equation}\\] equation sometimes called empirical universal Kriging predictor, Kriging external drift predictor, regression Kriging predictor. covariance matrix \\(\\mathbf{\\dot{y}}_u\\) \\[\\begin{equation}\\label{eq:blup_cov}   \\dot{\\boldsymbol{\\Sigma}}_u = \\hat{\\boldsymbol{\\Sigma}}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\hat{\\boldsymbol{\\Sigma}}^\\top_{uo} + \\mathbf{Q}(\\mathbf{X}_o^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1}\\mathbf{Q}^\\top , \\end{equation}\\] \\(\\mathbf{Q} = \\mathbf{X}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\mathbf{X}_o\\). se.fit = TRUE, standard errors returned taking square root diagonal \\(\\dot{\\boldsymbol{\\Sigma}}_u\\).","code":""},{"path":"/articles/technical.html","id":"sec:predict-predict-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"interval = \"prediction\"","title":"Technical Details","text":"empirical best linear unbiased predictions returned \\(\\mathbf{\\dot{y}}_u\\). (100 \\(\\times\\) level)% prediction interval \\((y_u)_i\\) \\((\\dot{y}_u)_i \\pm z^* \\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\), \\(\\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\) standard error \\((\\dot{y}_u)_i\\) obtained se.fit = TRUE, \\(\\Phi(z^*) = 1 - \\alpha / 2\\), \\(\\Phi(\\cdot)\\) standard normal (Gaussian) cumulative distribution function, \\(\\alpha = 1 -\\) level, level argument predict(). default level 0.95, corresponds \\(z^*\\) approximately 1.96.","code":""},{"path":"/articles/technical.html","id":"sec:predict-conf-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"interval = \"confidence\"","title":"Technical Details","text":"best linear unbiased estimates \\(\\text{E}[(y_u)_i]\\) (\\(\\text{E}(\\cdot)\\) denotes expectation) returned evaluating \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}}\\), \\((\\mathbf{X}_u)_i\\) \\(\\)th row \\(\\mathbf{X}_u\\) (.e., fitted values corresponding \\((\\mathbf{X}_u)_i\\) returned). (100 \\(\\times\\) level)% confidence interval \\(\\text{E}[(y_u)_i]\\) \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}} \\pm z^* \\sqrt{(\\mathbf{X}_u)_i (\\mathbf{X}^\\top_o \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1} (\\mathbf{X}_u)_i^\\top}\\) \\(\\sqrt{(\\mathbf{X}_u)_i (\\mathbf{X}^\\top_o \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1} (\\mathbf{X}_u)_i^\\top}\\) standard error \\((\\dot{y}_u)_i\\) obtained se.fit = TRUE, \\(\\Phi(z^*) = 1 - \\alpha / 2\\), \\(\\Phi(\\cdot)\\) standard normal (Gaussian) cumulative distribution function, \\(\\alpha = 1 -\\) level, level argument predict(). default level 0.95, corresponds \\(z^*\\) approximately 1.96.","code":""},{"path":"/articles/technical.html","id":"sec:predict-spautor-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"spautor() extra steps","title":"Technical Details","text":"spatial autoregressive models, extra step required obtain \\(\\hat{\\boldsymbol{\\Sigma}}^{-1}_o\\), \\(\\hat{\\boldsymbol{\\Sigma}}_u\\), \\(\\hat{\\boldsymbol{\\Sigma}}_{uo}\\) depend one another neighborhood structure \\(\\mathbf{y}_o\\) \\(\\mathbf{y}_u\\). Recall autoregressive models, \\(\\boldsymbol{\\Sigma}^{-1}\\) straightforward obtain, \\(\\boldsymbol{\\Sigma}\\). Let \\(\\boldsymbol{\\Sigma}^{-1}\\) inverse covariance matrix observed unobserved data, \\(\\mathbf{y}_o\\) \\(\\mathbf{y}_u\\). One approach obtain \\(\\boldsymbol{\\Sigma}_o\\) \\(\\boldsymbol{\\Sigma}_{uo}\\) directly invert \\(\\boldsymbol{\\Sigma}^{-1}\\) subset \\(\\boldsymbol{\\Sigma}\\) appropriately. inversion can prohibitive \\(n_o + n_u\\) large. faster way obtain \\(\\boldsymbol{\\Sigma}_o\\) \\(\\boldsymbol{\\Sigma}_{uo}\\) exists. Represent \\(\\boldsymbol{\\Sigma}^{-1}\\) blockwise \\[\\begin{equation*}\\label{eq:auto_hw}   \\boldsymbol{\\Sigma}^{-1} =   \\begin{bmatrix}     \\tilde{\\boldsymbol{\\Sigma}}_{o} & \\tilde{\\boldsymbol{\\Sigma}}^{\\top}_{uo} \\\\     \\tilde{\\boldsymbol{\\Sigma}}_{uo} & \\tilde{\\boldsymbol{\\Sigma}}_{u}   \\end{bmatrix}, \\end{equation*}\\] dimensions blocks match relevant dimensions \\(\\boldsymbol{\\Sigma}\\). terms required prediction can obtained block representation. Wolf (1978) shows \\[\\begin{equation*}\\label{eq:hw_forms}   \\begin{split}     \\boldsymbol{\\Sigma}^{-1}_o & = \\tilde{\\boldsymbol{\\Sigma}}_{o} - \\tilde{\\boldsymbol{\\Sigma}}^{ \\top}_{uo} (\\tilde{\\boldsymbol{\\Sigma}}_{u})^{-1} \\tilde{\\boldsymbol{\\Sigma}}_{uo} \\\\     \\boldsymbol{\\Sigma}_u & = (\\tilde{\\boldsymbol{\\Sigma}}_{u} - \\tilde{\\boldsymbol{\\Sigma}}_{uo} (\\tilde{\\boldsymbol{\\Sigma}}_{o})^{-1} \\tilde{\\boldsymbol{\\Sigma}}^\\top_{uo})^{-1} \\\\     \\boldsymbol{\\Sigma}_{uo} & = - \\boldsymbol{\\Sigma}_u \\tilde{\\boldsymbol{\\Sigma}}_{uo} \\tilde{\\boldsymbol{\\Sigma}}^{-1}_{o}   \\end{split} \\end{equation*}\\] Evaluating expressions \\(\\hat{\\boldsymbol{\\theta}}\\) yields \\(\\hat{\\boldsymbol{\\Sigma}}^{-1}_o\\), \\(\\hat{\\boldsymbol{\\Sigma}}_u\\), \\(\\hat{\\boldsymbol{\\Sigma}}_{uo}\\). similar result exists log determinant \\(\\boldsymbol{\\Sigma}_o\\), required prediction required restricted maximum likelihood maximum likelihood estimation.","code":""},{"path":"/articles/technical.html","id":"sec:predict-bigdata-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"Big Data","title":"Technical Details","text":"number observations fitted model (observed data) large many locations predict , often necessary implement computationally efficient big data approximations. Big data approximations implemented spmodel using local argument predict(). local method \"\", fitted model data used make predictions. context, computational efficiency gained parallelizing prediction. available local method spautor() fitted models \"\". neighborhood structure spautor() fitted models permit subsetting used \"covariance\" \"distance\" methods discuss next. local method \"covariance\", \\(\\hat{\\boldsymbol{\\Sigma}}_{uo}\\) computed observation predicted (\\(\\mathbf{y}_u\\)) rest observed data. vector ordered number observations (specified via size argument) highest covariance \\(\\mathbf{y}_u\\) subset, yielding \\(\\check{\\boldsymbol{\\Sigma}}_{uo}\\), dimension \\(1 \\times size\\). similarly \\(\\hat{\\boldsymbol{\\Sigma}}_o\\), \\(\\mathbf{y}_o\\), \\(\\mathbf{X}_u\\) also subset size observations, yielding \\(\\check{\\boldsymbol{\\Sigma}}_{o}\\), \\(\\check{\\mathbf{y}}_o\\), \\(\\check{\\mathbf{X}}_u\\), respectively. previous prediction equations can evaluated \\(\\check{\\boldsymbol{\\Sigma}}_{uo}\\), \\(\\check{\\boldsymbol{\\Sigma}}_{o}\\), \\(\\check{\\mathbf{y}}_o\\), \\(\\check{\\mathbf{X}}_u\\) (except quantity \\((\\mathbf{X}_o^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1}\\), evaluated using observed data) yield predictions standard errors. local method \"distance\", similar approach used except number observations (specified via size argument) closest (terms Euclidean distance) \\(\\mathbf{y}_u\\) subset instead. random effects used, partition factors used, spatial covariance function monotone decreasing, \"covariance\" \"distance\" equivalent. approach subsetting observed data set locations closest covariance proximity \\(\\mathbf{y}_u\\) known local neighborhood approach. long size relatively small (default 100), local neighborhood approach computationally efficient, mainly \\(\\check{\\boldsymbol{\\Sigma}}_{o}^{-1}\\) easy compute. Additional computational efficiency gained parallelizing prediction.","code":""},{"path":"/articles/technical.html","id":"sec:rf_pred-lm","dir":"Articles","previous_headings":"Spatial Linear Models > predict()","what":"splmRF() and spautorRF()","title":"Technical Details","text":"Random forest spatial residual model predictions obtained combining random forest predictions spatial linear model predictions (.e., Kriging) random forest residuals. Formally, random forest spatial residual model predictions \\(\\mathbf{y}_u\\) given \\[\\begin{equation*}   \\mathbf{\\dot{y}}_u = \\mathbf{\\dot{y}}_{u, rf} + \\mathbf{\\dot{e}}_{u, slm}, \\end{equation*}\\] \\(\\mathbf{\\dot{y}}_{u, rf}\\) random forest predictions \\(\\mathbf{y}_u\\) \\(\\mathbf{\\dot{e}}_{u, slm}\\) spatial linear model predictions random forest residuals \\(\\mathbf{y}_u\\). process obtaining predictions sometimes analogously called random forest regression Kriging (Fox, Ver Hoef, Olsen 2020). Uncertainty quantification random forest context studied (Meinshausen Ridgeway 2006) currently available spmodel. Big data accommodated supplying local argument predict().","code":""},{"path":"/articles/technical.html","id":"sec:pr2-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"pseudoR2()","title":"Technical Details","text":"pseudo R-squared generalization classical R-squared non-spatial linear models. Like classical R-squared, pseudo R-squared measures proportion variability response explained fixed effects fitted model. Unlike classical R-squared, pseudo R-squared can applied models whose errors satisfy iid constant variance assumption. pseudo R-squared given \\[\\begin{equation*} PR2 = 1 - \\frac{\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}})}{\\mathcal{D}(\\boldsymbol{\\hat{\\Theta}}_0)}. \\end{equation*}\\] normal (Gaussian) random errors, pseudo R-squared \\[\\begin{equation*} PR2 = 1 - \\frac{(\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}(\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})}{(\\mathbf{y} - \\hat{\\mu})^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}(\\mathbf{y} - \\hat{\\mu})}, \\end{equation*}\\] \\(\\hat{\\mu} = (\\boldsymbol{1}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\boldsymbol{1})^{-1} \\boldsymbol{1}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{y}\\). non-spatial model, pseudo R-squared reduces classical R-squared, \\[\\begin{equation*} PR2 = 1 - \\frac{(\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}(\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})}{(\\mathbf{y} - \\hat{\\mu})^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}(\\mathbf{y} - \\hat{\\mu})}  = 1 - \\frac{(\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})^\\top (\\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})}{(\\mathbf{y} - \\hat{\\mu})^\\top (\\mathbf{y} - \\hat{\\mu})} = 1 - \\frac{\\text{SSE}}{\\text{SST}} = R2, \\end{equation*}\\] SSE denotes error sum squares SST denotes total sum squares. result follows non-spatial model, \\(\\boldsymbol{\\Sigma}\\) proportional identity matrix. adjusted pseudo r-squared adjusts additional explanatory variables given \\[\\begin{equation*}   PR2adj = 1 - (1 - PR2)\\frac{n - 1}{n - p}. \\end{equation*}\\] fitted model intercept, \\(n - 1\\) term instead \\(n\\).","code":""},{"path":"/articles/technical.html","id":"sec:residuals-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"residuals()","title":"Technical Details","text":"Terminology regarding residual names often conflicting confusing. , explicitly define residual options use spmodel. definitions may different others seen literature. type = \"response\", response residuals returned: \\[\\begin{equation*} \\mathbf{e}_{r} = \\mathbf{y} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}}. \\end{equation*}\\] type = \"pearson\", Pearson residuals returned: \\[\\begin{equation*} \\mathbf{e}_{p} = \\hat{\\boldsymbol{\\Sigma}}^{-1/2}\\mathbf{e}_{r}, \\end{equation*}\\] errors normal (Gaussian), Pearson residuals approximately normally distributed mean zero variance one. result follows \\(\\hat{\\boldsymbol{\\Sigma}}^{-1/2} \\approx \\boldsymbol{\\Sigma}^{-1/2}\\) \\[\\begin{equation*}   \\text{E}(\\boldsymbol{\\Sigma}^{-1/2} \\mathbf{e}_{r}) = \\boldsymbol{\\Sigma}^{-1/2} \\text{E}(\\mathbf{e}_{r}) = \\boldsymbol{\\Sigma}^{-1/2} \\boldsymbol{0} = \\boldsymbol{0} \\end{equation*}\\] \\[\\begin{equation*}   \\begin{split}   \\text{Cov}(\\boldsymbol{\\Sigma}^{-1/2} \\mathbf{e}_{r}) & = \\boldsymbol{\\Sigma}^{-1/2} \\text{Cov}(\\mathbf{e}_{r}) \\boldsymbol{\\Sigma}^{-1/2} \\\\   & \\approx \\boldsymbol{\\Sigma}^{-1/2} \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma}^{-1/2} \\\\   & = (\\boldsymbol{\\Sigma}^{-1/2} \\boldsymbol{\\Sigma}^{1/2})(\\boldsymbol{\\Sigma}^{1/2} \\boldsymbol{\\Sigma}^{-1/2}) \\\\   & = \\mathbf{}   \\end{split} \\end{equation*}\\] type = \"standardized\", standardized residuals returned: \\[\\begin{equation*} \\mathbf{e}_{s} = \\mathbf{e}_{p} \\odot \\frac{1}{\\sqrt{1 - diag(\\mathbf{H}^*)}}, \\end{equation*}\\] \\(diag(\\mathbf{H}^*)\\) diagonal spatial hat matrix, \\(\\mathbf{H}_s \\equiv \\mathbf{X}^* (\\mathbf{X}^{* \\top} \\mathbf{X}^*)^{-1} \\mathbf{X}^{* \\top}\\), \\(\\odot\\) denotes Hadmard (element-wise) product. residual transformation “standardizes” Pearson residuals. , standardized residuals also mean zero variance \\[\\begin{equation*}   \\begin{split}   \\text{Cov}(\\mathbf{e}_{s}) & = \\text{Cov}((\\mathbf{} - \\mathbf{H}^*) \\hat{\\boldsymbol{\\Sigma}}^{-1/2}\\mathbf{y}) \\\\   & \\approx \\text{Cov}((\\mathbf{} - \\mathbf{H}^*) \\boldsymbol{\\Sigma}^{-1/2}\\mathbf{y}) \\\\   & = (\\mathbf{} - \\mathbf{H}^*) \\boldsymbol{\\Sigma}^{-1/2} \\text{Cov}(\\mathbf{y}) \\boldsymbol{\\Sigma}^{-1/2}(\\mathbf{} - \\mathbf{H}^*)^\\top \\\\   & = (\\mathbf{} - \\mathbf{H}^*) \\boldsymbol{\\Sigma}^{-1/2} \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma}^{-1/2}(\\mathbf{} - \\mathbf{H}^*)^\\top \\\\   & = (\\mathbf{} - \\mathbf{H}^*) \\mathbf{} (\\mathbf{} - \\mathbf{H}^*)^\\top \\\\   & = (\\mathbf{} - \\mathbf{H}^*),   \\end{split} \\end{equation*}\\] \\((\\mathbf{} - \\mathbf{H}^*)\\) symmetric idempotent. Note average value \\(diag(\\mathbf{H}^*)\\) \\(p / n\\), \\((\\mathbf{} - \\mathbf{H}^*) \\approx \\mathbf{}\\) large sample sizes.","code":""},{"path":"/articles/technical.html","id":"sec:spmod","dir":"Articles","previous_headings":"Spatial Linear Models","what":"spautor() and splm()","title":"Technical Details","text":"Next discuss technical details spautor() splm() functions. Many details two functions , though occasional differences noted following subsection headers. Specifically, spautor() splm() different data types use different covariance functions. spautor() spatial linear models areal data (.e., spatial autoregressive models) splm() spatial linear models point-referenced data (.e., geostatistical models). also features splm() spautor() : semivariogram-based estimation, random effects, anisotropy, big data approximations.","code":""},{"path":"/articles/technical.html","id":"sec:spautor-fn","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"spautor() Spatial Covariance Functions","title":"Technical Details","text":"areal data, covariance matrix depends specification neighborhood structure among observations. Observations least one neighbor (including ) called “connected” observations. Observations neighbors called “unconnected” observations. autoregressive spatial covariance matrix can defined \\[\\begin{equation*}   \\boldsymbol{\\Sigma} =   \\begin{bmatrix}     \\sigma^2_{de} \\mathbf{R} & \\mathbf{0} \\\\     \\mathbf{0} & \\sigma^2_{\\xi} \\mathbf{}   \\end{bmatrix}   + \\sigma^2_{ie} \\mathbf{}, \\end{equation*}\\] \\(\\sigma^2_{de}\\) \\((\\geq 0)\\) spatially dependent (correlated) variance connected observations, \\(\\mathbf{R}\\) matrix describes spatial dependence connected observations, \\(\\sigma^2_{\\xi}\\) \\((\\geq 0)\\) independent (correlated) variance unconnected observations, \\(\\sigma^2_{ie}\\) \\((\\geq 0)\\) independent (correlated) variance observations. seen, connected unconnected observations allowed different variances. total variance connected observations \\(\\sigma^2_{de} + \\sigma^2_{ie}\\) total variance unconnected observations \\(\\sigma^2_{\\xi} + \\sigma^2_{ie}\\). spmodel accommodates two spatial covariances: conditional autoregressive (CAR) simultaneous autoregressive (SAR), \\(\\mathbf{R}\\) forms provided following table. forms R spatial covariance type available spautor() CAR SAR covariance functions, \\(\\mathbf{R}\\) depends similar quantities: \\(\\mathbf{}\\), identity matrix; \\(\\phi\\), range parameter, \\(\\mathbf{W}\\), matrix defines neighborhood structure. Often \\(\\mathbf{W}\\) symmetric need . Valid values \\(\\phi\\) \\((1 / \\lambda_{min}, 1 / \\lambda_{max})\\), \\(\\lambda_{min}\\) minimum eigenvalue \\(\\mathbf{W}\\) \\(\\lambda_{max}\\) maximum eigenvalue \\(\\mathbf{W}\\) (Ver Hoef et al. 2018). SAR covariance functions, \\(\\lambda_{min}\\) must negative \\(\\lambda_{max}\\) must positive. CAR covariances functions, matrix \\(\\mathbf{M}\\) matrix must provided satisfies CAR symmetry condition, enforces symmetry covariance matrix. CAR symmetry condition states \\[\\begin{equation*}   \\frac{\\mathbf{W}_{ij}}{\\mathbf{M}_{ii}} = \\frac{\\mathbf{W}_{ji}}{\\mathbf{M}_{jj}} \\end{equation*}\\] \\(\\) \\(j\\), \\(\\) \\(j\\) index rows columns. \\(\\mathbf{W}\\) symmetric, \\(\\mathbf{M}\\) often taken identity matrix. default spmodel row-standardize \\(\\mathbf{W}\\) dividing element respective row sum, decreases variance. row-standardization used CAR model, default spmodel \\(\\mathbf{M}\\) identity matrix.","code":""},{"path":"/articles/technical.html","id":"sec:splm-fn","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"splm() Spatial Covariance Functions","title":"Technical Details","text":"point-referenced data, spatial covariance given \\[\\begin{equation*} \\sigma^2_{de}\\mathbf{R} + \\sigma^2_{ie} \\mathbf{}, \\end{equation*}\\] \\(\\sigma^2_{de}\\) \\((\\geq 0)\\) spatially dependent (correlated) variance, \\(\\mathbf{R}\\) spatial correlation matrix, \\(\\sigma^2_{ie}\\) \\((\\geq 0)\\) spatially independent (correlated) variance, \\(\\mathbf{}\\) identity matrix. \\(\\mathbf{R}\\) matrix always depends range parameter, \\(\\phi\\) \\((> 0)\\), controls behavior covariance function distance. covariance functions, \\(\\mathbf{R}\\) matrix depends additional parameter call “extra” parameter. following table shows parametric form \\(\\mathbf{R}\\) matrices available splm(). range parameter denoted \\(\\phi\\), distance denoted \\(h\\), distance divided range parameter (\\(h / \\phi\\)) denoted \\(\\eta\\), \\(\\mathcal{}\\{\\cdot\\}\\) indicator function equal one argument occurs zero otherwise, extra parameter denoted \\(\\xi\\) (relevant). forms R spatial covariance type available splm(). spatial covariance functions valid two dimensions except triangular cosine functions, valid one dimension.","code":""},{"path":[]},{"path":"/articles/technical.html","id":"sec:estimation-lik-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm() > Model-fitting","what":"Likelihood-based Estimation (estmethod = \"reml\" or estmethod = \"ml\")","title":"Technical Details","text":"Minus twice profiled (\\(\\boldsymbol{\\beta}\\)) Gaussian log-likelihood given \\[\\begin{equation}\\label{eq:ml-lik}   -2\\ell_p(\\boldsymbol{\\theta}) = \\ln{|\\boldsymbol{\\Sigma}|} + (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})^\\top \\boldsymbol{\\Sigma}^{-1} (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}}) + n \\ln{2\\pi}, \\end{equation}\\] \\(\\tilde{\\boldsymbol{\\beta}} = (\\mathbf{X}^\\top \\mathbf{\\Sigma}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{\\Sigma}^{-1} \\mathbf{y}\\). Minimizing equation yields \\(\\boldsymbol{\\hat{\\theta}}_{ml}\\), maximum likelihood estimates \\(\\boldsymbol{\\theta}\\). closed form solution exists \\(\\boldsymbol{\\hat{\\beta}}_{ml}\\), maximum likelihood estimates \\(\\boldsymbol{\\beta}\\): \\(\\boldsymbol{\\hat{\\beta}}_{ml} = \\tilde{\\boldsymbol{\\beta}}_{ml}\\), \\(\\tilde{\\boldsymbol{\\beta}}_{ml}\\) \\(\\tilde{\\boldsymbol{\\beta}}\\) evaluated \\(\\boldsymbol{\\hat{\\theta}}_{ml}\\). reduce bias variances \\(\\boldsymbol{\\hat{\\beta}}_{ml}\\) can occur due simultaneous estimation \\(\\boldsymbol{\\beta}\\) \\(\\boldsymbol{\\theta}\\), restricted maximum likelihood estimation (REML) (Patterson Thompson 1971; Harville 1977; Wolfinger, Tobias, Sall 1994) shown better maximum likelihood estimation. Integrating \\(\\boldsymbol{\\beta}\\) Gaussian likelihood yields restricted Gaussian likelihood. Minus twice restricted Gaussian log-likelihood given \\[\\begin{equation}\\label{eq:reml-lik}   -2\\ell_R(\\boldsymbol{\\theta}) = -2\\ell_p(\\boldsymbol{\\theta})  + \\ln{|\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X}|} - p \\ln{2\\pi} , \\end{equation}\\] \\(p\\) equals dimension \\(\\boldsymbol{\\beta}\\). Minimizing equation yields \\(\\boldsymbol{\\hat{\\theta}}_{reml}\\), restricted maximum likelihood estimates \\(\\boldsymbol{\\theta}\\). closed solution exists \\(\\boldsymbol{\\hat{\\beta}}_{reml}\\), restricted maximum likelihood estimates \\(\\boldsymbol{\\beta}\\): \\(\\boldsymbol{\\hat{\\beta}}_{reml} = \\tilde{\\boldsymbol{\\beta}}_{reml}\\), \\(\\tilde{\\boldsymbol{\\beta}}_{reml}\\) \\(\\tilde{\\boldsymbol{\\beta}}\\) evaluated \\(\\boldsymbol{\\hat{\\theta}}_{reml}\\). covariance matrix can often written \\(\\boldsymbol{\\Sigma} = \\sigma^2 \\boldsymbol{\\Sigma}^*\\), \\(\\sigma^2\\) overall variance \\(\\boldsymbol{\\Sigma}^*\\) covariance matrix depends parameter vector \\(\\boldsymbol{\\theta}^*\\) one less dimension \\(\\boldsymbol{\\theta}\\). overall variance, \\(\\sigma^2\\), can profiled previous likelihood equation. reduces number parameters requiring optimization one, can dramatically reduce estimation time. profiling \\(\\sigma^2\\) yields \\[\\begin{equation*}\\label{eq:ml-plik}   -2\\ell_p^*(\\boldsymbol{\\theta}^*) = \\ln{|\\boldsymbol{\\Sigma^*}|} + n\\ln[(\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})^\\top \\boldsymbol{\\Sigma}^{* -1} (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})] + n + n\\ln{2\\pi / n}. \\end{equation*}\\] finding \\(\\hat{\\boldsymbol{\\theta}}^*_{ml}\\), closed form solution \\(\\hat{\\sigma}^2_{ml}\\) exists: \\(\\hat{\\sigma}^2_{ml} = [(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\tilde{\\beta}})^\\top \\mathbf{\\Sigma}^{* -1} (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})] / n\\). \\(\\boldsymbol{\\hat{\\theta}}^*_{ml}\\) combined \\(\\hat{\\sigma}^2_{ml}\\) yield \\(\\boldsymbol{\\hat{\\theta}}_{ml}\\) subsequently \\(\\boldsymbol{\\hat{\\beta}}_{ml}\\). similar result holds restricted maximum likelihood estimation. profiling \\(\\sigma^2\\) yields \\[\\begin{equation*}\\label{eq:reml-plik}   -2\\ell_R^*(\\boldsymbol{\\Theta}) = \\ln{|\\boldsymbol{\\Sigma}^*|} + (n - p)\\ln[(\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})^\\top \\boldsymbol{\\Sigma}^{* -1} (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})] + \\ln{|\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{* -1} \\mathbf{X}|} + (n - p) + (n - p)\\ln2\\pi / (n - p). \\end{equation*}\\] finding \\(\\hat{\\boldsymbol{\\theta}}^*_{reml}\\), closed form solution \\(\\hat{\\sigma}^2_{reml}\\) exists: \\(\\hat{\\sigma}^2_{reml} = [(\\mathbf{y} - \\mathbf{X} \\boldsymbol{\\tilde{\\beta}})^\\top \\mathbf{\\Sigma}^{* -1} (\\mathbf{y} - \\mathbf{X} \\tilde{\\boldsymbol{\\beta}})] / (n - p)\\). \\(\\boldsymbol{\\hat{\\theta}}^*_{reml}\\) combined \\(\\hat{\\sigma}^2_{reml}\\) yield \\(\\boldsymbol{\\hat{\\theta}}_{reml}\\) subsequently \\(\\boldsymbol{\\hat{\\beta}}_{reml}\\). profiling Gaussian likelihoods, see Wolfinger, Tobias, Sall (1994). maximum likelihood restricted maximum likelihood estimation rely \\(n \\times n\\) covariance matrix inverse. Inverting \\(n \\times n\\) matrix enormous computational demand scales cubically sample size. reason, maximum likelihood restricted maximum likelihood estimation historically infeasible implement standard form data larger thousand observations. motivates use big data approaches.","code":""},{"path":"/articles/technical.html","id":"sec:estimation-sv-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm() > Model-fitting","what":"Semivariogram-based Estimation (splm() only)","title":"Technical Details","text":"alternative approach likelihood-based estimation semivariogram-based estimation. semivariogram constant-mean process \\(\\mathbf{y}\\) expectation half squared difference two observations \\(h\\) distance apart. formally, semivariogram denoted \\(\\gamma(h)\\) defined \\[\\begin{equation*}\\label{eq:sv}   \\gamma(h) = \\text{E}[(y_i - y_j)^2] / 2 , \\end{equation*}\\] \\(h\\) Euclidean distance locations \\(y_i\\) \\(y_j\\). process \\(\\mathbf{y}\\) second-order stationary, semivariogram covariance function intimately connected: \\(\\gamma(h) = \\sigma^2 - \\text{Cov}(h)\\), \\(\\sigma^2\\) overall variance \\(\\text{Cov}(h)\\) covariance function evaluated \\(h\\). , semivariogram covariance function rely parameter vector \\(\\boldsymbol{\\theta}\\). semivariogram approaches described next computationally efficient restricted maximum likelihood maximum likelihood estimation major computational burden semivariogram approaches (calculations based squared differences among pairs) scales quadratically sample size (.e., cubed sample size like likelihood-based approaches).","code":""},{"path":"/articles/technical.html","id":"sec:estimation-sv-cwls-lm","dir":"Articles","previous_headings":"","what":"Technical Details","title":"Technical Details","text":"empirical semivariogram moment-based estimate semivariogram denoted \\(\\hat{\\gamma}(h)\\). defined \\[\\begin{equation*}   \\hat{\\gamma}(h) = \\frac{1}{2|N(h)|} \\sum_{N(h)} (y_i - y_j)^2, \\end{equation*}\\] \\(N(h)\\) set observations \\(\\mathbf{y}\\) \\(h\\) distance units apart (distance classes) \\(|N(h)|\\) cardinality \\(N(h)\\) (Cressie 1993). One criticism empirical semivariogram distance bins cutoffs tend arbitrarily chosen (.e., chosen according statistical criteria). Cressie (1985) proposed estimating \\(\\boldsymbol{\\theta}\\) minimizing objective function involves \\(\\gamma(h)\\) \\(\\hat{\\gamma}(h)\\) based weighted least squares criterion. criterion defined \\[\\begin{equation}\\label{eq:svwls}   \\sum_i w_i [\\hat{\\gamma}(h)_i - \\gamma(h)_i]^2, \\end{equation}\\] \\(w_i\\), \\(\\hat{\\gamma}(h)_i\\), \\(\\gamma(h)_i\\) weights, empirical semivariogram, semivariogram \\(\\)th distance class, respectively. Minimizing loss function yields \\(\\boldsymbol{\\hat{\\theta}}_{wls}\\), semivariogram weighted least squares estimate \\(\\boldsymbol{\\theta}\\). estimating \\(\\boldsymbol{\\theta}\\), \\(\\boldsymbol{\\beta}\\) estimates constructed using (empirical) generalized least squares: \\(\\boldsymbol{\\hat{\\beta}}_{wls} = (\\mathbf{X}^\\top \\hat{\\mathbf{\\Sigma}}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\hat{\\mathbf{\\Sigma}}^{-1} \\mathbf{y}\\). Cressie (1985) recommends setting \\(w_i = |N(h)| / \\gamma(h)_i^2\\), gives weight distance classes observations (\\(|N(h)|\\)) shorter distances (\\(1 / \\gamma(h)_i^2\\)). default spmodel use \\(w_i\\), known Cressie weights, though several options \\(w_i\\) exist available via weights argument. following table contains \\(w_i\\) available via weights argument. Table values weights argument splm() estmethod = “sv-wls”. number \\(N(h)\\) classes maximum distance \\(h\\) specified passing bins cutoff arguments splm() (arguments passed via ... esv()). default value bins 15 default value cutoff half maximum distance spatial domain’s bounding box. Recall semivariogram defined constant-mean process. Generally, \\(\\mathbf{y}\\) necessarily constant mean empirical semivariogram \\(\\boldsymbol{\\hat{\\theta}}_{wls}\\) typically constructed using residuals ordinary least squares regression \\(\\mathbf{y}\\) \\(\\mathbf{X}\\). ordinary least squares residuals assumed mean zero.","code":""},{"path":"/articles/technical.html","id":"sec:estimation-sv-cl-lm","dir":"Articles","previous_headings":"","what":"Technical Details","title":"Technical Details","text":"Composite likelihood approaches involve constructing likelihoods based conditional marginal events likelihoods available adding together individual components. Composite likelihoods attractive behave similar likelihoods easier handle, theoretical computational perspective. Curriero Lele (1999) derive particular composite likelihood estimating semivariogram parameters. negative log composite likelihood, denoted \\(\\text{CL}(h)\\), given \\[\\begin{equation}\\label{eq:svcl}   \\text{CL}(h) = \\sum_{= 1}^{n - 1} \\sum_{j > } \\left( \\frac{(y_i - y_j)^2}{2\\gamma(h)} + \\ln(\\gamma(h)) \\right) \\end{equation}\\] \\(\\gamma(h)\\) semivariogram. Minimizing loss function yields \\(\\boldsymbol{\\hat{\\theta}}_{cl}\\), semivariogram composite likelihood estimates \\(\\boldsymbol{\\theta}\\). estimating \\(\\boldsymbol{\\theta}\\), \\(\\boldsymbol{\\beta}\\) estimates constructed using (empirical) generalized least squares: \\(\\boldsymbol{\\hat{\\beta}}_{cl} = (\\mathbf{X}^\\top \\hat{\\mathbf{\\Sigma}}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\hat{\\mathbf{\\Sigma}}^{-1} \\mathbf{y}\\). advantage composite likelihood approach semivariogram estimation require arbitrarily specifying empirical semivariogram bins cutoffs. tend computationally demanding weighted least squares, however. composite likelihood constructed \\(\\binom{n}{2}\\) pairs sample size \\(n\\), whereas weighted least squares approach requires calculating \\(\\binom{|N(h)|}{2}\\) pairs distance bin \\(N(h)\\). weighted least squares approach, composite likelihood approach requires constant-mean process, typically residuals ordinary least squares regression \\(\\mathbf{y}\\) \\(\\mathbf{X}\\) used estimate \\(\\boldsymbol{\\theta}\\).","code":""},{"path":"/articles/technical.html","id":"sec:optim-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Optimization","title":"Technical Details","text":"Parameter estimation performed using stats::optim(). default estimation method Nelder-Mead (Nelder Mead 1965) stopping criterion relative convergence tolerance (reltol) .0001. one parameter requires estimation (profiled scale relevant), Brent algorithm instead used (Brent 1971). Arguments optim() passed via ... splm() spautor(). example, default estimation method convergence criteria overridden passing method control, respectively, splm() spautor(). lower upper arguments optim() specified splm() spautor() passed optim(), ignored, optimization parameters generally unconstrained. Initial values optim() found using grid search described next.","code":""},{"path":"/articles/technical.html","id":"sec:grid-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm() > Optimization","what":"Grid Search","title":"Technical Details","text":"spmodel uses grid search find suitable initial values use optimization. spatial linear models without random effects, spatially dependent variance (\\(\\sigma^2_{de}\\)) spatially independent variance (\\(\\sigma^2_{ie}\\)) parameters given “low”, “medium”, “high” values. sample variance non-spatial linear model slightly inflated factor 1.2 (non-spatial models can underestimate variance spatial dependence) “low”, “medium”, “high” values correspond 10%, 50%, 90% inflated sample variance. combinations \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\) whose proportions sum 100% considered. range (\\(\\phi\\)) extra (\\(\\xi\\)) parameters given “low” “high” values unique spatial covariance function. example, using exponential covariance function, “low” value \\(\\phi\\) one-half diagonal domain’s bounding box divided three. particular value chosen effective range (distance covariance approximately zero), equals \\(3\\phi\\) exponential covariance function, reached one-half diagonal domain’s bounding box. Analogously, “high” value \\(\\phi\\) three-halves diagonal domain’s bounding box divided three. anisotropy rotation parameter (\\(\\alpha\\)) given six values correspond 0, \\(\\pi/6\\), \\(2\\pi/6\\), \\(4\\pi/6\\), \\(5\\pi/6\\), \\(\\pi\\) radians. anisotropy scale parameter (\\(S\\)) given “low”, “medium”, “high” values correspond scaling factors 0.25, 0.75, 1. Note anisotropy parameters used grid searches point-referenced data. crossing appropriate parameter values considered. initial values used parameter, initial value replaces values parameter crossing. Duplicate crossings omitted. parameter configuration yields smallest value objective function used initial value optimization. Suppose inflated sample variance 10, exponential covariance used assuming isotropy, diagonal bounding box 180 distance units. parameter configurations evaluated shown following table. Grid search parameter configurations isotropic exponential spatial covariance inflated sample variance equal 10 diagonal bounding box equal 180 distance units. spatial linear models random effects, approach used create crossing spatial covariance parameters. separate approach used create set random effect variances. random effect variances similarly first grouped proportions. first combination first random effect variance given 90% variance, remaining 10% spread evenly among remaining random effect variances. second combination second random effect variance given 90% variance, remaining 10% spread evenly among remaining random effect variances. forth. combinations ascertain whether one random effect dominates variability. final grouping lastly considered: 100% variance spread evenly among random effects. finding parameter values \\(\\sigma^2_{de}\\), \\(\\sigma^2_{ie}\\), random effect variances (\\(\\sigma^2_{u_i}\\) \\(\\)th random effect), three scenarios considered. first scenario, \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\) get 90% inflated sample variance random effect variances get 10%. scenario, random effect grouping variance evenly spread considered. random effect variances already contributing little overall variability, performing additional objective function evaluations unnecessary. second scenario, random effects get 90% inflated sample variances \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\) get 10%. Similarly scenario, \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\) grouping variance evenly spread considered. Also scenario, lowest value range extra used. third scenario, 50% inflated sample variance given \\(\\sigma^2_{de}\\) \\(\\sigma^2_{ie}\\) 50% random effects. scenario, parameter combination considered case variances evenly spread among \\(\\sigma^2_{de}\\), \\(\\sigma^2_{ie}\\), random effect variances. Together, parameter configurations spatial variability dominates (scenario 1), random variability dominates (scenario 2), even contribution spatial random variability. parameter configuration minimizes objective function used initial value optimization. Recall random effects used restricted maximum likelihood maximum likelihood estimation, objective function always likelihood. Suppose inflated sample variance 10, exponential covariance used assuming isotropy, diagonal bounding box 180 distance units, two random effects. parameter configurations evaluated shown following table. Grid search parameter configurations isotropic exponential spatial covariance two random effects, inflated sample variance equal 10, diagonal bounding box equal 180 distance units. grid search approach balances thorough exploration parameter space computational efficiency, objective function evaluation can computationally expensive.","code":""},{"path":"/articles/technical.html","id":"sec:testing-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Hypothesis Testing","title":"Technical Details","text":"hypothesis tests \\(\\hat{\\boldsymbol{\\beta}}\\) returned summary() tidy() splm spautor object asymptotic z-tests based normal (Gaussian) distribution (Wald tests). null hypothesis test associated \\(\\hat{\\beta}_i\\) \\(\\beta_i = 0\\). test statistic given \\[\\begin{equation*}   \\tilde{z} = \\frac{\\hat{\\beta}_i}{\\text{SE}(\\hat{\\beta}_i)}, \\end{equation*}\\] \\(\\text{SE}(\\hat{\\beta}_i)\\) standard error \\(\\hat{\\beta}_i\\), equals square root \\(\\)th diagonal element \\((\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\). p-value given \\(2 * (1 - \\Phi(|\\tilde{z}|))\\), corresponds equal-tailed, two-sided hypothesis test level \\(\\alpha\\) \\(\\Phi(\\cdot)\\) denotes standard normal (Gaussian) cumulative distribution function \\(|\\cdot|\\) denotes absolute value.","code":""},{"path":"/articles/technical.html","id":"sec:random-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Random Effects (splm() only and \"reml\" or \"ml\" estmethod only)","title":"Technical Details","text":"random effects contribute directly covariance design matrices. Let \\(\\mathbf{u}\\) mean-zero random effect column vector length \\(n_u\\), \\(n_u\\) number levels random effect, design matrix \\(\\mathbf{Z}_u\\). \\(\\text{Cov}(\\mathbf{Z}_u\\mathbf{u}) = \\mathbf{Z}_u \\text{Cov}(\\mathbf{u})\\mathbf{Z}_u^\\top\\). element \\(\\mathbf{u}\\) independent one another, reduces \\(\\text{Cov}(\\mathbf{Z}_u\\mathbf{u}) = \\sigma^2_u \\mathbf{Z}_u \\mathbf{Z}_u^\\top\\), \\(\\sigma^2_u\\) variance parameter corresponding random effect (.e., random effect variance parameter). \\(\\mathbf{Z}\\) matrices index levels random effect. \\(\\mathbf{Z}\\) dimension \\(n \\times n_u\\), \\(n\\) sample size. row \\(\\mathbf{Z}\\) corresponds observation column level random effect. example, suppose \\(n = 4\\) observations, \\(\\mathbf{y} = \\{y_1, y_2, y_3, y_4\\}\\). Also suppose random effect \\(\\mathbf{u}\\) two levels \\(y_1\\) \\(y_4\\) first level \\(y_2\\) \\(y_3\\) second level. random intercepts, element \\(\\mathbf{Z}\\) one observation appropriate level random effect zero otherwise. follows \\[\\begin{equation*} \\mathbf{Z}\\mathbf{u} = \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\\\ 0 & 1 \\\\ 1 & 0 \\end{bmatrix} \\begin{bmatrix} u_1 \\\\ u_2 \\end{bmatrix}, \\end{equation*}\\] \\(u_1\\) \\(u_2\\) random intercepts first second levels \\(\\mathbf{u}\\), respectively. random slopes, element \\(\\mathbf{Z}\\) equals value auxiliary variable, \\(\\mathbf{k}\\), observation appropriate level random effect zero otherwise. \\(\\mathbf{k} = \\{2, 7, 5, 4 \\}\\) follows \\[\\begin{equation*} \\mathbf{Z}\\mathbf{u} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 7 \\\\ 0 & 5 \\\\ 4 & 0 \\end{bmatrix} \\begin{bmatrix} u_1 \\\\ u_2 \\end{bmatrix}, \\end{equation*}\\] \\(u_1\\) \\(u_2\\) random slopes first second levels \\(\\mathbf{u}\\), respectively. random slope included model, common auxiliary variable column \\(\\mathbf{X}\\), fixed effects design matrix (.e., also fixed effect). Denote column \\(\\mathbf{x}\\). \\(\\boldsymbol{\\beta}\\) captures average effect \\(\\mathbf{x}\\) \\(\\mathbf{y}\\) (accounting explanatory variables) \\(\\mathbf{u}\\) captures subject-specific effect \\(\\mathbf{x}\\) \\(\\mathbf{y}\\). subject \\(\\)th level \\(\\mathbf{u}\\), average increase \\(y\\) associated one-unit increase \\(x\\) \\(\\beta + u_i\\). sv-wls sv-cl estimation methods use likelihood, thus, allow estimation random effects spmodel.","code":""},{"path":"/articles/technical.html","id":"sec:anisotropy-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Anisotropy (splm() only)","title":"Technical Details","text":"isotropic spatial covariance function behaves similarly directions (.e., independent direction) function distance. anisotropic spatial covariance function behave similarly directions function distance. following figure shows ellipses isotropic anisotropic spatial covariance function centered origin (distance zero). black outline ellipse level curve equal correlation. left ellipse (circle) represents isotropic covariance function. distance correlation two observations lays level curve directions. right ellipse represents anisotropic covariance function. distance correlation two observations lays level curve different different directions. left figure, ellipse isotropic spatial covariance function centered origin shown. right figure, ellipse anisotropic spatial covariance function centered origin shown. black outline ellipse level curve equal correlation. accommodate spatial anisotropy, original coordinates must transformed transformed coordinates yield isotropic spatial covariance. transformation involves rotation scaling. Consider set \\(x\\) \\(y\\) coordinates transformed \\(x^*\\) \\(y^*\\) coordinates. transformation formally defined \\[\\begin{equation*}   \\begin{bmatrix}     x^* \\\\     y^*   \\end{bmatrix} =   \\begin{bmatrix}     1 & 0 \\\\     0 & 1 / S   \\end{bmatrix}   \\begin{bmatrix}     \\cos(\\alpha) & \\sin(\\alpha) \\\\     -\\sin(\\alpha) & \\cos(\\alpha)   \\end{bmatrix}     \\begin{bmatrix}     x \\\\     y   \\end{bmatrix}. \\end{equation*}\\] original coordinates first multiplied rotation matrix, rotates coordinates clockwise angle \\(\\alpha\\). multiplied scaling matrix, scales minor axis spatial covariance ellipse reciprocal \\(S\\). transformed coordinates used compute distances resulting spatial covariances. type anisotropy formally known “geometric” anisotropy involves geometric transformation coordinates. following figure shows process step--step. left figure, ellipse anisotropic spatial covariance function centered origin shown. blue lines represent original axes red lines transformed axes. solid lines represent x-axes dotted lines y-axes. Note solid, red line major axis ellpise dashed, red line minor axis ellipse. center figure, ellipse rotated clockwise rotate parameter major axis transformed x-axis minor axis transformed y-axis. right figure, minor axis ellipse scaled reciprocal scale parameter ellipse becomes circle, corresponds isotropic spatial covariance function. transformed coordinates used compute distances spatial covariances. Anisotropy parameters (\\(\\alpha\\) \\(S\\)) can estimated spmodel using restricted maximum likelihood maximum likelihood. Estimating anisotropy can challenging. First, need restrict parameter space two parameters identifiable (unique parameter set possible outcome). restricted \\(\\alpha\\) \\([0, \\pi]\\) radians due symmetry covariance ellipse rotations \\(\\alpha\\) \\(\\alpha + j \\pi\\), \\(j\\) integer. also restricted \\(S\\) \\([0, 1]\\) defined \\(S\\) scaling factor length minor axis relative major axis – otherwise clear whether \\(S\\) refers minor major axis. Given restricted parameter space, still issue local maxima, particularly rotation parameters near zero, rotation close rotation parameter \\(\\pi\\), zero far \\(\\pi\\) parameter space. address local maxima problem, optimization iteration actually involves two likelihood evaluations – one \\(\\alpha\\) another \\(|\\pi - \\alpha|\\), \\(|\\cdot|\\) denotes absolute value. Thus one likelihood evaluation always \\([0, \\pi/2]\\) radians another \\([\\pi/2, \\pi]\\) radians, exploring different quadrants parameter space allowing optimization test solutions near zero \\(\\pi\\) simultaneously. Anisotropy parameters estimated spmodel estmethod sv-wls sv-cl. However, known anisotropy parameters estimation methods can specified via spcov_initial incorporated estimation \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\beta}\\). Anisotropy defined areal data given (binary) neighborhood structure.","code":""},{"path":"/articles/technical.html","id":"sec:partition-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Partition Factors","title":"Technical Details","text":"partition factor factor (categorical) variable observations different levels partition factor assumed uncorrelated. partition matrix \\(\\mathbf{P}\\) dimension \\(n \\times n\\) can constructed represent partition factor. \\(ij\\)th element \\(\\mathbf{P}\\) equals one observation \\(\\)th row \\(j\\)th column level partition factor zero otherwise. initial covariance matrix (ignoring partition factor) updated taking Hadmard (element-wise) product partition matrix: \\[\\begin{equation*} \\boldsymbol{\\Sigma}_{updated} = \\boldsymbol{\\Sigma}_{initial} \\odot \\mathbf{P}, \\end{equation*}\\] \\(\\odot\\) indicates Hadmard product. Partition factors impose block structure \\(\\boldsymbol{\\Sigma}\\), allows efficient computation \\(\\boldsymbol{\\Sigma}^{-1}\\) used estimation prediction. computing empirical semivariogram using esv(), semivariances ignored observations different levels partition factor. sv-wls sv-cl estimation methods, semivariances ignored observations different levels partition factor.","code":""},{"path":"/articles/technical.html","id":"sec:bigdata-lm","dir":"Articles","previous_headings":"Spatial Linear Models > spautor() and splm()","what":"Big Data (splm() only)","title":"Technical Details","text":"Big data model-fitting accommodated spmodel using “local” spatial indexing (SPIN) approach (Ver Hoef, Dumelle, et al. 2023). Suppose \\(m\\) unique indexes, observation one indexes. \\(\\boldsymbol{\\Sigma}\\) can represented blockwise \\[\\begin{equation}\\label{eq:full_cov}   \\boldsymbol{\\Sigma} =   \\begin{bmatrix}   \\boldsymbol{\\Sigma}_{1,1} & \\boldsymbol{\\Sigma}_{1,2} & \\ldots & \\ldots & \\boldsymbol{\\Sigma}_{1,m} \\\\   \\boldsymbol{\\Sigma}_{2,1} & \\boldsymbol{\\Sigma}_{2,2} & \\boldsymbol{\\Sigma}_{2,3} & \\ldots & \\boldsymbol{\\Sigma}_{2,m} \\\\   \\vdots & \\boldsymbol{\\Sigma}_{3,2} & \\ddots & \\boldsymbol{\\Sigma}_{3,4} & \\vdots \\\\   \\vdots & \\vdots & \\boldsymbol{\\Sigma}_{4,3} & \\ddots & \\vdots \\\\   \\boldsymbol{\\Sigma}_{m,1} & \\ldots & \\ldots & \\ldots & \\boldsymbol{\\Sigma}_{m, m}   \\end{bmatrix}, \\end{equation}\\] perform estimation big data, observations index value assumed independent observations different index values, yielding “big-data” covariance matrix given \\[\\begin{equation}\\label{eq:bd_cov}   \\boldsymbol{\\Sigma}_{bd} =   \\begin{bmatrix}   \\boldsymbol{\\Sigma}_{1,1} & \\boldsymbol{0} & \\ldots & \\ldots & \\boldsymbol{0} \\\\   \\boldsymbol{0} & \\boldsymbol{\\Sigma}_{2,2} & \\boldsymbol{0} & \\ldots & \\boldsymbol{0} \\\\   \\vdots & \\boldsymbol{0} & \\ddots & \\boldsymbol{0} & \\vdots \\\\   \\vdots & \\vdots & \\boldsymbol{0} & \\ddots & \\vdots \\\\   \\boldsymbol{0} & \\ldots & \\ldots & \\ldots & \\boldsymbol{\\Sigma}_{m, m}   \\end{bmatrix}, \\end{equation}\\] Estimation proceeds using \\(\\boldsymbol{\\Sigma}_{bd}\\) instead \\(\\boldsymbol{\\Sigma}\\). computing empirical semivariogram, semivariances ignored observations different local indexes. sv-wls sv-cl estimation methods, semivariances ignored observations different local indexes. Via equation, can seen local index acts partition factor separate partition factor explicitly defined partition_factor. spmodel allows custom local indexes passed splm(). custom local index passed, local index determined using \"random\" \"kmeans\" method. \"random\" method assigns observations indexes randomly based number groups desired. \"kmeans\" method uses k-means clustering (MacQueen 1967) x-coordinates y-coordinates assign observations indexes (based number clusters (groups) desired). estimate \\(\\boldsymbol{\\beta}\\) using \\(\\boldsymbol{\\Sigma}_{bd}\\) given \\[\\begin{equation}\\label{eq:beta_bd}   \\hat{\\boldsymbol{\\beta}}_{bd} = (\\mathbf{X}^\\top \\boldsymbol{\\hat{\\Sigma}}^{-1}_{bd}\\mathbf{X})^{-1}\\mathbf{X}^\\top \\boldsymbol{\\hat{\\Sigma}}^{-1}_{bd} \\mathbf{y} = \\mathbf{T}^{-1}_{xx}\\mathbf{t}_{xy}, \\end{equation}\\] \\(\\mathbf{T}_{xx} = \\sum_{= 1}^m \\mathbf{X}_i^\\top \\boldsymbol{\\hat{\\Sigma}}^{-1}_{, }\\mathbf{X}_i\\) \\(\\mathbf{t}_{xy} = \\sum_{= 1}^m \\mathbf{X}_i^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{y}_i\\). Note \\(\\hat{\\boldsymbol{\\beta}}_{bd}\\), \\(\\mathbf{X}_i\\) \\(\\mathbf{y}_i\\) subsets \\(\\mathbf{X}\\) \\(\\mathbf{y}\\), respectively, \\(\\)th local index. estimator acts pooled estimator \\(\\boldsymbol{\\beta}\\) across indexes. spmodel four approaches estimating covariance matrix \\(\\hat{\\boldsymbol{\\beta}}_{bd}\\). choice determined var_adjust argument local. first approach implements adjustment (var_adjust = \"none\") simply uses \\(\\mathbf{T}_{xx}^{-1}\\), covariance matrix \\(\\hat{\\boldsymbol{\\beta}}_{bd}\\) using \\(\\boldsymbol{\\Sigma}_{bd}\\). computationally efficient, approach ignores covariance across indexes. can shown covariance \\(\\hat{\\boldsymbol{\\beta}}_{bd}\\) using \\(\\boldsymbol{\\Sigma}\\), full covariance matrix, given \\[\\begin{equation}\\label{eq:var_theo}   \\mathbf{T}_{xx}^{-1} + \\mathbf{T}_{xx}^{-1} \\mathbf{W}_{xx}\\mathbf{T}_{xx}^{-1}, \\end{equation}\\] \\[\\begin{equation*} \\mathbf{W} = \\sum_{= 1}^{m - 1} \\sum_{j = + 1}^m (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\hat{\\boldsymbol{\\Sigma}}_{, j} \\hat{\\boldsymbol{\\Sigma}}^{-1}_{j, j} \\mathbf{X}_j) + (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\hat{\\boldsymbol{\\Sigma}}_{, j} \\hat{\\boldsymbol{\\Sigma}}^{-1}_{j, j} \\mathbf{X}_j)^\\top \\end{equation*}\\] equation can viewed sum unadjusted covariance matrix \\(\\hat{\\boldsymbol{\\beta}}_{bd}\\) (\\(\\mathbf{T}_{xx}^{-1}\\)) correction incorporates covariance across indexes (\\(\\mathbf{T}_{xx}^{-1} \\mathbf{W}_{xx}\\mathbf{T}_{xx}^{-1}\\)). adjustment known “theoretically-correct” (var_adjust = \"theoretical\") adjustment uses \\(\\boldsymbol{\\Sigma}\\). theoretical adjustment default adjustment spmodel theoretically correct, computationally expensive adjustment. Two alternative adjustments also provided, equal theoretical adjustment, easier compute. empirical (var_adjust = \"empirical\") pooled (var_adjust = \"pooled\") adjustments. empirical adjustment given \\[\\begin{equation*} \\frac{1}{m(m -1)} \\sum_{= 1}^m (\\boldsymbol{\\hat{\\beta}}_i - \\boldsymbol{\\hat{\\beta}}_{bd})(\\boldsymbol{\\hat{\\beta}}_i - \\boldsymbol{\\hat{\\beta}}_{bd})^\\top, \\end{equation*}\\] \\(\\boldsymbol{\\hat{\\beta}}_i = (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\mathbf{X}_i^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{y}_i\\). similar adjustment use \\(\\boldsymbol{\\hat{\\beta}}_i = (\\mathbf{X}_i^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{X}_i)^{-1}\\mathbf{X}_i \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{y}_i\\), closely resembles composite likelihood approach. approach sensitive presence least one singularity \\(\\mathbf{X}_i^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{X}_i\\), case variance adjustment computed. \"pooled\" variance adjustment given \\[\\begin{equation*} \\frac{1}{m^2} \\sum_{= 1}^m (\\mathbf{X}^\\top_i \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{X}_i)^{-1}. \\end{equation*}\\] Note pooled variance adjustment computed \\(\\mathbf{X}_i^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_{, } \\mathbf{X}_i\\) singular.","code":""},{"path":"/articles/technical.html","id":"sec:rf-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"splmRF() and spautorRF()","title":"Technical Details","text":"splmRF() spautorRF() fit random forest spatial residual models designed prediction. models fit combining aspects random forest spatial linear modeling. First, random forest model (Breiman 2001; James et al. 2013) fit using ranger R package (Wright Ziegler 2015). random forest fitted values obtained data observation used compute residual (subtracting fitted value observed value). intercept-spatial linear model fit residuals: \\[\\begin{equation*}   \\mathbf{e}_{rf} = \\beta_0 + \\mathbf{\\tau} + \\mathbf{\\epsilon}, \\end{equation*}\\] \\(\\mathbf{e}_{rf}\\) random forest residuals. Random forest spatial residual models can significantly improve predictive accuracy new data compared standard random forest models formally incorporating spatial covariance random forest residuals (Fox, Ver Hoef, Olsen 2020). Different estimation methods, different spatial covariance functions, fixing spatial covariance parameter values, random effects, anisotropy, partition factors, big data accommodated spatial linear model portion random forest spatial residual models supplying respective named arguments splmRF() spautorRF().","code":""},{"path":"/articles/technical.html","id":"sec:sprnorm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"sprnorm()","title":"Technical Details","text":"Spatial normal (Gaussian) random variables simulated taking sum fixed mean random errors. random errors mean zero covariance matrix \\(\\boldsymbol{\\Sigma}\\). realization random errors obtained \\(\\boldsymbol{\\Sigma}^{1/2} \\mathbf{e}\\), \\(\\mathbf{e}\\) normal random variable mean zero covariance matrix \\(\\mathbf{}\\). spatial normal random variable equals \\[\\begin{equation*} \\mathbf{y} = \\boldsymbol{\\mu} + \\boldsymbol{\\Sigma}^{1/2} \\mathbf{e}, \\end{equation*}\\] \\(\\boldsymbol{\\mu}\\) fixed mean. follows \\[\\begin{equation*}   \\begin{split}   \\text{E}(\\mathbf{y}) & = \\boldsymbol{\\mu} + \\boldsymbol{\\Sigma}^{1/2} \\text{E}(\\mathbf{e}) = \\boldsymbol{\\mu} \\\\   \\text{Cov}(\\mathbf{y}) & = \\text{Cov}(\\boldsymbol{\\Sigma}^{1/2} \\mathbf{e}) = \\boldsymbol{\\Sigma}^{1/2} \\text{Cov}(\\mathbf{e}) \\boldsymbol{\\Sigma}^{1/2} = \\boldsymbol{\\Sigma}^{1/2} \\boldsymbol{\\Sigma}^{1/2} = \\boldsymbol{\\Sigma}   \\end{split} \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:vcov-lm","dir":"Articles","previous_headings":"Spatial Linear Models","what":"vcov()","title":"Technical Details","text":"vcov() returns variance-covariance matrix estimated parameters. Currently, vcov() returns variance-covariance matrix \\(\\hat{\\boldsymbol{\\beta}}\\), fixed effects. variance-covariance matrix fixed effects given \\((\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\).","code":""},{"path":"/articles/technical.html","id":"sec:spglms","dir":"Articles","previous_headings":"","what":"Spatial Generalized Linear Models","title":"Technical Details","text":"building spatial linear models, response vector \\(\\mathbf{y}\\) typically assumed Gaussian (given \\(\\mathbf{X}\\)). Relaxing assumption distribution \\(\\mathbf{y}\\) yields rich class spatial generalized linear models can describe binary data, proportion data, count data, skewed data parameterized \\[\\begin{equation}\\label{eq:spglm} g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}, \\end{equation}\\] \\(g(\\cdot)\\) called link function, \\(\\boldsymbol{\\mu}\\) mean \\(\\mathbf{y}\\), remaining terms \\(\\mathbf{X}\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\tau}\\), \\(\\boldsymbol{\\epsilon}\\) represent quantities spatial linear models. link function, \\(g(\\cdot)\\), “links” function \\(\\boldsymbol{\\mu}\\) linear term \\(\\boldsymbol{\\eta}\\) , denoted \\(\\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\), familiar spatial linear models. Note linking \\(\\boldsymbol{\\mu}\\) \\(\\boldsymbol{\\eta}\\) applies element-wise vector. link function \\(g(\\cdot)\\) corresponding inverse link function, \\(g^{-1}(\\cdot)\\). inverse link function “links” function \\(\\boldsymbol{\\eta}\\) \\(\\boldsymbol{\\mu}\\). Notice spatial generalized linear models, modeling \\(\\mathbf{y}\\) directly spatial linear models, rather modeling function mean \\(\\mathbf{y}\\). Also notice \\(\\boldsymbol{\\eta}\\) unconstrained \\(\\boldsymbol{\\mu}\\) usually constrained way (e.g., positive). model \\(g(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\) called spatial generalized linear model. spmodel allows fitting spatial generalized linear models \\(\\mathbf{y}\\) binomial (Bernoulli), beta, Poisson, negative binomial, gamma, inverse Gaussian random vector via Laplace approximation restricted maximum likelihood estimation maximum likelihood estimation – Ver Hoef, Blagg, et al. (2023) provide details. binomial beta \\(\\mathbf{y}\\), logit link function defined \\(g(\\boldsymbol{\\mu}) = \\ln(\\frac{\\boldsymbol{\\mu}}{1 - \\boldsymbol{\\mu}}) = \\boldsymbol{\\eta}\\), inverse logit link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\frac{\\exp(\\boldsymbol{\\eta})}{1 + \\exp(\\boldsymbol{\\eta})} = \\boldsymbol{\\mu}\\). Poisson, negative binomial, gamma, inverse Gaussian \\(\\mathbf{y}\\), log link function defined \\(g(\\boldsymbol{\\mu}) = log(\\boldsymbol{\\mu}) = \\boldsymbol{\\eta}\\), inverse log link function defined \\(g^{-1}(\\boldsymbol{\\eta}) = \\exp(\\boldsymbol{\\eta}) = \\boldsymbol{\\mu}\\). Full parameterizations distributions given later. spatial linear models, one can marginalize \\(\\boldsymbol{\\beta}\\) random components obtain explicit distribution data (\\(\\mathbf{y}\\)) covariance parameters (\\(\\boldsymbol{\\theta}\\)) – REML likelihood. spatial generalized linear models, marginalization challenging. First define \\(\\mathbf{w} = \\mathbf{X} \\boldsymbol{\\beta} + \\boldsymbol{\\tau} + \\boldsymbol{\\epsilon}\\). goal marginalize joint distribution \\(\\mathbf{y}\\) \\(\\mathbf{w}\\) \\(\\mathbf{w}\\) (\\(\\boldsymbol{\\beta}\\)) obtain distribution data (\\(\\mathbf{y}\\)), dispersion parameter (\\(\\varphi\\)), covariance parameters (\\(\\boldsymbol{\\theta}\\)). accomplish feat, use hierarchical construction treats \\(\\mathbf{w}\\) latent (.e., unobserved) variables use Laplace approximation perform integration. briefly describe approach next, described full detail Ver Hoef, Blagg, et al. (2023). marginal distribution interest can written hierarchically \\[\\begin{equation*}   [\\mathbf{y}|\\mathbf{X}, \\varphi, \\boldsymbol{\\theta}] = \\int_\\mathbf{w} [\\mathbf{y} | g^{-1}(\\mathbf{w}), \\varphi] [\\mathbf{w} | \\mathbf{X}, \\boldsymbol{\\theta}] d\\mathbf{w} . \\end{equation*}\\] term \\([\\mathbf{y}|g^{-1}(\\mathbf{w}), \\varphi]\\) likelihood generalized linear model mean function \\(g^{-1}(\\mathbf{w})\\), term \\([\\mathbf{w}|\\mathbf{X}, \\boldsymbol{\\theta}]\\) restricted log likelihood \\(\\mathbf{w}\\) given covariance parameters. Next define \\(\\ell_\\mathbf{w} = \\ln([\\mathbf{y} | g^{-1}(\\mathbf{w}), \\varphi] [\\mathbf{w} | \\mathbf{X}, \\boldsymbol{\\theta}])\\). Let \\(\\mathbf{g}\\) gradient vector \\(g_i = \\frac{\\partial \\ell_\\mathbf{w}}{\\partial w_i}\\) \\(\\mathbf{G}\\) Hessian matrix \\(ij\\)th element \\(G_{, j} = \\frac{\\partial^2 \\ell_\\mathbf{w}}{\\partial w_i \\partial w_j}\\). Using multivariate Taylor series expansion around point \\(\\mathbf{}\\), \\[\\begin{equation*}   \\int_\\mathbf{w} \\exp(\\ell_\\mathbf{w}) d\\mathbf{w} \\approx \\int_\\mathbf{w} \\exp(\\ell_\\mathbf{} + \\mathbf{g}^\\top(\\mathbf{w} - \\mathbf{}) + \\frac{1}{2}(\\mathbf{w} - \\mathbf{})^\\top \\mathbf{G} (\\mathbf{w} - \\mathbf{})) d\\mathbf{w}. \\end{equation*}\\] \\(\\mathbf{}\\) value \\(\\mathbf{g} = \\mathbf{0}\\), \\[\\begin{equation*}   \\int_\\mathbf{w} \\exp(\\ell_\\mathbf{w}) d\\mathbf{w} \\approx \\exp(\\ell_\\mathbf{}) \\int_\\mathbf{w} \\exp \\left(-\\frac{1}{2} (\\mathbf{w} - \\mathbf{})^\\top (- \\mathbf{G})(\\mathbf{w} - \\mathbf{}) \\right) d\\mathbf{w} = \\exp(\\ell_\\mathbf{}) (2 \\pi)^{n/2} |-\\mathbf{G}_a|^{-1/2}, \\end{equation*}\\] \\(\\mathbf{G}_a\\) Hessian evaluated \\(\\mathbf{}\\) \\(|\\cdot|\\) determinant operator. previous result follows normalizing constant Gaussian distribution kernel \\(\\exp(\\frac{1}{2} (\\mathbf{w} - \\mathbf{})^\\top [(- \\mathbf{G})^{-1}]^{-1}(\\mathbf{w} - \\mathbf{}))\\). Finally, arrive \\[\\begin{equation*}   \\int_\\mathbf{w} \\exp(\\ell_\\mathbf{w}) d\\mathbf{w} \\approx [\\mathbf{y} | g^{-1}(\\mathbf{}), \\varphi] [\\mathbf{} | \\mathbf{X}, \\boldsymbol{\\theta}] (2 \\pi)^{n/2} |-\\mathbf{G}_a|^{-1/2}|, \\end{equation*}\\] distribution marginalized latent \\(\\mathbf{w}\\) depends data, dispersion parameter, covariance parameters. approach outlined solve integral known Laplace approximation.","code":""},{"path":"/articles/technical.html","id":"sec:aic-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"AIC() and AICc()","title":"Technical Details","text":"AIC() AICc() spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:anova-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"anova()","title":"Technical Details","text":"anova() spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:coef-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"coef()","title":"Technical Details","text":"coef() spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:confint-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"confint()","title":"Technical Details","text":"confint() spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:cooks-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"cooks.distance()","title":"Technical Details","text":"Cook’s distance defined standard generalized linear model Cook’s distance conditioning \\(\\mathbf{w}\\). , conditioning \\(\\mathbf{w}\\), Cook’s distance \\[\\begin{equation} \\frac{\\mathbf{e}_p^2}{p} \\odot diag(\\mathbf{H}_c) \\odot \\frac{1}{1 - diag(\\mathbf{H}_c)}, \\end{equation}\\] \\(\\mathbf{e}_p^2\\) Pearson residuals, \\(diag(\\mathbf{H}_c)\\) diagonal leverage (hat) matrix conditional \\(\\mathbf{w}\\) given \\(\\mathbf{H}_c = \\mathbf{X}_v (\\mathbf{X}_v^\\top\\mathbf{X}_v)^{-1} \\mathbf{X}_v^\\top\\), \\(\\mathbf{X}_v = \\mathbf{V}^{1/2}\\mathbf{X}\\) \\(\\mathbf{V}\\) diagonal matrix \\(\\)th diagonal element equal \\(\\text{Var}(w_i)\\), \\(\\odot\\) denotes Hadmard (element-wise) product.","code":""},{"path":"/articles/technical.html","id":"sec:deviance-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"deviance()","title":"Technical Details","text":"deviance defined conditional \\(\\mathbf{w}\\) (.e., find deviance conditional model). derived taking deviance definitions generalized linear models distribution (defined later) evaluating \\(\\mu_i\\) \\(w_i\\).","code":""},{"path":"/articles/technical.html","id":"sec:fitted-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"fitted()","title":"Technical Details","text":"fitted values link scale (type = \"link\") given \\(\\mathbf{w}\\). fitted values response scale (type = \"response\") given \\(g^{-1}(\\mathbf{w})\\). fitted values spatial random errors (type = \"spcov\") random effects (type = \"randcov\") derived similarly spatial linear models treat \\(\\mathbf{w}\\) response instead \\(\\mathbf{y}\\) (link scale).","code":""},{"path":"/articles/technical.html","id":"sec:hatvalues-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"hatvalues()","title":"Technical Details","text":"leverage (hat) matrix obtained finding standard generalized linear model leverage (hat) matrix conditioning \\(\\mathbf{w}\\). , conditioning \\(\\mathbf{w}\\) leverage (hat) matrix, \\(\\mathbf{H}_c\\), \\[\\begin{equation}   \\mathbf{H}_c = \\mathbf{X}_v (\\mathbf{X}_v^\\top\\mathbf{X}_v)^{-1} \\mathbf{X}_v^\\top, \\end{equation}\\] \\(\\mathbf{X}_v = \\mathbf{V}^{1/2}\\mathbf{X}\\) \\(\\mathbf{V}\\) diagonal matrix \\(\\)th diagonal element equal \\(\\text{Var}(\\text{w}_i)\\).","code":""},{"path":"/articles/technical.html","id":"sec:loglik-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"logLik()","title":"Technical Details","text":"logLik() spatial generalized linear models defined spatial linear models, log-likelihood returned. log-likelihood spatial generalized linear models given \\[\\begin{equation*}   \\ell_p(\\varphi, \\boldsymbol{\\theta}) = \\ln([\\mathbf{y} | g^{-1}(\\mathbf{}), \\varphi]) + \\ln([\\mathbf{} | \\mathbf{X}, \\boldsymbol{\\theta}]) + \\frac{n}{2} \\ln(2 \\pi) - \\frac{1}{2} \\ln(|- \\mathbf{G}_{\\mathbf{}}|). \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:loocv-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"loocv()","title":"Technical Details","text":"loocv() spatial generalized linear models defined similarly spatial linear models, except \\(\\mathbf{w}\\) predicted instead \\(\\mathbf{y}\\). \\(g^{-1}(\\mathbf{w})\\) compared \\(\\mathbf{y}\\) compute mean-squared-prediction-error. , \\[\\begin{equation*} mspe = \\frac{1}{n}\\sum_{= 1}^n(y_i - g^{-1}(w_i))^2. \\end{equation*}\\] cv_fitted = TRUE, predictions held-\\(\\mathbf{w}\\) returned. standard errors predictions (held-\\(\\mathbf{w}\\)) returned se.fit = TRUE. Note \\(\\mathbf{G}_{-}\\) determined \\(\\mathbf{G}\\) using Helmert-Wolf blocking done \\(\\boldsymbol{\\Sigma}_{-}\\) \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"/articles/technical.html","id":"sec:bigdata-loocv-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > loocv()","what":"Big Data","title":"Technical Details","text":"loocv() big data spatial generalized linear models defined similarly big data spatial linear models, except \\(\\mathbf{w}\\) predicted instead \\(\\mathbf{y}\\). Additionally, \\(\\mathbf{G}_{l, l}\\) determined local neighborhood done \\(\\boldsymbol{\\Sigma}_{l, l}\\).","code":""},{"path":[]},{"path":"/articles/technical.html","id":"sec:predict-none-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > predict()","what":"interval = \"none\"","title":"Technical Details","text":"Building previously defined empirical best linear unbiased predictions (.e., empirical Kriging predictions), predictions \\(\\mathbf{w}_u\\) given link scale (type = \"link\") \\[\\begin{equation}\\label{eq:glm_blup}   \\mathbf{\\dot{w}}_u = \\mathbf{X}_u \\hat{\\boldsymbol{\\beta}} + \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_{o} (\\hat{\\mathbf{w}}_o - \\mathbf{X}_o \\hat{\\boldsymbol{\\beta}}) . \\end{equation}\\] predictions given response (inverse link) scale (type = \"response\") \\(g^{-1}(\\mathbf{\\dot{w}}_u)\\). Similar covariance matrix \\(\\hat{\\boldsymbol{\\beta}}\\), covariance matrix \\(\\mathbf{\\dot{w}}_u\\) requires adjustment account fact \\(\\mathbf{w}\\) actually observed. First let \\(\\boldsymbol{\\Lambda} = \\mathbf{X}_u \\mathbf{B} + \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}_o^{-1} + \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o \\mathbf{B}\\) \\(\\mathbf{B} = (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1}\\), note \\(\\mathbf{\\dot{w}}_u = \\Lambda \\hat{\\mathbf{w}}_o\\). Using law conditional variance conditioning \\(\\mathbf{w}_o\\) observed , follows \\[\\begin{equation*}   \\text{Cov}(\\hat{\\mathbf{w}}_u - \\mathbf{w}_u) = \\text{Cov}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u) = \\text{E}_{\\mathbf{w}_o}[\\text{Cov}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u | \\mathbf{w}_o)] + \\text{Cov}_{\\mathbf{w}_o}[\\text{E}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u | \\mathbf{w}_o)], \\end{equation*}\\] assume \\(\\hat{\\mathbf{w}}_o\\) unbiased \\(\\mathbf{w}_o\\) (.e., \\(\\text{E}(\\hat{\\mathbf{w}}_o | \\mathbf{w}_o) = \\mathbf{w}_o\\)). \\(\\text{Cov}_{\\mathbf{w}_o}[\\text{E}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u | \\mathbf{w}_o)] = \\text{Cov}_{\\mathbf{w}_o}(\\Lambda \\mathbf{w}_o - \\mathbf{w}_u) = \\hat{\\boldsymbol{\\Sigma}}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\hat{\\boldsymbol{\\Sigma}}^\\top_{uo} + \\mathbf{Q}(\\mathbf{X}_o^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1}\\mathbf{Q}^\\top\\), \\(\\mathbf{Q} = \\mathbf{X}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\mathbf{X}_o\\), usual form mean squared prediction error \\(\\hat{\\mathbf{w}}_u\\). Next note (viewing \\(\\mathbf{w}_u\\) constant) \\(\\text{E}_{\\mathbf{w}_o}[\\text{Cov}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u | \\mathbf{w}_o)]\\) can viewed observed Fisher Information inverse, \\(- \\mathbf{G}^{-1}\\). Evaluating \\(\\mathbf{G}\\) \\(\\mathbf{}\\) eventually yields adjusted covariance matrix \\(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u\\) (var_correct = TRUE) given \\[\\begin{equation}\\label{eq:glm_blup_cov}   \\text{Cov}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u) = \\dot{\\boldsymbol{\\Sigma}}_u = \\Lambda (-\\mathbf{G}_\\mathbf{})^{-1} \\Lambda^\\top + \\hat{\\boldsymbol{\\Sigma}}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\hat{\\boldsymbol{\\Sigma}}^\\top_{uo} + \\mathbf{Q}(\\mathbf{X}_o^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1}\\mathbf{Q}^\\top . \\end{equation}\\] unadjusted covariance matrix \\(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u\\) (var_correct = FALSE) can also returned given \\[\\begin{equation}\\label{eq:glm_blup_cov_unadj}   \\text{Cov}(\\Lambda \\hat{\\mathbf{w}}_o - \\mathbf{w}_u) = \\dot{\\boldsymbol{\\Sigma}}_u = \\hat{\\boldsymbol{\\Sigma}}_u - \\hat{\\boldsymbol{\\Sigma}}_{uo} \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\hat{\\boldsymbol{\\Sigma}}^\\top_{uo} + \\mathbf{Q}(\\mathbf{X}_o^\\top \\hat{\\boldsymbol{\\Sigma}}_o^{-1} \\mathbf{X}_o)^{-1}\\mathbf{Q}^\\top . \\end{equation}\\] se.fit = TRUE, standard errors returned link scale taking square root diagonal relevant \\(\\dot{\\boldsymbol{\\Sigma}}_u\\).","code":""},{"path":"/articles/technical.html","id":"sec:predict-predict-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > predict()","what":"interval = \"prediction\"","title":"Technical Details","text":"Predictions \\(\\mathbf{w}_u\\) returned link scale (type = \"link\") evaluating \\(\\mathbf{\\dot{w}}_u\\). (100 \\(\\times\\) level)% prediction interval \\((w_u)_i\\) \\((\\dot{w}_u)_i \\pm z^* \\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\), \\(\\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\) standard error \\((\\dot{w}_u)_i\\) obtained se.fit = TRUE, \\(\\Phi(z^*) = 1 - \\alpha / 2\\), \\(\\Phi(\\cdot)\\) standard normal (Gaussian) cumulative distribution function, \\(\\alpha = 1 -\\) level, level argument predict(). default level 0.95, corresponds \\(z^*\\) approximately 1.96. predictions corresponding prediction intervals returned response scale (type = \"response\") applying \\(g^{-1}(\\cdot)\\) (inverse link) \\((\\dot{w}_u)_i\\) (prediction), \\((\\dot{w}_u)_i - z^* \\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\) (prediction interval lower bound), \\((\\dot{w}_u)_i + z^* \\sqrt{(\\dot{\\boldsymbol{\\Sigma}}_u)_{, }}\\) (prediction interval upper bound). Note prediction intervals symmetric link scale generally symmetric response scale. One obtain symmetric prediction intervals response scale using delta method (Ver Hoef 2012).","code":""},{"path":"/articles/technical.html","id":"sec:predict-conf-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > predict()","what":"interval = \"confidence\"","title":"Technical Details","text":"Estimates \\((\\mathbf{X}_u)_i \\boldsymbol{\\beta}\\) (fixed effects portion model) returned link scale (type = \"link\") evaluating \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}}\\) (.e., fitted values corresponding \\((\\mathbf{X}_u)_i)\\). (100 \\(\\times\\) level)% confidence interval \\((\\mathbf{X}_u)_i \\boldsymbol{\\beta}\\) \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}} \\pm z^* \\sqrt{(\\mathbf{X}_u)_i [\\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\mathbf{X})^{-1}](\\mathbf{X}_u)_i^\\top}\\), \\((\\mathbf{X}_u)_i\\) \\(\\)th row \\(\\mathbf{X}_u\\), \\(\\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1} \\mathbf{X})^{-1}\\) standard error \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}}\\) obtained se.fit = TRUE, \\(\\Phi(z^*) = 1 - \\alpha / 2\\), \\(\\Phi(\\cdot)\\) standard normal (Gaussian) cumulative distribution function, \\(\\alpha = 1 -\\) level, level argument predict(). default level 0.95, corresponds \\(z^*\\) approximately 1.96. estimates corresponding confidence intervals returned response scale (type = \"response\") applying \\(g^{-1}(\\cdot)\\) (inverse link) \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}}\\) (estimate), \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}} - z^* \\sqrt{(\\mathbf{X}_u)_i [\\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\mathbf{X})^{-1}](\\mathbf{X}_u)_i^\\top}\\) (confidence interval lower bound), \\((\\mathbf{X}_u)_i \\hat{\\boldsymbol{\\beta}} + z^* \\sqrt{(\\mathbf{X}_u)_i [\\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\hat{\\boldsymbol{\\Sigma}}^{-1}_o \\mathbf{X})^{-1}](\\mathbf{X}_u)_i^\\top}\\) (confidence interval upper bound). Note confidence intervals symmetric link scale generally symmetric response scale. One obtain symmetric confidence intervals response scale using delta method (Ver Hoef 2012).","code":""},{"path":"/articles/technical.html","id":"sec:predict-spautor-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > predict()","what":"spgautor() extra steps","title":"Technical Details","text":"extra step required obtain \\(\\hat{\\boldsymbol{\\Sigma}}^{-1}_o\\), \\(\\hat{\\boldsymbol{\\Sigma}}_u\\), \\(\\hat{\\boldsymbol{\\Sigma}}_{uo}\\) spatial generalized autoregressive models spatial autoregressive models.","code":""},{"path":"/articles/technical.html","id":"sec:bigdata-predict-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > predict()","what":"Big Data","title":"Technical Details","text":"predict() big data spatial generalized linear models defined similarly big data spatial linear models, except \\(\\mathbf{w}\\) subset predicted (instead \\(\\mathbf{y}\\)) find \\(\\check{\\mathbf{w}}_o\\) (instead \\(\\check{\\mathbf{y}}_o\\)). standard errors required, \\(\\check{\\mathbf{G}}_o\\) also found.","code":""},{"path":"/articles/technical.html","id":"sec:pr2-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"pseudoR2()","title":"Technical Details","text":"pseudoR2() spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:residuals-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"residuals()","title":"Technical Details","text":"residuals obtained applying standard generalized linear model definitions conditioning \\(\\mathbf{w}\\). type = \"response\", response residuals returned: \\[\\begin{equation*} \\mathbf{e}_{r} = \\mathbf{y} - g^{-1}(\\mathbf{w}). \\end{equation*}\\] type = \"pearson\", Pearson residuals returned: \\[\\begin{equation*} \\mathbf{e}_{p} = \\mathbf{V}^{-1/2}\\mathbf{e}_{r}, \\end{equation*}\\] \\(\\mathbf{V}\\) diagonal matrix \\(\\)th diagonal element equal \\(\\text{Var}(w_i)\\). type = \"deviance\", deviance residuals returned: \\[\\begin{equation*} \\mathbf{e}_{d} = \\text{sign}(\\mathbf{e}_r) \\odot \\sqrt{\\text{deviance}_i}, \\end{equation*}\\] \\(\\text{deviance}_i\\) deviance \\(y_i\\) (conditional \\(w_i\\)) \\(\\odot\\) denotes Hadmard (element-wise) product. type = \"standardized\", standardized residuals returned: \\[\\begin{equation*} \\mathbf{e}_{s} = \\mathbf{e}_{d} \\odot \\frac{1}{\\sqrt{1 - diag(\\mathbf{H}_c)}}, \\end{equation*}\\] \\(diag(\\mathbf{H}_c)\\) diagonal leverage (hat) matrix conditional \\(\\mathbf{w}\\) given \\(\\mathbf{H}_c \\equiv \\mathbf{X}_v (\\mathbf{X}_v^\\top\\mathbf{X}_v)^{-1} \\mathbf{X}_v^\\top\\), \\(\\mathbf{X}_v = \\mathbf{V}^{1/2}\\mathbf{X}\\), \\(\\odot\\) denotes Hadmard (element-wise) product.","code":""},{"path":"/articles/technical.html","id":"sec:spgmod","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"spgautor() and spglm()","title":"Technical Details","text":"Many details regarding spglm() spgautor() spatial generalized linear models splm() spautor() spatial linear models, though occasional differences noted following subsection headers.","code":""},{"path":"/articles/technical.html","id":"sec:spgautor-fn","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"spgautor() Spatial Covariance Functions","title":"Technical Details","text":"Covariance functions spgautor() defined covariance functions spautor().","code":""},{"path":"/articles/technical.html","id":"sec:spglm-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"spglm() Spatial Covariance Functions","title":"Technical Details","text":"Covariance functions spglm() defined covariance functions splm().","code":""},{"path":"/articles/technical.html","id":"sec:estimation-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Model-fitting","title":"Technical Details","text":"Recall likelihood interest \\[\\begin{equation*}   \\int_\\mathbf{w} \\exp(\\ell_\\mathbf{w}) d\\mathbf{w} \\approx [\\mathbf{y} | g^{-1}(\\mathbf{}), \\varphi] [\\mathbf{} | \\mathbf{X}, \\boldsymbol{\\theta}] (2 \\pi)^{n/2} |-\\mathbf{G}_a|^{-1/2}|, \\end{equation*}\\] \\(\\mathbf{}\\) value gradient, \\(\\mathbf{g}\\), equals zero. Given \\(\\mathbf{}\\), minus twice profiled (\\(\\boldsymbol{\\beta}\\)) marginal Laplace log-likelihood given \\[\\begin{equation*}   -2\\ell_p(\\varphi, \\boldsymbol{\\theta}) = -2\\ln([\\mathbf{y} | g^{-1}(\\mathbf{}), \\varphi]) -2\\ln([\\mathbf{} | \\mathbf{X}, \\boldsymbol{\\theta}]) -n \\ln(2 \\pi) + \\ln(|- \\mathbf{G}_{\\mathbf{}}|). \\end{equation*}\\] Note \\(\\ln[\\mathbf{} | \\mathbf{X}, \\boldsymbol{\\theta}]\\) ML REML log-likelihood equations spatial linear model, respectively, now \\(\\tilde{\\boldsymbol{\\beta}} = (\\mathbf{X}^\\top \\mathbf{\\Sigma}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{\\Sigma}^{-1} \\mathbf{}\\). Assuming \\(\\mathbf{y}\\) \\(g^{-1}(\\mathbf{w})\\) conditionally independent \\(\\varphi\\) \\(\\boldsymbol{\\theta}\\) known, can shown maximizing \\(\\ell_{\\mathbf{w}}\\) (respect \\(\\mathbf{w}\\)) amounts maximizing (constant) \\[\\begin{equation*}   \\sum_{= 1}^N \\ln[y_i | w_i, \\varphi] - \\frac{1}{2}(\\mathbf{w} - \\mathbf{X} \\hat{\\boldsymbol{\\beta}})^\\top \\boldsymbol{\\Sigma}^{-1}(\\mathbf{w} - \\mathbf{X}\\hat{\\boldsymbol{\\beta}}). \\end{equation*}\\] Thus gradient \\(\\ell_{\\mathbf{w}}\\) can shown equal \\[\\begin{equation*} \\mathbf{g} = \\mathbf{d} - \\boldsymbol{\\Sigma}^{-1}\\mathbf{w} + \\boldsymbol{\\Sigma}^{-1}\\mathbf{X} \\hat{\\boldsymbol{\\beta}} = \\mathbf{d} - \\mathbf{P}\\mathbf{w}, \\end{equation*}\\] \\(d_i = \\partial \\ln[y_i | g^{-1}(w_i), \\varphi] / \\partial w_i\\) \\(\\mathbf{P} = \\boldsymbol{\\Sigma}^{-1} - \\boldsymbol{\\Sigma}^{-1} \\mathbf{X} (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1}\\). Hessian \\(\\ell_{\\mathbf{w}}\\) \\[\\begin{equation*}   \\mathbf{G} = \\mathbf{D} - \\mathbf{P}, \\end{equation*}\\] \\(D_{, } = \\partial^2 \\ln[y_i | g^{-1}(w_i), \\varphi] / \\partial w_i^2\\). Note \\(D_{, j} = 0\\) \\(\\neq j\\) conditional independence. Next Newton-Rhapson algorithm can used maximize \\(\\ell_{\\mathbf{w}}\\), update given \\[\\begin{equation*} \\mathbf{w}^{k + 1} = \\mathbf{w}^k - \\alpha \\mathbf{G}^{-1}\\mathbf{g}. \\end{equation*}\\] \\(0 < \\alpha \\leq 1\\). Typically, \\(\\alpha = 1\\), can lowered \\(\\mathbf{g}\\) unstable. Generally, Newton-Rhapson converges rapidly. value \\(\\mathbf{w}\\) convergence defined \\(\\mathbf{}\\). follows finding \\(\\varphi\\) \\(\\boldsymbol{\\theta}\\) unknown \\(\\mathbf{}\\) requires doubly-iterative algorithm. First, value \\(\\mathbf{}\\) proposed (e.g., \\(\\mathbf{} = \\mathbf{0}\\)). given \\(\\mathbf{}_0\\), Laplace log-likelihood maximized, yielding \\(\\hat{\\varphi}_0\\) \\(\\hat{\\boldsymbol{\\theta}}_0\\). given \\(\\hat{\\varphi}_0\\) \\(\\hat{\\boldsymbol{\\theta}}_0\\), \\(\\ell_{\\mathbf{w}}\\) maximized, yielding \\(\\mathbf{}_1\\). given \\(\\mathbf{}_1\\), Laplace log-likelihood maximized, yielding \\(\\hat{\\varphi}_1\\) \\(\\hat{\\boldsymbol{\\theta}}_1\\). given \\(\\hat{\\varphi}_1\\) \\(\\hat{\\boldsymbol{\\theta}}_1\\), \\(\\ell_{\\mathbf{w}}\\) maximized, yielding \\(\\mathbf{}_2\\). process continues convergence, yielding optimized values \\(\\varphi\\) \\(\\boldsymbol{\\theta}\\) , using optimized values, value \\(\\mathbf{}\\). Note Laplace approximation incorporates likelihood, result, estimation methods available via estmethod argument \"reml\" (default) \"ml\". doubly-iterative algorithm used fit spatial generalized linear models far computationally expensive fitting spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:optim-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Optimization","title":"Technical Details","text":"Optimization spglm() spgautor() works splm() spautor(), one additional step. convergence criteria \\(\\mathbf{w}\\) (within covariance parameter iteration) achieved largest absolute value \\(\\mathbf{w}_k - \\mathbf{w}_{k - 1}\\) less \\(1/10^4\\) \\(k > 50\\) (\\(k\\) indexes Newton-Rhapson iterations).","code":""},{"path":"/articles/technical.html","id":"sec:grid-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm() > Optimization","what":"Grid Search","title":"Technical Details","text":"grid search spglm() spgautor() works splm() spautor() except spglm() spgautor(), grid search initial values link scale grid search sample variance calculated regressing \\(\\ln(\\mathbf{y} + 1)\\) \\(\\mathbf{X}\\) instead \\(\\mathbf{y}\\) \\(\\mathbf{X}\\). negative binomial, beta, gamma, inverse Gaussian families, initial value dispersion parameter set one.","code":""},{"path":"/articles/technical.html","id":"sec:testing-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Hypothesis Testing","title":"Technical Details","text":"Hypothesis testing spatial generalized linear models defined spatial linear models. , hypothesis tests asymptotic z-tests based normal (Gaussian) distribution (Wald tests). null hypothesis test associated \\(\\hat{\\beta}_i\\) \\(\\beta_i = 0\\). spatial generalized linear models, \\(\\text{Cov}(\\hat{\\boldsymbol{\\beta}})\\) requires adjustment account fact \\(\\mathbf{w}\\) actually observed. First let \\(\\mathbf{B} = (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1}\\) note \\(\\hat{\\boldsymbol{\\beta}} = \\mathbf{B}\\mathbf{w}\\). Using law conditional variance conditioning \\(\\mathbf{w}\\) observed , follows \\[\\begin{equation*}   \\text{Cov}(\\mathbf{B} \\hat{\\mathbf{w}}) = \\text{E}_\\mathbf{w}[\\text{Cov}(\\mathbf{B}\\hat{\\mathbf{w}} | \\mathbf{w})] + \\text{Cov}_\\mathbf{w}[\\text{E}(\\mathbf{B}\\hat{\\mathbf{w}} | \\mathbf{w})] \\end{equation*}\\] assume \\(\\hat{\\mathbf{w}}\\) unbiased \\(\\mathbf{w}\\) (.e., \\(\\text{E}(\\hat{\\mathbf{w}} | \\mathbf{w}) = \\mathbf{w}\\)). \\(\\text{Cov}(\\text{E}(\\mathbf{B} \\hat{\\mathbf{w}} | \\mathbf{w})) = \\text{Cov}(\\mathbf{B}\\mathbf{w}) = \\mathbf{B} \\boldsymbol{\\Sigma} \\mathbf{B}^\\top\\), reduces \\((\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1}\\), usual form \\(\\text{Cov}(\\hat{\\boldsymbol{\\beta}})\\). Next note \\(\\text{Cov}(\\hat{\\mathbf{w}} | \\mathbf{w})\\) can viewed inverse observed Fisher Information, \\(-\\mathbf{G}^{-1}\\), depends \\(\\mathbf{w}\\) diagonal elements \\(\\mathbf{D}\\). Evaluating \\(-\\mathbf{G}\\) \\(\\mathbf{}\\) yields adjusted covariance matrix \\(\\hat{\\boldsymbol{\\beta}}\\) given \\[\\begin{equation*}   \\text{Cov}(\\hat{\\boldsymbol{\\beta}}) = \\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1} . \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:random-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Random Effects (spglm() only)","title":"Technical Details","text":"Random effects spatial generalized linear models defined spatial linear models. Note random effects spatial generalized linear models link scale.","code":""},{"path":"/articles/technical.html","id":"sec:anisotropy-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Anisotropy (spglm() only)","title":"Technical Details","text":"Anisotropy spatial generalized linear models defined spatial linear models. Note anisotropy parameters spatial generalized linear models link scale.","code":""},{"path":"/articles/technical.html","id":"sec:partition-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Partition Factors","title":"Technical Details","text":"Partition factors spatial generalized linear models defined spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:bigdata-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > spgautor() and spglm()","what":"Big Data (spglm() only)","title":"Technical Details","text":"Big data model-fitting spatial generalized linear models many ways spatial linear models. local argument behaves spatial generalized linear models spatial linear models. fundamentally, “local” spatial indexing (SPIN) approach representing \\(\\boldsymbol{\\Sigma}\\) blockwise still applied serves basis massive computational gains fitting spatial generalized linear models (Ver Hoef, Dumelle, et al. 2023). additional step required fit big data spatial generalized linear models involves efficiently manipulating Hessian, \\(\\mathbf{G}\\), obtain inverse log determinant. providing details, review Sherman-Morrison-Woodbury (SMW) formula (Sherman 1949; Sherman Morrison 1950; Woodbury 1950). SMW formula states \\(n \\times n\\) matrix \\(\\mathbf{}\\), \\(n \\times k\\) matrix \\(\\mathbf{U}\\), \\(k \\times k\\) matrix \\(\\mathbf{C}\\), \\(k \\times n\\) matrix \\(\\mathbf{V}\\), \\[\\begin{equation*}   (\\mathbf{} + \\mathbf{U} \\mathbf{C} \\mathbf{V})^{-1} = \\mathbf{}^{-1} - \\mathbf{}^{-1} \\mathbf{U} (\\mathbf{C}^{-1} + \\mathbf{V}\\mathbf{}^{-1}\\mathbf{U})^{-1} \\mathbf{V} \\mathbf{}^{-1} \\end{equation*}\\] \\[\\begin{equation*}   |\\mathbf{} + \\mathbf{U} \\mathbf{C} \\mathbf{V}| = |\\mathbf{}||\\mathbf{C}||\\mathbf{C}^{-1} + \\mathbf{V}\\mathbf{}^{-1}\\mathbf{U}|. \\end{equation*}\\] determinant result implies \\[\\begin{equation*}   \\ln|\\mathbf{} + \\mathbf{U} \\mathbf{C} \\mathbf{V}| = \\ln|\\mathbf{}| + \\ln|\\mathbf{C}| + \\ln|\\mathbf{C}^{-1} + \\mathbf{V}\\mathbf{}^{-1}\\mathbf{U}|. \\end{equation*}\\] SMW formula important inverse log determinant \\(\\mathbf{}\\) efficient compute \\(k << n\\), inverse log determinant desired sum can also efficient compute. except \\(\\mathbf{}^{-1}\\) \\(\\mathbf{||}\\), SMW formula requires finding \\(k \\times k\\) inverses log determinants. Recall Hessian can written \\[\\begin{equation*}   \\mathbf{G} = \\mathbf{D} - \\boldsymbol{\\Sigma}^{-1} + \\boldsymbol{\\Sigma}^{-1} \\mathbf{X} (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1} \\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1}, \\end{equation*}\\] \\(\\boldsymbol{\\Sigma}\\) can represented blockwise, \\(\\boldsymbol{\\Sigma}^{-1}\\) can represented blockwise thus inverse log determinant can efficiently computed. \\(\\mathbf{D}\\) diagonal, \\(\\mathbf{D} - \\boldsymbol{\\Sigma}^{-1}\\) can represented blockwise thus inverse log determinant can efficiently computed. SMW formula can used, taking \\(\\mathbf{} = \\mathbf{D} - \\boldsymbol{\\Sigma}^{-1}\\), \\(\\mathbf{U} = \\boldsymbol{\\Sigma}^{-1} \\mathbf{X}\\), \\(\\mathbf{C} = (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1}\\), \\(\\mathbf{V} = \\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1}\\). previously mentioned, fitting big data spatial generalized linear models requires doubly-iterative algorithm. makes far computationally expensive fitting big data spatial linear models.","code":""},{"path":"/articles/technical.html","id":"sec:sim-fns","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Simulation Functions (sprpois(), sprnbinom(), sprbinom(), sprbeta(), sprgamma(), sprinvgauss())","title":"Technical Details","text":"Poisson, negative binomial, binomial, beta, gamma, inverse Gaussian random variables can simulated using sprpois(), sprnbinom(), sprbinom(), sprbeta(), sprgamma(), sprinvgauss(), respectively. functions work similarly. First, relevant arguments passed sprnorm() simulate \\(\\mathbf{w}\\) link scale. using \\(\\mathbf{w}\\) dispersion parameter (required), relevant generalized linear model random variables simulated independently \\(w_i\\). Note dispersion parameter required sprpois() sprbinom().","code":""},{"path":"/articles/technical.html","id":"sec:vcov-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"vcov()","title":"Technical Details","text":"corrected variance-covariance matrix fixed effects (var_correct = TRUE) given \\(\\mathbf{B} (-\\mathbf{G}_a)^{-1} \\mathbf{B}^\\top + (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1}\\). uncorrected variance-covariance matrix (var_correct = FALSE) given \\(\\text{Cov}(\\hat{\\boldsymbol{\\beta}}) = (\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X})^{-1}\\).","code":""},{"path":"/articles/technical.html","id":"sec:distributions-glm","dir":"Articles","previous_headings":"Spatial Generalized Linear Models","what":"Distribution Parameterizations","title":"Technical Details","text":"provide definitions associated six generalized linear models families available spmodel. Note poisson, binomial, gamma, inverse Gaussian distributions members exponential family, deviance typically expressed twice difference log-likelihoods saturated fitted model times dispersion parameter (consistent glm()). negative binomial beta distributions members exponential family dispersion parameter (\\(\\varphi\\)) known, deviance typically expressed just twice difference log-likelihoods saturated fitted model (consistent glm.nb() MASS (Venables Ripley 2002) negative binomial regression betareg() betareg (Cribari-Neto Zeileis 2010) beta regression).","code":""},{"path":"/articles/technical.html","id":"sec:poisson","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Poisson Distribution","title":"Technical Details","text":"Poisson distribution defined \\[\\begin{equation*}   f(y | \\mu) = \\frac{\\mu^y \\exp(-\\mu)}{y!}, \\end{equation*}\\] \\(y\\) non-negative integer, \\(\\mu > 0\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu) = y \\ln(\\mu) - \\mu - \\ln(y!). \\end{equation*}\\] Using inverse log link writing terms \\(\\mu = \\exp(w)\\), log-likelihood can written \\[\\begin{equation*}   \\ln f(y | \\mu) = yw - \\exp(w) - \\ln(y!). \\end{equation*}\\] derivative Poisson distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d}{d w} \\ln f(y | \\mu) = y - \\exp(w). \\end{equation*}\\] second derivative Poisson distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\exp(w). \\end{equation*}\\] Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = \\sum_i y_i \\ln(y_i) - y_i - \\ln(y_i!). \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\sum_i y_i \\ln(\\hat{\\mu}_i) - \\hat{\\mu}_i - \\ln(y_i!). \\end{equation*}\\] Thus deviance \\[\\begin{equation*}   2 \\sum_i y_i log(y_i / \\hat{\\mu}_i) - (y_i - \\hat{\\mu}_i). \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:nbinomial","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Negative Binomial Distribution","title":"Technical Details","text":"negative binomial distribution defined \\[\\begin{equation*}   f(y | \\mu, \\varphi) = \\frac{\\Gamma(y + \\varphi)}{\\Gamma(\\varphi) y!} \\left( \\frac{\\mu}{\\mu + \\varphi} \\right)^y \\left( \\frac{\\varphi}{\\mu + \\varphi} \\right)^\\varphi, \\end{equation*}\\] \\(y\\) non-negative integer, \\(\\mu > 0\\), \\(\\varphi > 0\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu + \\frac{\\mu^2}{\\varphi}\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu, \\varphi) = \\ln(\\Gamma(y + \\varphi)) - \\ln(\\Gamma(\\varphi)) - \\ln(y!) + y \\ln(\\mu) - y \\ln(\\mu + \\varphi) + \\varphi \\ln(\\varphi) - \\varphi \\ln(\\mu + \\varphi). \\end{equation*}\\] Using inverse log link writing terms \\(\\mu = \\exp(w)\\), log-likelihood can written \\[\\begin{equation*}   \\ln f(y | \\mu) = \\ln(\\Gamma(y + \\varphi)) - \\ln(\\Gamma(\\varphi)) - \\ln(y!) + y [w - \\ln(\\exp(w) + \\varphi)] + \\varphi [\\ln(\\varphi) - \\ln(\\exp(w) + \\varphi)]. \\end{equation*}\\] derivative negative binomial distribution respect \\(w\\) \\[\\begin{equation*} \\begin{split}   \\frac{d}{d w} \\ln f(y | \\mu) & = y\\left(1 - \\frac{\\exp(w)}{\\exp(w) + \\varphi}\\right) + \\varphi \\left(- \\frac{\\exp(w)}{\\exp(w) + \\varphi} \\right) \\\\   & = \\frac{y\\varphi}{\\exp(w) + \\varphi} - \\frac{\\varphi \\exp(w)}{\\exp(w) + \\varphi} \\\\   & =  \\frac{\\varphi (y - \\exp(w))}{\\exp(w) + \\varphi}. \\end{split} \\end{equation*}\\] second derivative negative binomial distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\frac{\\varphi \\exp(w) (y + \\varphi)}{(\\varphi + \\exp(w))^2} \\end{equation*}\\] Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = \\sum_i \\ln(\\Gamma(y_i + \\varphi)) - \\ln(\\Gamma(\\varphi)) - \\ln(y_i!) + y_i \\ln(y_i) - y_i \\ln(y_i + \\varphi) + \\varphi \\ln(\\varphi) - \\varphi \\ln(y_i + \\varphi). \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\sum_i \\ln(\\Gamma(y_i + \\varphi)) - \\ln(\\Gamma(\\varphi)) - \\ln(y_i!) + y_i \\ln(\\hat{\\mu}_i) - y_i \\ln(\\hat{\\mu}_i + \\varphi) + \\varphi \\ln(\\varphi) - \\varphi \\ln(\\hat{\\mu}_i + \\varphi). \\end{equation*}\\] Thus deviance \\[\\begin{equation*}   2 \\sum_i y_i [\\ln(y_i) - \\ln(y_i + \\varphi) - \\ln(\\hat{\\mu}_i) + \\ln(\\hat{\\mu}_i + \\varphi)] + \\varphi [ - \\ln(y_i + \\varphi) + \\ln(\\hat{\\mu}_i + \\varphi)]. \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:binomial","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Binomial Distribution","title":"Technical Details","text":"binomial distribution defined \\[\\begin{equation*}   f(y | \\mu, m) = \\binom{m}{y} \\mu^y (1 - \\mu)^{m - y}, \\end{equation*}\\] \\(m\\) (known) number Bernoulli trials, \\(y\\) non-negative integer, \\(0 \\le \\mu \\le 1\\), \\(\\text{E}(y) = m\\mu\\), \\(\\text{Var}(y) = m\\mu (1 - \\mu)\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu) = \\ln \\left[ \\binom{m}{y} \\right] + y \\ln(\\mu) + (m - y) \\ln(1 - \\mu). \\end{equation*}\\] Using inverse logit link writing terms \\(\\mu = \\exp(w) / (1 + \\exp(w))\\), log-likelihood can written \\[\\begin{equation*}   \\ln f(y | \\mu) = \\ln \\left[ \\binom{m}{y} \\right] + y \\ln(\\exp(w) / (1 + \\exp(w))) + (m - y) \\ln(1 - \\exp(w) / (1 + \\exp(w))). \\end{equation*}\\] derivative binomial distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d}{d w} \\ln f(y | \\mu) = y - \\frac{m \\exp(w)}{1 + \\exp(w)} \\end{equation*}\\] second derivative binomial distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\frac{m \\exp(w)}{(1 + \\exp(w))^2}. \\end{equation*}\\] Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = \\sum_i \\ln \\left[ \\binom{m_i}{y_i} \\right] + y_i \\ln(y_i) + (m_i - y_i) \\ln(m_i - y_i). \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\sum_i \\ln \\left[ \\binom{m_i}{y_i} \\right] + y_i \\ln(m_i\\hat{\\mu}_i) + (m_i - y_i) \\ln(m_i - m_i \\hat{\\mu}_i). \\end{equation*}\\] Thus deviance \\[\\begin{equation*}   2 \\sum_i y_i[ \\ln(y_i) - \\ln(m_i \\hat{\\mu}_i)] + (m_i - y_i)[ \\ln(m_i - y_i) - \\ln(m_i - m_i \\hat{\\mu}_i) ] \\end{equation*}\\]","code":""},{"path":"/articles/technical.html","id":"sec:beta","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Beta Distribution","title":"Technical Details","text":"beta distribution defined \\[\\begin{equation*}   f(y | \\mu, \\varphi) = \\frac{\\Gamma(\\varphi)}{\\Gamma(\\mu \\varphi) \\Gamma((1 - \\mu)\\varphi)} y^{\\mu \\varphi - 1} (1 - y)^{(1 - \\mu)\\varphi - 1}, \\end{equation*}\\] \\(0 < y < 1\\), \\(0 < \\mu < 1\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu (1 - \\mu) / (1 + \\varphi)\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu) = \\ln(\\Gamma(\\varphi)) - \\ln(\\Gamma(\\mu \\varphi)) - \\ln(\\Gamma((1 - \\mu)\\varphi)) +  (\\mu \\varphi - 1) \\ln(y) + ((1 - \\mu)\\varphi - 1) \\ln(1 - y). \\end{equation*}\\] Using inverse logit link writing terms \\(\\mu = \\exp(w)\\), log-likelihood can written \\[\\begin{equation*} \\begin{split}   \\ln f(y | \\mu, \\varphi) & = \\ln(\\Gamma(\\varphi)) - \\ln(\\Gamma(\\frac{\\exp(w)}{1 + \\exp(w)} \\varphi)) - \\ln(\\Gamma((1 - \\frac{\\exp(w)}{1 + \\exp(w)})\\varphi)) \\\\   & +  (\\frac{\\exp(w)}{1 + \\exp(w)} \\varphi - 1) \\ln(y) + ((1 - \\frac{\\exp(w)}{1 + \\exp(w)})\\varphi - 1) \\ln(1 - y). \\end{split} \\end{equation*}\\] can shown derivative beta distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d}{d w} \\ln f(y | \\mu) = - \\frac{\\varphi \\exp(w) k_0(w | y, \\varphi)}{(1 + \\exp(w))^2}, \\end{equation*}\\] \\(k_0(w | y, \\varphi) = \\psi^{(0)}(\\frac{\\varphi \\exp(w)}{1 + \\exp(w)}) - \\psi^{(0)}(\\frac{\\varphi}{1 + \\exp(w)}) + \\ln( \\frac{1}{y} - 1)\\) \\(\\psi^{(0)}\\) \\(0th\\) derivative digamma function. can shown second derivative beta distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\frac{\\varphi \\exp(2w) k_1(w | y, \\varphi)}{(1 + \\exp(w))^4}, \\end{equation*}\\] \\(k_1(w | y, \\varphi) = \\varphi [\\psi^{(1)}(\\frac{\\varphi \\exp(w)}{1 + \\exp(w)}) + \\psi^{(1)}( \\frac{\\varphi}{1 + \\exp(w)})] - 2\\sinh(w)[k_0(w | y, \\varphi) + 2\\tanh^{-1}(1 - 2y)]\\) \\(\\psi^{(n)}\\) \\(nth\\) derivative digamma function. Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = \\sum_i \\ln(\\Gamma(\\varphi)) - \\ln(\\Gamma(y_i \\varphi)) - \\ln(\\Gamma((1 - y_i)\\varphi)) +  (y_i \\varphi - 1) \\ln(y_i) + ((1 - y_i)\\varphi - 1) \\ln(1 - y_i). \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\ln(\\Gamma(\\varphi)) - \\ln(\\Gamma(\\hat{\\mu}_i \\varphi)) - \\ln(\\Gamma((1 - \\hat{\\mu}_i)\\varphi)) +  (\\hat{\\mu}_i \\varphi - 1) \\ln(y_i) + ((1 - \\hat{\\mu}_i)\\varphi - 1) \\ln(1 - y_i). \\end{equation*}\\] Thus deviance \\[\\begin{equation*}   2 \\sum_i - \\ln(\\Gamma(y_i \\varphi)) - \\ln(\\Gamma((1 - y_i) \\varphi )) + \\ln(\\Gamma(\\hat{\\mu}_i \\varphi)) + \\ln(\\Gamma((1 - \\hat{\\mu}_i) \\varphi )) + (y_i - \\hat{\\mu}_i) \\varphi \\ln(y_i) + (\\hat{\\mu}_i - y_i) \\varphi \\ln(1 - y_i) \\end{equation*}\\] Sometimes deviance contribution \\(\\)th observation can computationally unstable yield negative value (Espinheira, Ferrari, Cribari-Neto 2008). can happen, example, \\(y_i\\) close zero one. happens, deviance contribution truncated zero reflect fact theoretical deviance contribution must non-negative.","code":""},{"path":"/articles/technical.html","id":"sec:gamma","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Gamma Distribution","title":"Technical Details","text":"gamma distribution defined \\[\\begin{equation*}   f(y | \\mu, \\varphi) = \\frac{1}{\\Gamma(\\varphi)} \\left( \\frac{\\varphi}{\\mu} \\right)^\\varphi y^{\\varphi - 1} \\exp(\\frac{-y \\varphi}{\\mu}), \\end{equation*}\\] \\(y > 0\\), \\(\\mu > 0\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu^2/\\varphi\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu) = - \\ln(\\Gamma(\\varphi)) + \\varphi [\\ln(\\varphi) - \\ln(\\mu)] + (\\varphi - 1) \\ln(y) - \\frac{y \\varphi}{\\mu}. \\end{equation*}\\] Using inverse log link writing terms \\(\\mu = \\exp(w)\\), log-likelihood can written \\[\\begin{equation*}   \\ln f(y | \\mu) = - \\ln(\\Gamma(\\varphi)) \\varphi [\\ln(\\varphi) - w] + (\\varphi - 1) \\ln(y) - \\frac{y \\varphi}{\\exp(w)}. \\end{equation*}\\] derivative gamma distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d}{d w} \\ln f(y | \\mu) = -\\varphi + \\frac{\\varphi y}{\\exp(w)}. \\end{equation*}\\] second derivative gamma distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\frac{\\varphi y}{\\exp(w)}. \\end{equation*}\\] Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = - \\ln(\\Gamma(\\varphi)) + \\varphi [\\ln(\\varphi) - \\ln(y_i)] + (\\varphi - 1) \\ln(y_i) - \\frac{y_i \\varphi}{y_i}. \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\sum_i y_i - \\ln(\\Gamma(\\varphi)) + \\varphi [\\ln(\\varphi) - \\ln(\\hat{\\mu}_i)] + (\\varphi - 1) \\ln(y_i) - \\frac{y_i \\varphi}{\\hat{\\mu}_i}. \\end{equation*}\\] Thus deviance \\[\\begin{equation*}   2 \\sum_i - \\ln(\\frac{y}{\\hat{\\mu}_i}) + \\frac{y - \\hat{\\mu}_i}{\\hat{\\mu}_i} \\end{equation*}\\] scaling \\(\\varphi\\).","code":""},{"path":"/articles/technical.html","id":"sec:invgauss","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Inverse Gaussian Distribution","title":"Technical Details","text":"inverse Gaussian distribution defined \\[\\begin{equation*}   f(y | \\mu, \\varphi) = \\sqrt{\\frac{\\varphi \\mu}{2 \\pi y^3}} \\exp \\left( - \\frac{\\varphi (y - \\mu^2)}{2 \\mu y} \\right), \\end{equation*}\\] \\(y > 0\\), \\(\\mu > 0\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu^2/\\varphi\\). log-likelihood (single observation) defined \\[\\begin{equation*}   \\ln f(y | \\mu) = \\frac{1}{2}[\\ln(\\varphi / 2 \\pi y^3)  + \\ln(\\mu)] - \\varphi \\frac{(y - \\mu)^2}{2 \\mu y}. \\end{equation*}\\] Using inverse log link writing terms \\(\\mu = \\exp(w)\\), log-likelihood can written \\[\\begin{equation*}   \\ln f(y | \\mu) = \\frac{1}{2}[\\ln(\\varphi / 2 \\pi y^3)  + w] - \\varphi \\frac{(y - \\exp(w))^2}{2 \\exp(w) y}. \\end{equation*}\\] derivative gamma distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d}{d w} \\ln f(y | \\mu) = \\varphi \\left( \\frac{y}{2 \\exp(w)} - \\frac{\\exp(w)}{2y} \\right) + \\frac{1}{2}. \\end{equation*}\\] second derivative gamma distribution respect \\(w\\) \\[\\begin{equation*}   \\frac{d^2}{d w^2} \\ln f(y | \\mu) = - \\frac{\\varphi(\\exp(2w) + y^2)}{2y\\exp(w)}. \\end{equation*}\\] Note typical parameterization inverse Gaussian distribution. typical parameterization inverse Gaussian distribution \\[\\begin{equation*} f(y | \\mu, \\lambda) = \\sqrt{\\frac{\\lambda}{2 \\pi y^3}} \\exp \\left( - \\frac{\\lambda(y - \\mu)^2}{2u^2y} \\right), \\end{equation*}\\] \\(y > 0\\), \\(\\mu > 0\\), \\(\\text{E}(y) = \\mu\\), \\(\\text{Var}(y) = \\mu^3/\\lambda\\), \\(\\lambda = \\mu \\varphi\\). Twice log-likelihood saturated model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\boldsymbol{\\mu}_s) = \\frac{1}{2} \\left( \\frac{\\lambda}{2 \\pi y_i^3} \\right) \\end{equation*}\\] Twice log-likelihood fitted (observed) model \\[\\begin{equation*}   2 \\ln f(\\mathbf{y} | \\hat{\\boldsymbol{\\mu}}) = \\frac{1}{2} \\left( \\frac{\\lambda}{2 \\pi y_i^3} \\right) - \\frac{\\lambda (y_i - \\hat{\\mu}_i)^2}{2 \\hat{\\mu}_i^2 y_i}. \\end{equation*}\\] Thus deviance \\[\\begin{equation*} \\sum_i (y_i - \\hat{\\mu}_i)^2 / (\\hat{\\mu}_i^2 y_i), \\end{equation*}\\] scaling \\(\\lambda\\).","code":""},{"path":"/articles/technical.html","id":"sec:di_and_Di","dir":"Articles","previous_headings":"Spatial Generalized Linear Models > Distribution Parameterizations","what":"Table of Inverse Link Functions, \\(d_i\\), and \\(D_{i, i}\\)","title":"Technical Details","text":"following table contains table inverse link functions, \\(d_i\\), \\(D_{, }\\) spatial generalized linear model family. See details family previous subsections. table inverse link functions relevant quantities spatial generalized linear model family.","code":""},{"path":"/articles/technical.html","id":"sec:esv","dir":"Articles","previous_headings":"","what":"The Empirical Semivariogram (esv())","title":"Technical Details","text":"empirical semivariogram moment-based estimate theoretical semivariogram. empirical semivariogram quantifies half average squared difference response among observations several distance classes. formally, empirical semivariogram defined \\[\\begin{equation}\\label{eq:esv}   \\hat{\\gamma}(h) = \\frac{1}{2|N(h)|} \\sum_{N(h)} (y_i - y_j)^2, \\end{equation}\\] \\(N(h)\\) set observations \\(\\mathbf{y}\\) \\(h\\) distance apart (distance classes) \\(|N(h)|\\) cardinality \\(N(h)\\) (Cressie 1993). Often set \\(N(h)\\) contains observations \\(h \\pm c\\) apart, \\(c\\) constant. approach known “binning” empirical semivariogram. default spmodel construct semivariogram using 15 equally spaced bins \\(h\\) contained \\((0, h_{max}]\\), \\(h_{max}\\) known “distance cutoff”. Distance cutoffs commonly used constructing \\(\\hat{\\gamma}(h)\\) tend pairs large distances. default spmodel use cutoff half maximum distance (hypotenuse) domain’s bounding box. main purpose empirical semivariogram use semivariogram weighted least squares estimation spatial linear models, though can also used visual diagnostic assess fit spatial covariance function.","code":""},{"path":"/articles/technical.html","id":"sec:iprod","dir":"Articles","previous_headings":"","what":"A Note on Covariance Square Roots and Inverse Products","title":"Technical Details","text":"Often \\(\\boldsymbol{\\Sigma}^{-1}\\) strictly needed estimation, prediction, purposes, least product \\(\\boldsymbol{\\Sigma}^{-1}\\) matrix needed. Consider example covariance matrix \\(\\hat{\\boldsymbol{\\beta}}\\) observe \\(\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X}\\) needed. direct way find product certainly obtain \\(\\boldsymbol{\\Sigma}^{-1}\\) multiply \\(\\mathbf{X}^\\top\\) left \\(\\mathbf{X}\\) right. computationally expensive used compute products involve \\(\\boldsymbol{\\Sigma}^{-1/2}\\), often useful. helpful define \\(\\boldsymbol{\\Sigma} = \\mathbf{S} \\mathbf{S}^\\top\\) matrix \\(\\mathbf{S}\\) rewrite \\(\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X}\\) \\(\\mathbf{X}^\\top (\\mathbf{S}^\\top)^{-1} \\mathbf{S}^{-1} \\mathbf{X} = (\\mathbf{S}^{-1} \\mathbf{X})^\\top \\mathbf{S}^{-1} \\mathbf{X}\\). one computes inverse products finding \\(\\mathbf{S}\\). One way find \\(\\mathbf{S}\\) use eigendecomposition. eigendecomposition \\(\\boldsymbol{\\Sigma}\\) (real symmetric) given \\[\\begin{equation*} \\boldsymbol{\\Sigma} = \\mathbf{U} \\mathbf{D} \\mathbf{U}^\\top, \\end{equation*}\\] \\(\\mathbf{U}\\) orthogonal matrix eigenvectors \\(\\boldsymbol{\\Sigma}\\) \\(\\mathbf{D}\\) diagonal matrix eigenvalues \\(\\boldsymbol{\\Sigma}\\) diagonal. taking \\(\\mathbf{S} = \\mathbf{U}\\mathbf{D}^{1/2}\\) implies \\(\\mathbf{S}^{-1} = \\mathbf{D}^{-1/2} \\mathbf{U}^\\top\\), follows \\(\\mathbf{U}\\) orthonormal (\\(\\mathbf{U}^{-1} = \\mathbf{U}^\\top\\)) straightforward calculate \\(\\mathbf{D}^{1/2}\\) diagonal. Also notice \\(\\boldsymbol{\\Sigma}^{1/2} = \\mathbf{U} \\mathbf{D}^{1/2} \\mathbf{U}^\\top\\), \\(\\mathbf{D}^{1/2}\\) diagonal matrix square roots eigenvalues \\(\\boldsymbol{\\Sigma}\\) diagonal. result follows \\[\\begin{equation*} \\boldsymbol{\\Sigma}^{1/2}\\boldsymbol{\\Sigma}^{1/2} = \\mathbf{U} \\mathbf{D}^{1/2} \\mathbf{U}^\\top \\mathbf{U} \\mathbf{D}^{1/2} \\mathbf{U}^\\top = \\mathbf{U} \\mathbf{D}^{1/2} (\\mathbf{U}^\\top \\mathbf{U}) \\mathbf{D}^{1/2} \\mathbf{U}^\\top = \\mathbf{U} \\mathbf{D} \\mathbf{U}^\\top = \\boldsymbol{\\Sigma}. \\end{equation*}\\] eigendecomposition approach give us inverse products, also gives us \\(\\boldsymbol{\\Sigma}^{1/2}\\) \\(\\boldsymbol{\\Sigma}^{-1/2}\\). straightforward, approach less efficient Cholesky decomposition (Golub Van Loan 2013), discuss next. Cholesky decomposition decomposes \\(\\boldsymbol{\\Sigma}\\) product \\(\\mathbf{C}\\) \\(\\mathbf{C}^\\top\\) (\\(\\boldsymbol{\\Sigma} = \\mathbf{C}\\mathbf{C}^\\top\\)), \\(\\mathbf{C}\\) lower triangular matrix. Note \\(\\mathbf{C}\\) generally equal \\(\\boldsymbol{\\Sigma}^{1/2}\\). Taking \\(\\mathbf{S}\\) \\(\\mathbf{C}\\), see finding inverse products requires solving \\(\\mathbf{C}^{-1}\\mathbf{X}\\). Observe \\(\\mathbf{C}^{-1}\\mathbf{X} = \\mathbf{}\\) matrix \\(\\mathbf{}\\). implies \\(\\mathbf{X} = \\mathbf{C}\\mathbf{}\\), \\(\\mathbf{}\\) can efficiently solved using forward substitution \\(\\mathbf{C}\\) lower triangular. products document involve \\(\\boldsymbol{\\Sigma}^{1/2}\\) \\(\\boldsymbol{\\Sigma}^{-1}\\) generally implemented spmodel using \\(\\mathbf{C}\\) \\(\\mathbf{C}^{-1}\\). products document involve \\(\\boldsymbol{\\Sigma}^{-1/2}\\) still rely eigendecomposition (recall generally, \\(\\mathbf{C}^{-1} \\mathbf{} \\neq \\boldsymbol{\\Sigma}^{-1/2} \\mathbf{}\\)). example computing Pearson residuals.","code":""},{"path":"/articles/technical.html","id":"sec:computational","dir":"Articles","previous_headings":"","what":"A Note on Computational Stability","title":"Technical Details","text":"Spatial covariance matrices approximately independent error variance (\\(\\sigma^2_{ie}\\)) can unstable inverses. occurs, small value can added diagonal covariance matrix (via updating \\(\\sigma^2_{ie}\\)) impose computational stability. spmodel, \\(\\sigma^2_{ie}\\) approximately zero, small amount added diagonal covariance matrix. Specifically, spatial linear models, \\(\\sigma^2_{ie, } = \\text{max}(\\sigma^2_{ie}, \\sigma^2_{de}/10^4)\\), \\(\\sigma^2_{ie, }\\) denotes “updated” version \\(\\sigma^2_{ie}\\). spatial generalized linear models, \\(\\sigma^2_{ie, } = \\text{max}(\\sigma^2_{ie}, \\sigma^2_{de}/10^4, d)\\), \\(d = \\text{max}(1/10^4, s^2/10^4)\\), \\(s^2\\) sample variance linear regression \\(\\ln(\\mathbf{y} + 1)\\) \\(\\mathbf{X}\\). value \\(\\sigma^2_{ie, }\\) also added diagonal \\(\\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} \\mathbf{X} + \\mathbf{X}^\\top \\boldsymbol{\\Sigma}^{-1} (\\mathbf{D} - \\boldsymbol{\\Sigma}^{-1})^{-1} \\boldsymbol{\\Sigma}^{-1} \\mathbf{X}\\), used via Sherman-Morrison-Woodbury formula required efficiently find log determinant inverse Hessian, \\(\\mathbf{G}\\), using spatial indexing big data. stability spatial covariance matrices, see Diamond Armstrong (1984), Posa (1989), O’Dowd (1991), Ababou, Bagtzoglou, Wood (1994), Booker et al. (1999), Martin Simpson (2005), Bivand, Pebesma, Gomez-Rubio (2013), Ver Hoef (2018), among others.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Dumelle. Author, maintainer. Matt Higham. Author. Jay M. Ver Hoef. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical modeling prediction R. PLOS ONE 18(3): e0282524. https://doi.org/10.1371/journal.pone.0282524","code":"@Article{,   title = {{spmodel}: Spatial statistical modeling and prediction in {R}},   author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}},   journal = {PLOS ONE},   year = {2023},   volume = {18},   number = {3},   pages = {1--32},   doi = {10.1371/journal.pone.0282524},   url = {https://doi.org/10.1371/journal.pone.0282524}, }"},{"path":"/index.html","id":"spmodel-spatial-statistical-modeling-and-prediction","dir":"","previous_headings":"","what":"Spatial Statistical Modeling and Prediction","title":"Spatial Statistical Modeling and Prediction","text":"spmodel R package used fit, summarize, predict variety spatial statistical models. Parameters estimated using various methods, including likelihood-based optimization weighted least squares based variograms. Additional modeling features include anisotropy, non-spatial random effects, partition factors, big data approaches, . Model-fit statistics used summarize, visualize, compare models. Predictions unobserved locations readily obtainable. Visit website https://usepa.github.io/spmodel/.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Statistical Modeling and Prediction","text":"Install load recent approved version CRAN running Install load recent development version ofspmodel GitHub running Install recent development version spmodel GitHub package vignettes running View introductory vignette RStudio running several vignettes shipped CRAN available website (located https://usepa.github.io/spmodel/) “Articles” tab: Detailed Guide spmodel Spatial Generalized Linear Models spmodel Technical Details detail regarding spmodel contained package’s documentation manual.","code":"# install the most recent approved version from CRAN install.packages(\"spmodel\") # load the most recent approved version from CRAN library(spmodel) # Installing from GitHub requires you first install the remotes package install.packages(\"remotes\")  # install the most recent development version from GitHub remotes::install_github(\"USEPA/spmodel\", ref = \"main\") # load the most recent development version from GitHub library(spmodel) install the most recent development version from GitHub with package vignettes devtools::install_github(\"USEPA/spmodel\", ref = \"main\", build_vignettes=TRUE) vignette(\"introduction\", \"spmodel\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatial Statistical Modeling and Prediction","text":"use spmodel formal publication report, please cite . Citing spmodel lets us devote resources future. View spmodel citation running","code":"citation(package = \"spmodel\") #>  #> To cite spmodel in publications use: #>  #>   Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical modeling and prediction in R. PLOS ONE, 18(3): e0282524. #>   https://doi.org/10.1371/journal.pone.0282524 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {{spmodel}: Spatial statistical modeling and prediction in {R}}, #>     author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}}, #>     journal = {PLOS ONE}, #>     year = {2023}, #>     volume = {18}, #>     number = {3}, #>     pages = {1--32}, #>     doi = {10.1371/journal.pone.0282524}, #>     url = {https://doi.org/10.1371/journal.pone.0282524}, #>   }"},{"path":"/index.html","id":"package-contributions","dir":"","previous_headings":"","what":"Package Contributions","title":"Spatial Statistical Modeling and Prediction","text":"encourage users submit GitHub issues enhancement requests may continue improve spmodel.","code":""},{"path":"/index.html","id":"epa-disclaimer","dir":"","previous_headings":"","what":"EPA Disclaimer","title":"Spatial Statistical Modeling and Prediction","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity , confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"EPA Disclaimer","what":"License","title":"Spatial Statistical Modeling and Prediction","text":"project licensed GNU General Public License, GPL-3.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/AIC.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute AIC and AICc of fitted model objects — AIC.spmod","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"Compute AIC AICc one several fitted model objects log-likelihood value can obtained.","code":""},{"path":"/reference/AIC.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"","code":"# S3 method for spmod AIC(object, ..., k = 2)  AICc(object, ..., k = 2)  # S3 method for spmod AICc(object, ..., k = 2)"},{"path":"/reference/AIC.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"object fitted model object splm() spautor() estmethod \"ml\" \"reml\". ... Optionally fitted model objects. k penalty parameter, taken 2. Currently allowed differ 2 (needed generic consistency).","code":""},{"path":"/reference/AIC.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"just one object provided, numeric value corresponding AIC AICc. multiple objects provided, data.frame rows corresponding objects columns representing number parameters estimated (df) AIC AICc.","code":""},{"path":"/reference/AIC.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"comparing models fit maximum restricted maximum likelihood, smaller AIC AICc, better fit. AICc contains correction AIC small sample sizes. theory AIC AICc requires log-likelihood maximized, hence, AIC AICc methods exist models estmethod \"ml\" \"reml\". Additionally, AIC AICc comparisons \"ml\" \"reml\" models meaningless -- comparisons made within set models estimated using \"ml\" set models estimated using \"reml\". AIC AICc comparisons \"reml\" must use fixed effects. vary covariance parameters fixed effects simultaneously, use \"ml\". Hoeting et al. (2006) defines spatial AIC \\(-2loglik + 2(estparams)\\) spatial AICc \\(-2loglik + 2n(estparams) / (n - estparams - 1)\\), \\(n\\) sample size \\(estparams\\) number estimated parameters. \"ml\", \\(estparams\\) number estimated covariance parameters plus number estimated fixed effects. \"reml\", \\(estparams\\) number estimated covariance parameters.","code":""},{"path":"/reference/AIC.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute AIC and AICc of fitted model objects — AIC.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) AIC(spmod) #> [1] 0.1501516 AICc(spmod) #> [1] 1.073229"},{"path":"/reference/AIC.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute AIC and AICc of fitted model objects — AIC.spmodel","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"Compute AIC AICc one several fitted model objects log-likelihood value can obtained.","code":""},{"path":"/reference/AIC.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"","code":"# S3 method for splm AIC(object, ..., k = 2)  # S3 method for spautor AIC(object, ..., k = 2)  # S3 method for spglm AIC(object, ..., k = 2)  # S3 method for spgautor AIC(object, ..., k = 2)  AICc(object, ..., k = 2)  # S3 method for splm AICc(object, ..., k = 2)  # S3 method for spautor AICc(object, ..., k = 2)  # S3 method for spglm AICc(object, ..., k = 2)  # S3 method for spgautor AICc(object, ..., k = 2)"},{"path":"/reference/AIC.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor() estmethod \"ml\" \"reml\". ... Optionally fitted model objects. k penalty parameter, taken 2. Currently allowed differ 2 (needed generic consistency).","code":""},{"path":"/reference/AIC.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"just one object provided, numeric value corresponding AIC AICc. multiple objects provided, data.frame rows corresponding objects columns representing number parameters estimated (df) AIC AICc.","code":""},{"path":"/reference/AIC.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"comparing models fit maximum restricted maximum likelihood, smaller AIC AICc, better fit. AICc contains correction AIC small sample sizes. theory AIC AICc requires log-likelihood maximized, hence, AIC AICc methods exist models estmethod \"ml\" \"reml\". Additionally, AIC AICc comparisons \"ml\" \"reml\" models meaningless -- comparisons made within set models estimated using \"ml\" set models estimated using \"reml\". AIC AICc comparisons \"reml\" must use fixed effects. vary covariance parameters fixed effects simultaneously, use \"ml\". Hoeting et al. (2006) defines spatial AIC \\(-2loglik + 2(estparams)\\) spatial AICc \\(-2loglik + 2n(estparams) / (n - estparams - 1)\\), \\(n\\) sample size \\(estparams\\) number estimated parameters. \"ml\", \\(estparams\\) number estimated covariance parameters plus number estimated fixed effects. \"reml\", \\(estparams\\) number estimated covariance parameters.","code":""},{"path":"/reference/AIC.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute AIC and AICc of fitted model objects — AIC.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) AIC(spmod) #> [1] 0.1501516 AICc(spmod) #> [1] 1.073229"},{"path":"/reference/anova.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"Compute analysis variance tables fitted model object likelihood ratio test two fitted model objects.","code":""},{"path":"/reference/anova.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"","code":"# S3 method for spmod anova(object, ..., test = TRUE, Terms, L)  # S3 method for anova.spmod tidy(x, ...)"},{"path":"/reference/anova.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"object fitted model object splm() spautor() ... additional fitted model object splm() spautor() (anova()). test logical value indicating whether p-values asymptotic Chi-squared hypothesis tests returned. Defaults TRUE. Terms optional character integer vector specifies terms model used jointly compute test statistics p-values (test = TRUE) null hypothesis zero. Terms used single fitted model object passed function. Terms character vector, contain names fixed effect terms. Terms integer vector, correspond order (starting one) names fixed effect terms. easiest way obtain names possible terms run tidy(anova(object))$effects (integer representation matches positions vector). L optional numeric matrix list specifying linear combinations coefficients model used compute test statistics p-values (test = TRUE) coefficient constraints corresponding null hypothesis zero. L used single fitted model object passed function. L numeric matrix, rows indicate coefficient constraints columns represent coefficients. single hypothesis test conducted null hypothesis zero. L list, list element numeric matrix specified . separate hypothesis tests conducted. easiest way obtain possible coefficients run tidy(object)$term. x object anova(object).","code":""},{"path":"/reference/anova.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"one fitted model object present, anova() returns data frame degrees freedom (Df), test statistics (Chi2), p-values (Pr(>Chi2) test = TRUE) corresponding asymptotic Chi-squared hypothesis tests model term. two fitted model objects present, anova() returns data frame difference degrees freedom full reduced model (Df), test statistic (Chi2), p-value corresponding likelihood ratio test (Pr(>Chi2) test = TRUE). Whether one two fitted model objects provided, tidy() can used obtain tidy tibbles anova(object) output.","code":""},{"path":"/reference/anova.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"one fitted model object present, anova() performs general linear hypothesis test corresponding hypothesis specified matrix constraints. Terms L specified, model term tested zero (correspond type III marginal hypothesis tests classical ANOVA). Terms specified L specified, terms tested jointly zero. L specified, linear combinations terms specified L jointly tested zero. two fitted model objects present, one must \"reduced\" model nested \"full\" model. anova() performs likelihood ratio test.","code":""},{"path":"/reference/anova.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmod","text":"","code":"# one-model anova spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) anova(spmod) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 tidy(anova(spmod)) #> # A tibble: 3 x 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 (Intercept)     1     43.5  4.33e-11 #> 2 water           1      1.66 1.98e- 1 #> 3 tarp            2     15.4  4.51e- 4 # see terms tidy(anova(spmod))$effects #> [1] \"(Intercept)\" \"water\"       \"tarp\"        tidy(anova(spmod, Terms = c(\"water\", \"tarp\"))) #> # A tibble: 1 x 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 water, tarp     3      17.1 0.000685 # same as tidy(anova(spmod, Terms = c(2, 3))) #> # A tibble: 1 x 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 water, tarp     3      17.1 0.000685 # likelihood ratio test lmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"none\" ) tidy(anova(spmod, lmod)) #> # A tibble: 1 x 5 #>   full  reduced    df statistic p.value #>   <chr> <chr>   <int>     <dbl>   <dbl> #> 1 spmod lmod        2      4.17   0.124"},{"path":"/reference/anova.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"Compute analysis variance tables fitted model object likelihood ratio test two fitted model objects.","code":""},{"path":"/reference/anova.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"","code":"# S3 method for splm anova(object, ..., test = TRUE, Terms, L)  # S3 method for spautor anova(object, ..., test = TRUE, Terms, L)  # S3 method for spglm anova(object, ..., test = TRUE, Terms, L)  # S3 method for spgautor anova(object, ..., test = TRUE, Terms, L)  # S3 method for anova.splm tidy(x, ...)  # S3 method for anova.spautor tidy(x, ...)  # S3 method for anova.spglm tidy(x, ...)  # S3 method for anova.spgautor tidy(x, ...)"},{"path":"/reference/anova.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... additional fitted model object. test logical value indicating whether p-values asymptotic Chi-squared hypothesis tests returned. Defaults TRUE. Terms optional character integer vector specifies terms model used jointly compute test statistics p-values (test = TRUE) null hypothesis zero. Terms used single fitted model object passed function. Terms character vector, contain names fixed effect terms. Terms integer vector, correspond order (starting one) names fixed effect terms. easiest way obtain names possible terms run tidy(anova(object))$effects (integer representation matches positions vector). L optional numeric matrix list specifying linear combinations coefficients model used compute test statistics p-values (test = TRUE) coefficient constraints corresponding null hypothesis zero. L used single fitted model object passed function. L numeric matrix, rows indicate coefficient constraints columns represent coefficients. single hypothesis test conducted null hypothesis zero. L list, list element numeric matrix specified . separate hypothesis tests conducted. easiest way obtain possible coefficients run tidy(object)$term. x object anova(object).","code":""},{"path":"/reference/anova.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"one fitted model object present, anova() returns data frame degrees freedom (Df), test statistics (Chi2), p-values (Pr(>Chi2) test = TRUE) corresponding asymptotic Chi-squared hypothesis tests model term. two fitted model objects present, anova() returns data frame difference degrees freedom full reduced model (Df), test statistic (Chi2), p-value corresponding likelihood ratio test (Pr(>Chi2) test = TRUE). Whether one two fitted model objects provided, tidy() can used obtain tidy tibbles anova(object) output.","code":""},{"path":"/reference/anova.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"one fitted model object present, anova() performs general linear hypothesis test corresponding hypothesis specified matrix constraints. Terms L specified, model term tested zero (correspond type III marginal hypothesis tests classical ANOVA). Terms specified L specified, terms tested jointly zero. L specified, linear combinations terms specified L jointly tested zero. two fitted model objects present, one must \"reduced\" model nested \"full\" model. anova() performs likelihood ratio test.","code":""},{"path":"/reference/anova.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute analysis of variance and likelihood ratio tests of fitted model objects — anova.spmodel","text":"","code":"# one-model anova spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) anova(spmod) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 tidy(anova(spmod)) #> # A tibble: 3 × 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 (Intercept)     1     43.5  4.33e-11 #> 2 water           1      1.66 1.98e- 1 #> 3 tarp            2     15.4  4.51e- 4 # see terms tidy(anova(spmod))$effects #> [1] \"(Intercept)\" \"water\"       \"tarp\"        tidy(anova(spmod, Terms = c(\"water\", \"tarp\"))) #> # A tibble: 1 × 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 water, tarp     3      17.1 0.000685 # same as tidy(anova(spmod, Terms = c(2, 3))) #> # A tibble: 1 × 4 #>   effects        df statistic  p.value #>   <chr>       <int>     <dbl>    <dbl> #> 1 water, tarp     3      17.1 0.000685 # likelihood ratio test lmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"none\" ) tidy(anova(spmod, lmod)) #> # A tibble: 1 × 5 #>   full  reduced    df statistic p.value #>   <chr> <chr>   <int>     <dbl>   <dbl> #> 1 spmod lmod        2      4.17   0.124"},{"path":"/reference/augment.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from fitted model objects — augment.spmod","title":"Augment data with information from fitted model objects — augment.spmod","text":"Augment accepts fitted model object data set adds information observation data set. New columns always begin . prefix avoid overwriting columns original data set. Augment behaves differently depending whether original data new data requires augmenting. Typically, augmenting original data, fitted model object specified, augmenting new data, fitted model object newdata specified. augmenting original data, diagnostic statistics augmented row data set. augmenting new data, predictions optional intervals standard errors augmented row new data set.","code":""},{"path":"/reference/augment.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from fitted model objects — augment.spmod","text":"","code":"# S3 method for spmod augment(   x,   drop = TRUE,   newdata = NULL,   se_fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   ... )"},{"path":"/reference/augment.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from fitted model objects — augment.spmod","text":"x fitted model object splm() spautor(). drop logical indicating whether drop extra variables fitted model object x augmenting. default drop TRUE. drop ignored augmenting newdata. newdata data frame tibble containing observations requiring prediction. original explanatory variables used create fitted model object x must present newdata. Defaults NULL, indicates nothing passed newdata. se_fit Logical indicating whether .se.fit column added augmented output. Passed predict() defaults FALSE. interval Character indicating type confidence interval columns add augmented newdata output. Passed predict() defaults \"none\". ... Additional arguments predict() augmenting newdata.","code":""},{"path":"/reference/augment.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from fitted model objects — augment.spmod","text":"augmenting original data set, tibble additional columns .fitted Fitted value .resid Raw residual (difference observed fitted values) .hat Leverage (diagonal hat matrix) .cooksd Cook's distance .std.resid Standardized residuals .se.fit Standard error fitted value. augmenting new data set, tibble additional columns .fitted Predicted (fitted) value .lower Lower bound interval .upper Upper bound interval .se.fit Standard error predicted (fitted) value","code":""},{"path":"/reference/augment.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment data with information from fitted model objects — augment.spmod","text":"augment() returns tibble class data. , data sf object, augmented object (obtained via augment(x)) sf object well. augmenting newdata, augmented object class data. Missing response values original data can augmented newdata object providing x$newdata newdata argument (x name fitted model object). way compute predictions spautor() fitted model objects.","code":""},{"path":[]},{"path":"/reference/augment.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with information from fitted model objects — augment.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) augment(spmod) #> # A tibble: 30 x 10 #>        z water tarp      x     y .fitted  .resid   .hat   .cooksd .std.resid #>    <dbl> <fct> <fct> <dbl> <dbl>   <dbl>   <dbl>  <dbl>     <dbl>      <dbl> #>  1  2.42 Y     clear     1     6    1.97  0.454  0.724  1.02          2.37   #>  2  2.44 Y     shade     2     6    2.25  0.190  0.179  0.0306       -0.827  #>  3  1.81 Y     none      3     6    2.05 -0.237  0.128  0.195        -2.47   #>  4  1.97 N     clear     4     6    2.05 -0.0838 0.182  0.0109       -0.490  #>  5  2.38 N     shade     5     6    2.34  0.0407 0.121  0.00444       0.383  #>  6  2.22 Y     none      1     5    2.05  0.177  0.0936 0.0000222    -0.0308 #>  7  2.10 N     clear     2     5    2.05  0.0512 0.154  0.00542      -0.376  #>  8  1.80 Y     clear     3     5    1.97 -0.163  0.0778 0.0221       -1.07   #>  9  1.96 Y     shade     4     5    2.25 -0.290  0.110  0.0546       -1.41   #> 10  2.10 Y     none      5     5    2.05  0.0522 0.136  0.0236        0.835  #> # ... with 20 more rows spmod_sulf <- splm(sulfate ~ 1, data = sulfate, spcov_type = \"exponential\") augment(spmod_sulf) #> Simple feature collection with 197 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2292550 ymin: 386181.1 xmax: 2173345 ymax: 3090370 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 197 x 7 #>    sulfate .fitted .resid    .hat   .cooksd .std.resid           geometry #>  *   <dbl>   <dbl>  <dbl>   <dbl>     <dbl>      <dbl>        <POINT [m]> #>  1  12.9      5.92   7.00 0.443   0.406         0.957  (817738.8 1080571) #>  2  20.2      5.92  14.2  0.0420  0.103         1.57   (914593.6 1295545) #>  3  16.8      5.92  10.9  0.0356  0.00703       0.444  (359574.1 1178228) #>  4  16.2      5.92  10.3  0.0121  0.0000808     0.0819 (265331.9 1239089) #>  5   7.86     5.92   1.93 0.00847 0.0236       -1.67   (304528.8 1453636) #>  6  15.4      5.92   9.43 0.00736 0.00421       0.756  (162932.8 1451625) #>  7   0.986    5.92  -4.94 0.109   0.178        -1.27   (-1437776 1568022) #>  8   0.425    5.92  -5.50 0.0264  0.00913      -0.588  (-1572878 1125529) #>  9   3.58     5.92  -2.34 0.00181 0.0000262     0.120  (-1282009 1204889) #> 10   2.38     5.92  -3.54 0.0252  0.000392      0.125  (-1972775 1464991) #> # ... with 187 more rows augment(spmod_sulf, newdata = sulfate_preds) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 x 2 #>    .fitted            geometry #>  *   <dbl>         <POINT [m]> #>  1    1.62  (-1771413 1752976) #>  2   24.4    (1018112 1867127) #>  3    8.95 (-291256.8 1553212) #>  4   16.5    (1274293 1267835) #>  5    4.93 (-547437.6 1638825) #>  6   26.8    (1445080 1981278) #>  7    2.87  (-1629090 3037173) #>  8   14.3    (1302757 1039534) #>  9    1.53  (-1429838 2523494) #> 10   14.3    (1131970 1096609) #> # ... with 90 more rows # missingness in original data spmod_seal <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\") augment(spmod_seal) #> Simple feature collection with 34 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 980001.5 ymin: 1010815 xmax: 1116002 ymax: 1145054 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 34 x 7 #>    log_trend .fitted  .resid   .hat .cooksd .std.resid                  geometry #>  *     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>      <dbl>             <POLYGON [m]> #>  1  -0.282   -0.0710 -0.211  0.0179 0.0233      -1.14  ((1037002 1039492, 10370~ #>  2  -0.00121 -0.0710  0.0698 0.0699 0.0412       0.767 ((1070158 1030216, 10701~ #>  3   0.0354  -0.0710  0.106  0.0218 0.0109       0.705 ((1054906 1034826, 10549~ #>  4  -0.0160  -0.0710  0.0550 0.0343 0.00633      0.430 ((1025142 1056940, 10251~ #>  5   0.0872  -0.0710  0.158  0.0229 0.0299       1.14  ((1026035 1044623, 10260~ #>  6  -0.266   -0.0710 -0.195  0.0280 0.0493      -1.33  ((1100345 1060709, 11002~ #>  7   0.0743  -0.0710  0.145  0.0480 0.0818       1.30  ((1030247 1029637, 10302~ #>  8  -0.00961 -0.0710  0.0614 0.0143 0.00123      0.293 ((1116002 1024542, 11160~ #>  9  -0.182   -0.0710 -0.111  0.0131 0.0155      -1.09  ((1079864 1025088, 10798~ #> 10   0.00351 -0.0710  0.0745 0.0340 0.0107       0.561 ((1110363 1037056, 11103~ #> # ... with 24 more rows augment(spmod_seal, newdata = spmod_seal$newdata) #> Simple feature collection with 28 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1115097 ymax: 1132682 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 28 x 3 #>    log_trend .fitted                                                    geometry #>  *     <dbl>   <dbl>                                               <POLYGON [m]> #>  1        NA -0.113  ((1035002 1054710, 1035002 1054542, 1035002 1053542, 10350~ #>  2        NA -0.0108 ((1043093 1020553, 1043097 1020550, 1043101 1020550, 10431~ #>  3        NA -0.0608 ((1099737 1054310, 1099752 1054262, 1099788 1054278, 10998~ #>  4        NA -0.0383 ((1099002 1036542, 1099134 1036462, 1099139 1036431, 10991~ #>  5        NA -0.0730 ((1076902 1053189, 1076912 1053179, 1076931 1053179, 10769~ #>  6        NA -0.0556 ((1070501 1046969, 1070317 1046598, 1070308 1046542, 10703~ #>  7        NA -0.0968 ((1072995 1054942, 1072996 1054910, 1072997 1054878, 10729~ #>  8        NA -0.0716 ((960001.5 1127667, 960110.8 1127542, 960144.1 1127495, 96~ #>  9        NA -0.0776 ((1031308 1079817, 1031293 1079754, 1031289 1079741, 10312~ #> 10        NA -0.0647 ((998923.7 1053647, 998922.5 1053609, 998950 1053631, 9990~ #> # ... with 18 more rows"},{"path":"/reference/augment.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from fitted model objects — augment.spmodel","title":"Augment data with information from fitted model objects — augment.spmodel","text":"Augment accepts fitted model object data set adds information observation data set. New columns always begin . prefix avoid overwriting columns original data set. Augment behaves differently depending whether original data new data requires augmenting. Typically, augmenting original data, fitted model object specified, augmenting new data, fitted model object newdata specified. augmenting original data, diagnostic statistics augmented row data set. augmenting new data, predictions optional intervals standard errors augmented row new data set.","code":""},{"path":"/reference/augment.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from fitted model objects — augment.spmodel","text":"","code":"# S3 method for splm augment(   x,   drop = TRUE,   newdata = NULL,   se_fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spautor augment(   x,   drop = TRUE,   newdata = NULL,   se_fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spglm augment(   x,   drop = TRUE,   newdata = NULL,   type = c(\"link\", \"response\"),   se_fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local = local,   var_correct = TRUE,   ... )  # S3 method for spgautor augment(   x,   drop = TRUE,   newdata = NULL,   type = c(\"link\", \"response\"),   se_fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local,   var_correct = TRUE,   ... )"},{"path":"/reference/augment.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from fitted model objects — augment.spmodel","text":"x fitted model object splm() spautor(). drop logical indicating whether drop extra variables fitted model object x augmenting. default drop TRUE. drop ignored augmenting newdata. newdata data frame tibble containing observations requiring prediction. original explanatory variables used create fitted model object x must present newdata. Defaults NULL, indicates nothing passed newdata. se_fit Logical indicating whether .se.fit column added augmented output. Passed predict() defaults FALSE. interval Character indicating type confidence interval columns add augmented newdata output. Passed predict() defaults \"none\". level Tolerance/confidence level. default 0.95. local list logical. list, specific list elements described predict.spmodel() control big data approximation behavior. logical, TRUE chooses default list elements list version local specified predict.spmodel(). Defaults FALSE, performs exact computations. ... arguments. used (needed generic consistency). type scale (response link) predictions obtained using spglm() spgautor objects. newdata_size size value observation newdata used predicting binomial family. var_correct logical indicating whether return corrected prediction variances predicting via models fit using spglm() spgautor(). default TRUE.","code":""},{"path":"/reference/augment.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from fitted model objects — augment.spmodel","text":"augmenting original data set, tibble additional columns .fitted Fitted value .resid Response residual (difference observed fitted values) .hat Leverage (diagonal hat matrix) .cooksd Cook's distance .std.resid Standardized residuals .se.fit Standard error fitted value. augmenting new data set, tibble additional columns .fitted Predicted (fitted) value .lower Lower bound interval .upper Upper bound interval .se.fit Standard error predicted (fitted) value","code":""},{"path":"/reference/augment.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment data with information from fitted model objects — augment.spmodel","text":"augment() returns tibble class data. , data sf object, augmented object (obtained via augment(x)) sf object well. augmenting newdata, augmented object class data. Missing response values original data can augmented newdata object providing x$newdata newdata argument (x name fitted model object). way compute predictions spautor() spgautor() fitted model objects.","code":""},{"path":[]},{"path":"/reference/augment.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with information from fitted model objects — augment.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) augment(spmod) #> # A tibble: 30 × 10 #>        z water tarp      x     y .fitted  .resid  .hat .cooksd .std.resid #>    <dbl> <fct> <fct> <dbl> <dbl>   <dbl>   <dbl> <dbl>   <dbl>      <dbl> #>  1  2.42 Y     clear     1     6    1.97  0.454  0.116 0.209        2.53  #>  2  2.44 Y     shade     2     6    2.25  0.190  0.137 0.0468       1.09  #>  3  1.81 Y     none      3     6    2.05 -0.237  0.137 0.0752      -1.38  #>  4  1.97 N     clear     4     6    2.05 -0.0838 0.174 0.00211     -0.200 #>  5  2.38 N     shade     5     6    2.34  0.0407 0.153 0.0159       0.594 #>  6  2.22 Y     none      1     5    2.05  0.177  0.147 0.0434       1.00  #>  7  2.10 N     clear     2     5    2.05  0.0512 0.156 0.00936      0.450 #>  8  1.80 Y     clear     3     5    1.97 -0.163  0.122 0.0135      -0.624 #>  9  1.96 Y     shade     4     5    2.25 -0.290  0.119 0.0642      -1.38  #> 10  2.10 Y     none      5     5    2.05  0.0522 0.131 0.0264       0.837 #> # ℹ 20 more rows spmod_sulf <- splm(sulfate ~ 1, data = sulfate, spcov_type = \"exponential\") augment(spmod_sulf) #> Simple feature collection with 197 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2292550 ymin: 386181.1 xmax: 2173345 ymax: 3090370 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 197 × 7 #>    sulfate .fitted .resid    .hat   .cooksd .std.resid           geometry #>  *   <dbl>   <dbl>  <dbl>   <dbl>     <dbl>      <dbl>        <POINT [m]> #>  1  12.9      5.92   7.00 0.00334 0.00161      -0.694  (817738.8 1080571) #>  2  20.2      5.92  14.2  0.00256 0.00192       0.865  (914593.6 1295545) #>  3  16.8      5.92  10.9  0.00259 0.000395      0.390  (359574.1 1178228) #>  4  16.2      5.92  10.3  0.00239 0.000363      0.390  (265331.9 1239089) #>  5   7.86     5.92   1.93 0.00202 0.00871      -2.07   (304528.8 1453636) #>  6  15.4      5.92   9.43 0.00201 0.000240      0.345  (162932.8 1451625) #>  7   0.986    5.92  -4.94 0.00380 0.000966     -0.503  (-1437776 1568022) #>  8   0.425    5.92  -5.50 0.0138  0.00584      -0.646  (-1572878 1125529) #>  9   3.58     5.92  -2.34 0.00673 0.0000148    -0.0467 (-1282009 1204889) #> 10   2.38     5.92  -3.54 0.0123  0.0000139    -0.0335 (-1972775 1464991) #> # ℹ 187 more rows augment(spmod_sulf, newdata = sulfate_preds) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 2 #>    .fitted            geometry #>  *   <dbl>         <POINT [m]> #>  1    1.62  (-1771413 1752976) #>  2   24.4    (1018112 1867127) #>  3    8.95 (-291256.8 1553212) #>  4   16.5    (1274293 1267835) #>  5    4.93 (-547437.6 1638825) #>  6   26.8    (1445080 1981278) #>  7    2.87  (-1629090 3037173) #>  8   14.3    (1302757 1039534) #>  9    1.53  (-1429838 2523494) #> 10   14.3    (1131970 1096609) #> # ℹ 90 more rows # missingness in original data spmod_seal <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\") augment(spmod_seal) #> Simple feature collection with 34 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 980001.5 ymin: 1010815 xmax: 1116002 ymax: 1145054 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 34 × 7 #>    log_trend .fitted  .resid   .hat .cooksd .std.resid                  geometry #>  *     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>      <dbl>             <POLYGON [m]> #>  1  -0.282   -0.0709 -0.211  0.0161 0.0209      -1.13  ((1037002 1039492, 10370… #>  2  -0.00121 -0.0709  0.0697 0.0473 0.0256       0.718 ((1070158 1030216, 10701… #>  3   0.0354  -0.0709  0.106  0.0290 0.0183       0.782 ((1054906 1034826, 10549… #>  4  -0.0160  -0.0709  0.0549 0.0228 0.00157      0.260 ((1025142 1056940, 10251… #>  5   0.0872  -0.0709  0.158  0.0276 0.0383       1.16  ((1026035 1044623, 10260… #>  6  -0.266   -0.0709 -0.195  0.0287 0.0530      -1.34  ((1100345 1060709, 11002… #>  7   0.0743  -0.0709  0.145  0.0491 0.0901       1.32  ((1030247 1029637, 10302… #>  8  -0.00961 -0.0709  0.0613 0.0122 0.00242      0.442 ((1116002 1024542, 11160… #>  9  -0.182   -0.0709 -0.111  0.0225 0.0224      -0.986 ((1079864 1025088, 10798… #> 10   0.00351 -0.0709  0.0744 0.0316 0.0100       0.555 ((1110363 1037056, 11103… #> # ℹ 24 more rows augment(spmod_seal, newdata = spmod_seal$newdata) #> Simple feature collection with 28 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1115097 ymax: 1132682 #> Projected CRS: NAD83 / Alaska Albers #> # A tibble: 28 × 3 #>    log_trend  .fitted                                                   geometry #>  *     <dbl>    <dbl>                                              <POLYGON [m]> #>  1        NA -0.115   ((1035002 1054710, 1035002 1054542, 1035002 1053542, 1035… #>  2        NA -0.00908 ((1043093 1020553, 1043097 1020550, 1043101 1020550, 1043… #>  3        NA -0.0602  ((1099737 1054310, 1099752 1054262, 1099788 1054278, 1099… #>  4        NA -0.0359  ((1099002 1036542, 1099134 1036462, 1099139 1036431, 1099… #>  5        NA -0.0723  ((1076902 1053189, 1076912 1053179, 1076931 1053179, 1076… #>  6        NA -0.0548  ((1070501 1046969, 1070317 1046598, 1070308 1046542, 1070… #>  7        NA -0.0976  ((1072995 1054942, 1072996 1054910, 1072997 1054878, 1072… #>  8        NA -0.0714  ((960001.5 1127667, 960110.8 1127542, 960144.1 1127495, 9… #>  9        NA -0.0825  ((1031308 1079817, 1031293 1079754, 1031289 1079741, 1031… #> 10        NA -0.0592  ((998923.7 1053647, 998922.5 1053609, 998950 1053631, 999… #> # ℹ 18 more rows"},{"path":"/reference/caribou.html","id":null,"dir":"Reference","previous_headings":"","what":"A caribou forage experiment — caribou","title":"A caribou forage experiment — caribou","text":"caribou forage experiment.","code":""},{"path":"/reference/caribou.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A caribou forage experiment — caribou","text":"","code":"caribou"},{"path":"/reference/caribou.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A caribou forage experiment — caribou","text":"tibble 30 rows 5 columns: water: factor representing whether water added. Takes values N (water added) Y (water added). tarp: factor representing tarp cover. Takes values clear (clear tarp), shade (shade tarp), none (tarp). z: percentage nitrogen. x: x-coordinate. y: y-coordinate.","code":""},{"path":"/reference/caribou.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A caribou forage experiment — caribou","text":"data provided Elizabeth Lenart Alaska Department Fish Game.  data used publication listed References.","code":""},{"path":"/reference/caribou.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A caribou forage experiment — caribou","text":"Lenart, E.., Bowyer, R.T., Ver Hoef, J.M. Ruess, R.W. 2002. Climate Change Caribou: Effects Summer Weather Forage. Canadian Journal Zoology 80: 664-678.","code":""},{"path":"/reference/coef.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fitted model coefficients — coef.spmod","title":"Extract fitted model coefficients — coef.spmod","text":"coef extracts fitted model coefficients splm() spautor() fitted model objects. coefficients alias .","code":""},{"path":"/reference/coef.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fitted model coefficients — coef.spmod","text":"","code":"# S3 method for spmod coef(object, type = \"fixed\", ...)  # S3 method for spmod coefficients(object, type = \"fixed\", ...)"},{"path":"/reference/coef.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fitted model coefficients — coef.spmod","text":"object fitted model object splm() spautor(). type \"fixed\" fixed effect coefficients, \"spcov\" spatial covariance parameter coefficients, \"randcov\" random effect variance coefficients. Defaults \"fixed\". type = \"spcov\", coefficient vector spcov_params() object (means class matching spatial covariance function used). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/coef.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fitted model coefficients — coef.spmod","text":"named vector coefficients.","code":""},{"path":"/reference/coef.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fitted model coefficients — coef.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) coef(spmod) #> (Intercept)      waterY    tarpnone   tarpshade  #>  2.04980603 -0.08309674  0.08005229  0.28654133  coefficients(spmod) #> (Intercept)      waterY    tarpnone   tarpshade  #>  2.04980603 -0.08309674  0.08005229  0.28654133  coef(spmod, type = \"spcov\") #>          de          ie       range      rotate       scale  #>  0.11086032  0.02259843 19.11677659  0.00000000  1.00000000  #> attr(,\"class\") #> [1] \"exponential\""},{"path":"/reference/coef.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fitted model coefficients — coef.spmodel","title":"Extract fitted model coefficients — coef.spmodel","text":"coef extracts fitted model coefficients fitted model objects. coefficients alias .","code":""},{"path":"/reference/coef.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fitted model coefficients — coef.spmodel","text":"","code":"# S3 method for splm coef(object, type = \"fixed\", ...)  # S3 method for splm coefficients(object, type = \"fixed\", ...)  # S3 method for spautor coef(object, type = \"fixed\", ...)  # S3 method for spautor coefficients(object, type = \"fixed\", ...)  # S3 method for spglm coef(object, type = \"fixed\", ...)  # S3 method for spglm coefficients(object, type = \"fixed\", ...)  # S3 method for spgautor coef(object, type = \"fixed\", ...)  # S3 method for spgautor coefficients(object, type = \"fixed\", ...)"},{"path":"/reference/coef.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fitted model coefficients — coef.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). type \"fixed\" fixed effect coefficients, \"spcov\" spatial covariance parameter coefficients, \"randcov\" random effect variance coefficients. Defaults \"fixed\". type = \"spcov\", coefficient vector spcov_params() object (means class matching spatial covariance function used). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/coef.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fitted model coefficients — coef.spmodel","text":"named vector coefficients.","code":""},{"path":"/reference/coef.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fitted model coefficients — coef.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) coef(spmod) #> (Intercept)      waterY    tarpnone   tarpshade  #>  2.04980603 -0.08309674  0.08005229  0.28654133  coefficients(spmod) #> (Intercept)      waterY    tarpnone   tarpshade  #>  2.04980603 -0.08309674  0.08005229  0.28654133  coef(spmod, type = \"spcov\") #>          de          ie       range      rotate       scale  #>  0.11086032  0.02259843 19.11677659  0.00000000  1.00000000  #> attr(,\"class\") #> [1] \"exponential\""},{"path":"/reference/confint.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for fitted model parameters — confint.spmod","title":"Confidence intervals for fitted model parameters — confint.spmod","text":"Computes confidence intervals one parameters fitted model object.","code":""},{"path":"/reference/confint.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for fitted model parameters — confint.spmod","text":"","code":"# S3 method for spmod confint(object, parm, level = 0.95, ...)"},{"path":"/reference/confint.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for fitted model parameters — confint.spmod","text":"object fitted model object splm() spautor(). parm specification parameters given confidence intervals (character vector names). missing, parameters considered. level confidence level required. default 0.95. ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/confint.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for fitted model parameters — confint.spmod","text":"Gaussian-based confidence intervals (two-sided equal-tailed) fixed effect coefficients based confidence level specified level.","code":""},{"path":"/reference/confint.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence intervals for fitted model parameters — confint.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) confint(spmod) #>                  2.5 %     97.5 % #> (Intercept)  1.4403871 2.65922493 #> waterY      -0.2094944 0.04330094 #> tarpnone    -0.0720118 0.23211637 #> tarpshade    0.1362743 0.43680835 confint(spmod, parm = \"waterY\", level = 0.90) #>              5 %       95 % #> waterY -0.189173 0.02297954"},{"path":"/reference/confint.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for fitted model parameters — confint.spmodel","title":"Confidence intervals for fitted model parameters — confint.spmodel","text":"Computes confidence intervals one parameters fitted model object.","code":""},{"path":"/reference/confint.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for fitted model parameters — confint.spmodel","text":"","code":"# S3 method for splm confint(object, parm, level = 0.95, ...)  # S3 method for spautor confint(object, parm, level = 0.95, ...)  # S3 method for spglm confint(object, parm, level = 0.95, ...)  # S3 method for spgautor confint(object, parm, level = 0.95, ...)"},{"path":"/reference/confint.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for fitted model parameters — confint.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). parm specification parameters given confidence intervals (character vector names). missing, parameters considered. level confidence level required. default 0.95. ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/confint.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals for fitted model parameters — confint.spmodel","text":"Gaussian-based confidence intervals (two-sided equal-tailed) fixed effect coefficients based confidence level specified level. spglm() spgautor() fitted model objects, confidence intervals link scale.","code":""},{"path":"/reference/confint.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence intervals for fitted model parameters — confint.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) confint(spmod) #>                  2.5 %     97.5 % #> (Intercept)  1.4403871 2.65922493 #> waterY      -0.2094944 0.04330094 #> tarpnone    -0.0720118 0.23211637 #> tarpshade    0.1362743 0.43680835 confint(spmod, parm = \"waterY\", level = 0.90) #>              5 %       95 % #> waterY -0.189173 0.02297954"},{"path":"/reference/cooks.distance.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cook's distance — cooks.distance.spmod","title":"Compute Cook's distance — cooks.distance.spmod","text":"Compute Cook's distance observation fitted model object.","code":""},{"path":"/reference/cooks.distance.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cook's distance — cooks.distance.spmod","text":"","code":"# S3 method for spmod cooks.distance(model, ...)"},{"path":"/reference/cooks.distance.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cook's distance — cooks.distance.spmod","text":"model fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/cooks.distance.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cook's distance — cooks.distance.spmod","text":"vector Cook's distance values observation fitted model object.","code":""},{"path":"/reference/cooks.distance.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cook's distance — cooks.distance.spmod","text":"Cook's distance measures influence observation fitted model object. observation influential, omission data noticeably impacts parameter estimates. larger Cook's distance, larger influence.","code":""},{"path":[]},{"path":"/reference/cooks.distance.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cook's distance — cooks.distance.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) cooks.distance(spmod) #>  [1] 1.016241e+00 3.064627e-02 1.954807e-01 1.092909e-02 4.444837e-03 #>  [6] 2.218109e-05 5.423136e-03 2.211478e-02 5.459135e-02 2.361714e-02 #> [11] 1.167901e-02 1.109657e-02 7.173811e-03 2.695452e-02 4.967631e-03 #> [16] 1.348117e-01 6.689116e-02 3.341628e-02 5.329329e-03 3.289214e-03 #> [21] 1.259527e-02 3.339470e-02 1.482779e-02 1.001503e-02 1.819966e-02 #> [26] 1.204877e-03 3.262340e-02 3.378349e-03 8.683320e-04 2.541905e-03"},{"path":"/reference/cooks.distance.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cook's distance — cooks.distance.spmodel","title":"Compute Cook's distance — cooks.distance.spmodel","text":"Compute Cook's distance observation fitted model object.","code":""},{"path":"/reference/cooks.distance.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cook's distance — cooks.distance.spmodel","text":"","code":"# S3 method for splm cooks.distance(model, ...)  # S3 method for spautor cooks.distance(model, ...)  # S3 method for spglm cooks.distance(model, ...)  # S3 method for spgautor cooks.distance(model, ...)"},{"path":"/reference/cooks.distance.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cook's distance — cooks.distance.spmodel","text":"model fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/cooks.distance.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cook's distance — cooks.distance.spmodel","text":"vector Cook's distance values observation fitted model object.","code":""},{"path":"/reference/cooks.distance.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cook's distance — cooks.distance.spmodel","text":"Cook's distance measures influence observation fitted model object. observation influential, omission data noticeably impacts parameter estimates. larger Cook's distance, larger influence.","code":""},{"path":[]},{"path":"/reference/cooks.distance.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cook's distance — cooks.distance.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) cooks.distance(spmod) #>           1           2           3           4           5           6  #> 0.208649163 0.046762066 0.075201299 0.002105977 0.015878743 0.043438339  #>           7           8           9          10          11          12  #> 0.009359609 0.013528476 0.064232283 0.026392006 0.002610611 0.005531740  #>          13          14          15          16          17          18  #> 0.011537116 0.031581324 0.002108886 0.153705116 0.071730500 0.054523415  #>          19          20          21          22          23          24  #> 0.009083242 0.010921707 0.009783614 0.039565388 0.019831572 0.031011542  #>          25          26          27          28          29          30  #> 0.028240763 0.005845866 0.053255250 0.002058093 0.003463498 0.007093867"},{"path":"/reference/covmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a covariance matrix — covmatrix","title":"Create a covariance matrix — covmatrix","text":"Create covariance matrix fitted model object.","code":""},{"path":"/reference/covmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a covariance matrix — covmatrix","text":"","code":"covmatrix(object, newdata, ...)  # S3 method for splm covmatrix(object, newdata, ...)  # S3 method for spautor covmatrix(object, newdata, ...)  # S3 method for spglm covmatrix(object, newdata, ...)  # S3 method for spgautor covmatrix(object, newdata, ...)"},{"path":"/reference/covmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a covariance matrix — covmatrix","text":"object fitted model object (e.g., splm(), spautor(), spglm(), spgautor()). newdata omitted, covariance matrix observed data returned. provided, newdata data frame sf object contains coordinate information required construct covariance newdata observed data. data frame, newdata must contain variables represent coordinates name coordinates observed data used fit object. sf object, coordinates obtained geometry newdata. ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/covmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a covariance matrix — covmatrix","text":"newdata omitted, covariance matrix observed data, dimension n x n, n sample size used fit object. newdata provided, covariance matrix unobserved (new) data observed data, dimension m x n, m number new observations n sample size used fit object.","code":""},{"path":"/reference/covmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a covariance matrix — covmatrix","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) covmatrix(spmod) #>             1          2          3          4          5          6          7 #> 1  0.13345875 0.10521027 0.09984818 0.09475938 0.08992992 0.10521027 0.10295515 #> 2  0.10521027 0.13345875 0.10521027 0.09984818 0.09475938 0.10295515 0.10521027 #> 3  0.09984818 0.10521027 0.13345875 0.10521027 0.09984818 0.09862277 0.10295515 #> 4  0.09475938 0.09984818 0.10521027 0.13345875 0.10521027 0.09395839 0.09862277 #> 5  0.08992992 0.09475938 0.09984818 0.10521027 0.13345875 0.08935266 0.09395839 #> 6  0.10521027 0.10295515 0.09862277 0.09395839 0.08935266 0.13345875 0.10521027 #> 7  0.10295515 0.10521027 0.10295515 0.09862277 0.09395839 0.10521027 0.13345875 #> 8  0.09862277 0.10295515 0.10521027 0.10295515 0.09862277 0.09984818 0.10521027 #> 9  0.09395839 0.09862277 0.10295515 0.10521027 0.10295515 0.09475938 0.09984818 #> 10 0.08935266 0.09395839 0.09862277 0.10295515 0.10521027 0.08992992 0.09475938 #> 11 0.09984818 0.09862277 0.09561367 0.09180478 0.08773608 0.10521027 0.10295515 #> 12 0.09862277 0.09984818 0.09862277 0.09561367 0.09180478 0.10295515 0.10521027 #> 13 0.09561367 0.09862277 0.09984818 0.09862277 0.09561367 0.09862277 0.10295515 #> 14 0.09180478 0.09561367 0.09862277 0.09984818 0.09862277 0.09395839 0.09862277 #> 15 0.08773608 0.09180478 0.09561367 0.09862277 0.09984818 0.08935266 0.09395839 #> 16 0.09475938 0.09395839 0.09180478 0.08879570 0.08534660 0.09984818 0.09862277 #> 17 0.09395839 0.09475938 0.09395839 0.09180478 0.08879570 0.09862277 0.09984818 #> 18 0.09180478 0.09395839 0.09475938 0.09395839 0.09180478 0.09561367 0.09862277 #> 19 0.08879570 0.09180478 0.09395839 0.09475938 0.09395839 0.09180478 0.09561367 #> 20 0.08534660 0.08879570 0.09180478 0.09395839 0.09475938 0.08773608 0.09180478 #> 21 0.08992992 0.08935266 0.08773608 0.08534660 0.08246389 0.09475938 0.09395839 #> 22 0.08935266 0.08992992 0.08935266 0.08773608 0.08534660 0.09395839 0.09475938 #> 23 0.08773608 0.08935266 0.08992992 0.08935266 0.08773608 0.09180478 0.09395839 #> 24 0.08534660 0.08773608 0.08935266 0.08992992 0.08935266 0.08879570 0.09180478 #> 25 0.08246389 0.08534660 0.08773608 0.08935266 0.08992992 0.08534660 0.08879570 #> 26 0.08534660 0.08490568 0.08364425 0.08171630 0.07930674 0.08992992 0.08935266 #> 27 0.08490568 0.08534660 0.08490568 0.08364425 0.08171630 0.08935266 0.08992992 #> 28 0.08364425 0.08490568 0.08534660 0.08490568 0.08364425 0.08773608 0.08935266 #> 29 0.08171630 0.08364425 0.08490568 0.08534660 0.08490568 0.08534660 0.08773608 #> 30 0.07930674 0.08171630 0.08364425 0.08490568 0.08534660 0.08246389 0.08534660 #>             8          9         10         11         12         13         14 #> 1  0.09862277 0.09395839 0.08935266 0.09984818 0.09862277 0.09561367 0.09180478 #> 2  0.10295515 0.09862277 0.09395839 0.09862277 0.09984818 0.09862277 0.09561367 #> 3  0.10521027 0.10295515 0.09862277 0.09561367 0.09862277 0.09984818 0.09862277 #> 4  0.10295515 0.10521027 0.10295515 0.09180478 0.09561367 0.09862277 0.09984818 #> 5  0.09862277 0.10295515 0.10521027 0.08773608 0.09180478 0.09561367 0.09862277 #> 6  0.09984818 0.09475938 0.08992992 0.10521027 0.10295515 0.09862277 0.09395839 #> 7  0.10521027 0.09984818 0.09475938 0.10295515 0.10521027 0.10295515 0.09862277 #> 8  0.13345875 0.10521027 0.09984818 0.09862277 0.10295515 0.10521027 0.10295515 #> 9  0.10521027 0.13345875 0.10521027 0.09395839 0.09862277 0.10295515 0.10521027 #> 10 0.09984818 0.10521027 0.13345875 0.08935266 0.09395839 0.09862277 0.10295515 #> 11 0.09862277 0.09395839 0.08935266 0.13345875 0.10521027 0.09984818 0.09475938 #> 12 0.10295515 0.09862277 0.09395839 0.10521027 0.13345875 0.10521027 0.09984818 #> 13 0.10521027 0.10295515 0.09862277 0.09984818 0.10521027 0.13345875 0.10521027 #> 14 0.10295515 0.10521027 0.10295515 0.09475938 0.09984818 0.10521027 0.13345875 #> 15 0.09862277 0.10295515 0.10521027 0.08992992 0.09475938 0.09984818 0.10521027 #> 16 0.09561367 0.09180478 0.08773608 0.10521027 0.10295515 0.09862277 0.09395839 #> 17 0.09862277 0.09561367 0.09180478 0.10295515 0.10521027 0.10295515 0.09862277 #> 18 0.09984818 0.09862277 0.09561367 0.09862277 0.10295515 0.10521027 0.10295515 #> 19 0.09862277 0.09984818 0.09862277 0.09395839 0.09862277 0.10295515 0.10521027 #> 20 0.09561367 0.09862277 0.09984818 0.08935266 0.09395839 0.09862277 0.10295515 #> 21 0.09180478 0.08879570 0.08534660 0.09984818 0.09862277 0.09561367 0.09180478 #> 22 0.09395839 0.09180478 0.08879570 0.09862277 0.09984818 0.09862277 0.09561367 #> 23 0.09475938 0.09395839 0.09180478 0.09561367 0.09862277 0.09984818 0.09862277 #> 24 0.09395839 0.09475938 0.09395839 0.09180478 0.09561367 0.09862277 0.09984818 #> 25 0.09180478 0.09395839 0.09475938 0.08773608 0.09180478 0.09561367 0.09862277 #> 26 0.08773608 0.08534660 0.08246389 0.09475938 0.09395839 0.09180478 0.08879570 #> 27 0.08935266 0.08773608 0.08534660 0.09395839 0.09475938 0.09395839 0.09180478 #> 28 0.08992992 0.08935266 0.08773608 0.09180478 0.09395839 0.09475938 0.09395839 #> 29 0.08935266 0.08992992 0.08935266 0.08879570 0.09180478 0.09395839 0.09475938 #> 30 0.08773608 0.08935266 0.08992992 0.08534660 0.08879570 0.09180478 0.09395839 #>            15         16         17         18         19         20         21 #> 1  0.08773608 0.09475938 0.09395839 0.09180478 0.08879570 0.08534660 0.08992992 #> 2  0.09180478 0.09395839 0.09475938 0.09395839 0.09180478 0.08879570 0.08935266 #> 3  0.09561367 0.09180478 0.09395839 0.09475938 0.09395839 0.09180478 0.08773608 #> 4  0.09862277 0.08879570 0.09180478 0.09395839 0.09475938 0.09395839 0.08534660 #> 5  0.09984818 0.08534660 0.08879570 0.09180478 0.09395839 0.09475938 0.08246389 #> 6  0.08935266 0.09984818 0.09862277 0.09561367 0.09180478 0.08773608 0.09475938 #> 7  0.09395839 0.09862277 0.09984818 0.09862277 0.09561367 0.09180478 0.09395839 #> 8  0.09862277 0.09561367 0.09862277 0.09984818 0.09862277 0.09561367 0.09180478 #> 9  0.10295515 0.09180478 0.09561367 0.09862277 0.09984818 0.09862277 0.08879570 #> 10 0.10521027 0.08773608 0.09180478 0.09561367 0.09862277 0.09984818 0.08534660 #> 11 0.08992992 0.10521027 0.10295515 0.09862277 0.09395839 0.08935266 0.09984818 #> 12 0.09475938 0.10295515 0.10521027 0.10295515 0.09862277 0.09395839 0.09862277 #> 13 0.09984818 0.09862277 0.10295515 0.10521027 0.10295515 0.09862277 0.09561367 #> 14 0.10521027 0.09395839 0.09862277 0.10295515 0.10521027 0.10295515 0.09180478 #> 15 0.13345875 0.08935266 0.09395839 0.09862277 0.10295515 0.10521027 0.08773608 #> 16 0.08935266 0.13345875 0.10521027 0.09984818 0.09475938 0.08992992 0.10521027 #> 17 0.09395839 0.10521027 0.13345875 0.10521027 0.09984818 0.09475938 0.10295515 #> 18 0.09862277 0.09984818 0.10521027 0.13345875 0.10521027 0.09984818 0.09862277 #> 19 0.10295515 0.09475938 0.09984818 0.10521027 0.13345875 0.10521027 0.09395839 #> 20 0.10521027 0.08992992 0.09475938 0.09984818 0.10521027 0.13345875 0.08935266 #> 21 0.08773608 0.10521027 0.10295515 0.09862277 0.09395839 0.08935266 0.13345875 #> 22 0.09180478 0.10295515 0.10521027 0.10295515 0.09862277 0.09395839 0.10521027 #> 23 0.09561367 0.09862277 0.10295515 0.10521027 0.10295515 0.09862277 0.09984818 #> 24 0.09862277 0.09395839 0.09862277 0.10295515 0.10521027 0.10295515 0.09475938 #> 25 0.09984818 0.08935266 0.09395839 0.09862277 0.10295515 0.10521027 0.08992992 #> 26 0.08534660 0.09984818 0.09862277 0.09561367 0.09180478 0.08773608 0.10521027 #> 27 0.08879570 0.09862277 0.09984818 0.09862277 0.09561367 0.09180478 0.10295515 #> 28 0.09180478 0.09561367 0.09862277 0.09984818 0.09862277 0.09561367 0.09862277 #> 29 0.09395839 0.09180478 0.09561367 0.09862277 0.09984818 0.09862277 0.09395839 #> 30 0.09475938 0.08773608 0.09180478 0.09561367 0.09862277 0.09984818 0.08935266 #>            22         23         24         25         26         27         28 #> 1  0.08935266 0.08773608 0.08534660 0.08246389 0.08534660 0.08490568 0.08364425 #> 2  0.08992992 0.08935266 0.08773608 0.08534660 0.08490568 0.08534660 0.08490568 #> 3  0.08935266 0.08992992 0.08935266 0.08773608 0.08364425 0.08490568 0.08534660 #> 4  0.08773608 0.08935266 0.08992992 0.08935266 0.08171630 0.08364425 0.08490568 #> 5  0.08534660 0.08773608 0.08935266 0.08992992 0.07930674 0.08171630 0.08364425 #> 6  0.09395839 0.09180478 0.08879570 0.08534660 0.08992992 0.08935266 0.08773608 #> 7  0.09475938 0.09395839 0.09180478 0.08879570 0.08935266 0.08992992 0.08935266 #> 8  0.09395839 0.09475938 0.09395839 0.09180478 0.08773608 0.08935266 0.08992992 #> 9  0.09180478 0.09395839 0.09475938 0.09395839 0.08534660 0.08773608 0.08935266 #> 10 0.08879570 0.09180478 0.09395839 0.09475938 0.08246389 0.08534660 0.08773608 #> 11 0.09862277 0.09561367 0.09180478 0.08773608 0.09475938 0.09395839 0.09180478 #> 12 0.09984818 0.09862277 0.09561367 0.09180478 0.09395839 0.09475938 0.09395839 #> 13 0.09862277 0.09984818 0.09862277 0.09561367 0.09180478 0.09395839 0.09475938 #> 14 0.09561367 0.09862277 0.09984818 0.09862277 0.08879570 0.09180478 0.09395839 #> 15 0.09180478 0.09561367 0.09862277 0.09984818 0.08534660 0.08879570 0.09180478 #> 16 0.10295515 0.09862277 0.09395839 0.08935266 0.09984818 0.09862277 0.09561367 #> 17 0.10521027 0.10295515 0.09862277 0.09395839 0.09862277 0.09984818 0.09862277 #> 18 0.10295515 0.10521027 0.10295515 0.09862277 0.09561367 0.09862277 0.09984818 #> 19 0.09862277 0.10295515 0.10521027 0.10295515 0.09180478 0.09561367 0.09862277 #> 20 0.09395839 0.09862277 0.10295515 0.10521027 0.08773608 0.09180478 0.09561367 #> 21 0.10521027 0.09984818 0.09475938 0.08992992 0.10521027 0.10295515 0.09862277 #> 22 0.13345875 0.10521027 0.09984818 0.09475938 0.10295515 0.10521027 0.10295515 #> 23 0.10521027 0.13345875 0.10521027 0.09984818 0.09862277 0.10295515 0.10521027 #> 24 0.09984818 0.10521027 0.13345875 0.10521027 0.09395839 0.09862277 0.10295515 #> 25 0.09475938 0.09984818 0.10521027 0.13345875 0.08935266 0.09395839 0.09862277 #> 26 0.10295515 0.09862277 0.09395839 0.08935266 0.13345875 0.10521027 0.09984818 #> 27 0.10521027 0.10295515 0.09862277 0.09395839 0.10521027 0.13345875 0.10521027 #> 28 0.10295515 0.10521027 0.10295515 0.09862277 0.09984818 0.10521027 0.13345875 #> 29 0.09862277 0.10295515 0.10521027 0.10295515 0.09475938 0.09984818 0.10521027 #> 30 0.09395839 0.09862277 0.10295515 0.10521027 0.08992992 0.09475938 0.09984818 #>            29         30 #> 1  0.08171630 0.07930674 #> 2  0.08364425 0.08171630 #> 3  0.08490568 0.08364425 #> 4  0.08534660 0.08490568 #> 5  0.08490568 0.08534660 #> 6  0.08534660 0.08246389 #> 7  0.08773608 0.08534660 #> 8  0.08935266 0.08773608 #> 9  0.08992992 0.08935266 #> 10 0.08935266 0.08992992 #> 11 0.08879570 0.08534660 #> 12 0.09180478 0.08879570 #> 13 0.09395839 0.09180478 #> 14 0.09475938 0.09395839 #> 15 0.09395839 0.09475938 #> 16 0.09180478 0.08773608 #> 17 0.09561367 0.09180478 #> 18 0.09862277 0.09561367 #> 19 0.09984818 0.09862277 #> 20 0.09862277 0.09984818 #> 21 0.09395839 0.08935266 #> 22 0.09862277 0.09395839 #> 23 0.10295515 0.09862277 #> 24 0.10521027 0.10295515 #> 25 0.10295515 0.10521027 #> 26 0.09475938 0.08992992 #> 27 0.09984818 0.09475938 #> 28 0.10521027 0.09984818 #> 29 0.13345875 0.10521027 #> 30 0.10521027 0.13345875"},{"path":"/reference/deviance.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted model deviance — deviance.spmod","title":"Fitted model deviance — deviance.spmod","text":"Returns deviance fitted model object.","code":""},{"path":"/reference/deviance.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted model deviance — deviance.spmod","text":"","code":"# S3 method for spmod deviance(object, ...)"},{"path":"/reference/deviance.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted model deviance — deviance.spmod","text":"object fitted model object splm() spautor() estmethod \"ml\" \"reml\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/deviance.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted model deviance — deviance.spmod","text":"deviance.","code":""},{"path":"/reference/deviance.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted model deviance — deviance.spmod","text":"spmod objects estimated using \"ml\" \"reml\", deviance \\((y - X \\beta)^T V (y - X \\beta)\\) inverse covariance matrix \\(V\\), analogous residual sums (whitened) squares.","code":""},{"path":"/reference/deviance.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted model deviance — deviance.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) deviance(spmod) #> [1] 26"},{"path":"/reference/deviance.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted model deviance — deviance.spmodel","title":"Fitted model deviance — deviance.spmodel","text":"Returns deviance fitted model object.","code":""},{"path":"/reference/deviance.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted model deviance — deviance.spmodel","text":"","code":"# S3 method for splm deviance(object, ...)  # S3 method for spautor deviance(object, ...)  # S3 method for spglm deviance(object, ...)  # S3 method for spgautor deviance(object, ...)"},{"path":"/reference/deviance.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted model deviance — deviance.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(), estmethod \"ml\" \"reml\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/deviance.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted model deviance — deviance.spmodel","text":"deviance.","code":""},{"path":"/reference/deviance.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitted model deviance — deviance.spmodel","text":"objects estimated using \"ml\" \"reml\", deviance twice difference log-likelihoods saturated (perfect-fit) model fitted model.","code":""},{"path":"/reference/deviance.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted model deviance — deviance.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) deviance(spmod) #> [1] 26"},{"path":"/reference/dispersion_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dispersion parameter initial object — dispersion_initial","title":"Create a dispersion parameter initial object — dispersion_initial","text":"Create dispersion parameter initial object specifies initial /known values use estimating dispersion parameter spglm() spgautor().","code":""},{"path":"/reference/dispersion_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dispersion parameter initial object — dispersion_initial","text":"","code":"dispersion_initial(family, dispersion, known)"},{"path":"/reference/dispersion_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dispersion parameter initial object — dispersion_initial","text":"family generalized linear model family describing distribution response variable used. \"poisson\", \"nbinomial\", \"binomial\", \"beta\", \"Gamma\", \"inverse.gaussian\". dispersion value dispersion parameter. known character vector indicating whether dispersion parameter assumed known. value \"dispersion\" \"given\" assumes dispersion parameter known.","code":""},{"path":"/reference/dispersion_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dispersion parameter initial object — dispersion_initial","text":"list two elements: initial is_known. initial named numeric vector indicating dispersion parameters specified initial /known value. is_known named numeric vector indicating whether dispersion parameters initial known . class list matches value given family argument.","code":""},{"path":"/reference/dispersion_initial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dispersion parameter initial object — dispersion_initial","text":"dispersion_initial list later passed spglm() spgautor(). variance function individual \\(y\\) (given \\(\\mu\\)) generalized linear model family given : family: \\(Var(y)\\) poisson: \\(\\mu \\phi\\) nbinomial: \\(\\mu + \\mu^2 / \\phi\\) binomial: \\(n \\mu (1 - \\mu) \\phi\\) beta: \\(\\mu (1 - \\mu) / (1 + \\phi)\\) Gamma: \\(\\mu^2 / \\phi\\) inverse.gaussian: \\(\\mu^2 / \\phi\\) parameter \\(\\phi\\) dispersion parameter influences \\(Var(y)\\). poisson binomial families, \\(\\phi\\) always one. Note inverse Gaussian parameterization different standard inverse Gaussian parameterization, variance \\(\\mu^3 / \\lambda\\). Setting \\(\\phi = \\lambda / \\mu\\) yields parameterization, preferred computational stability. Also note dispersion parameter often defined literature \\(V(\\mu) \\phi\\), \\(V(\\mu)\\) variance function mean. use parameterization, important recognize interpreting dispersion parameter estimates using spglm() spgautor(). generalized linear model constructions, see McCullagh Nelder (1989).","code":""},{"path":"/reference/dispersion_initial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a dispersion parameter initial object — dispersion_initial","text":"McCullagh P. Nelder, J. . (1989) Generalized Linear Models. London: Chapman Hall.","code":""},{"path":"/reference/dispersion_initial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dispersion parameter initial object — dispersion_initial","text":"","code":"# known dispersion value 1 dispersion_initial(\"nbinomial\", dispersion = 1, known = \"dispersion\") #> $initial #> dispersion  #>          1  #>  #> $is_known #> dispersion  #>       TRUE  #>  #> attr(,\"class\") #> [1] \"nbinomial\""},{"path":"/reference/dispersion_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dispersion parameter object — dispersion_params","title":"Create a dispersion parameter object — dispersion_params","text":"Create dispersion parameter object use functions.","code":""},{"path":"/reference/dispersion_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dispersion parameter object — dispersion_params","text":"","code":"dispersion_params(family, dispersion)"},{"path":"/reference/dispersion_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dispersion parameter object — dispersion_params","text":"family generalized linear model family describing distribution response variable used. \"poisson\", \"nbinomial\", \"binomial\", \"beta\", \"Gamma\", \"inverse.gaussian\". dispersion value dispersion parameter.","code":""},{"path":"/reference/dispersion_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dispersion parameter object — dispersion_params","text":"named numeric vector class family containing dispersion.","code":""},{"path":"/reference/dispersion_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dispersion parameter object — dispersion_params","text":"variance function individual \\(y\\) (given \\(\\mu\\)) generalized linear model family given : family: \\(Var(y)\\) poisson: \\(\\mu \\phi\\) nbinomial: \\(\\mu + \\mu^2 / \\phi\\) binomial: \\(n \\mu (1 - \\mu) \\phi\\) beta: \\(\\mu (1 - \\mu) / (1 + \\phi)\\) Gamma: \\(\\mu^2 / \\phi\\) inverse.gaussian: \\(\\mu^2 / \\phi\\) parameter \\(\\phi\\) dispersion parameter influences \\(Var(y)\\). poisson binomial families, \\(\\phi\\) always one. Note inverse Gaussian parameterization different standard inverse Gaussian parameterization, variance \\(\\mu^3 / \\lambda\\). Setting \\(\\phi = \\lambda / \\mu\\) yields parameterization, preferred computational stability. Also note dispersion parameter often defined literature \\(V(\\mu) \\phi\\), \\(V(\\mu)\\) variance function mean. use parameterization, important recognize interpreting dispersion parameter estimates using spglm() spgautor(). generalized linear model constructions, see McCullagh Nelder (1989).","code":""},{"path":"/reference/dispersion_params.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a dispersion parameter object — dispersion_params","text":"McCullagh P. Nelder, J. . (1989) Generalized Linear Models. London: Chapman Hall.","code":""},{"path":"/reference/dispersion_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dispersion parameter object — dispersion_params","text":"","code":"dispersion_params(\"beta\", dispersion = 1) #> dispersion  #>          1  #> attr(,\"class\") #> [1] \"beta\""},{"path":"/reference/esv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the empirical semivariogram — esv","title":"Compute the empirical semivariogram — esv","text":"Compute empirical semivariogram varying bin sizes cutoff values.","code":""},{"path":"/reference/esv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the empirical semivariogram — esv","text":"","code":"esv(   formula,   data,   xcoord,   ycoord,   dist_matrix,   bins = 15,   cutoff,   partition_factor )"},{"path":"/reference/esv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the empirical semivariogram — esv","text":"formula formula describing fixed effect structure. data data frame sf object containing variables formula geographic information. xcoord Name variable data representing x-coordinate. Can quoted unquoted. required data sf object. ycoord Name variable data representing y-coordinate. Can quoted unquoted. required data sf object. dist_matrix distance matrix used instead providing coordinate names. bins number equally spaced bins. default 15. cutoff maximum distance considered. default half diagonal bounding box coordinates. partition_factor optional formula specifying partition factor. specified, semivariances computed observations sharing level partition factor.","code":""},{"path":"/reference/esv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the empirical semivariogram — esv","text":"data frame distance bins (bins),  average distance (dist), semivariance (gamma), number (unique) pairs (np).","code":""},{"path":"/reference/esv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the empirical semivariogram — esv","text":"empirical semivariogram tool used visualize model spatial dependence estimating semivariance process varying distances. constant-mean process, semivariance distance \\(h\\) denoted \\(\\gamma(h)\\) defined \\(0.5 * Var(z1  - z2)\\). second-order stationarity, \\(\\gamma(h) = Cov(0) - Cov(h)\\), \\(Cov(h)\\) covariance function distance h. Typically residuals ordinary least squares fit defined formula second-order stationary mean zero. residuals used compute empirical semivariogram. distance h, empirical semivariance \\(1/N(h) \\sum (r1 - r2)^2\\), \\(N(h)\\) number (unique) pairs set observations whose distance separation h r1 r2 residuals corresponding observations whose distance separation h. spmodel, distance bins actually contain observations whose distance separation h +- c, c constant determined implicitly bins. Typically, observations whose distance separation cutoff used compute empirical semivariogram (cutoff determined cutoff). using splm() estmethod \"sv-wls\", empirical semivariogram calculated internally used estimate spatial covariance parameters.","code":""},{"path":"/reference/esv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the empirical semivariogram — esv","text":"","code":"esv(sulfate ~ 1, sulfate) #>                   bins      dist     gamma   np #> 1          (0,1.5e+05]  103340.3  18.04594  149 #> 2   (1.5e+05,3.01e+05]  232013.8  20.28099  456 #> 3  (3.01e+05,4.51e+05]  379254.7  27.63260  749 #> 4  (4.51e+05,6.02e+05]  529542.7  31.65651  887 #> 5  (6.02e+05,7.52e+05]  677949.1  43.28972  918 #> 6  (7.52e+05,9.03e+05]  826916.7  41.26845 1113 #> 7  (9.03e+05,1.05e+06]  978773.3  46.58159 1161 #> 8   (1.05e+06,1.2e+06] 1127232.1  51.05177 1230 #> 9   (1.2e+06,1.35e+06] 1275414.7  58.81009 1239 #> 10  (1.35e+06,1.5e+06] 1429183.9  71.88921 1236 #> 11  (1.5e+06,1.65e+06] 1577636.1  79.03967 1139 #> 12 (1.65e+06,1.81e+06] 1729098.3  94.49986 1047 #> 13 (1.81e+06,1.96e+06] 1879678.7  99.49936  934 #> 14 (1.96e+06,2.11e+06] 2029566.3 113.57088  842 #> 15 (2.11e+06,2.26e+06] 2181336.7 125.05567  788"},{"path":"/reference/fitted.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model fitted values — fitted.spmod","title":"Extract model fitted values — fitted.spmod","text":"Extract fitted values fitted model objects. fitted.values alias.","code":""},{"path":"/reference/fitted.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model fitted values — fitted.spmod","text":"","code":"# S3 method for spmod fitted(object, type = \"response\", ...)  # S3 method for spmod fitted.values(object, type = \"response\", ...)"},{"path":"/reference/fitted.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model fitted values — fitted.spmod","text":"object fitted model object splm() spautor(). type \"response\" fitted values response, \"spcov\" fitted values spatial random errors, \"randcov\" fitted values random effects. default \"response\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/fitted.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model fitted values — fitted.spmod","text":"fitted values according type.","code":""},{"path":"/reference/fitted.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract model fitted values — fitted.spmod","text":"type \"response\", fitted values observation standard fitted values \\(X \\hat{\\beta}\\). type \"spcov\" fitted values observation (generally) best linear unbiased predictors spatial dependent spatial independent random error. type \"randcov\", fitted values level random effect (generally) best linear unbiased predictors corresponding random effect. fitted values type \"spcov\" \"randcov\" can generally used check assumptions component fitted model object (e.g., check Gaussian assumption).","code":""},{"path":"/reference/fitted.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model fitted values — fitted.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) fitted(spmod) #>  [1] 1.966709 2.253251 2.046762 2.049806 2.336347 2.046762 2.049806 1.966709 #>  [9] 2.253251 2.046762 1.966709 2.253251 2.046762 2.336347 2.129858 2.049806 #> [17] 2.336347 2.129858 2.253251 2.046762 2.129858 1.966709 2.049806 2.336347 #> [25] 2.129858 2.049806 2.336347 2.129858 1.966709 2.253251 fitted.values(spmod) #>  [1] 1.966709 2.253251 2.046762 2.049806 2.336347 2.046762 2.049806 1.966709 #>  [9] 2.253251 2.046762 1.966709 2.253251 2.046762 2.336347 2.129858 2.049806 #> [17] 2.336347 2.129858 2.253251 2.046762 2.129858 1.966709 2.049806 2.336347 #> [25] 2.129858 2.049806 2.336347 2.129858 1.966709 2.253251 fitted(spmod, type = \"spcov\") #> $de #>  [1]  0.19009135  0.08808946 -0.05288712 -0.06331824 -0.02856777  0.09098076 #>  [7]  0.01072506 -0.09354048 -0.12314818 -0.05923981 -0.03596157 -0.07841306 #> [13] -0.13175388 -0.11441342 -0.11280667 -0.12561669 -0.08822084 -0.17365706 #> [19] -0.17132052 -0.14840042 -0.08447864 -0.10445284 -0.17663020 -0.19065413 #> [25] -0.13413900 -0.08936860 -0.15019468 -0.15571767 -0.17050442 -0.15814674 #>  #> $ie #>  [1]  0.264329030  0.101709816 -0.183964708 -0.020497847  0.069254386 #>  [6]  0.086299996  0.040488767 -0.069202761 -0.167184456  0.111532939 #> [11] -0.044769687 -0.044859570 -0.054034211  0.144136768 -0.023062960 #> [16] -0.287330302  0.198971087 -0.137268598 -0.036948221 -0.057389311 #> [21]  0.069654486  0.133809193 -0.072211253 -0.096740681  0.133346093 #> [26]  0.062593275 -0.136219497  0.054886276 -0.007208414 -0.032119633 #>"},{"path":"/reference/fitted.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model fitted values — fitted.spmodel","title":"Extract model fitted values — fitted.spmodel","text":"Extract fitted values fitted model objects. fitted.values alias.","code":""},{"path":"/reference/fitted.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model fitted values — fitted.spmodel","text":"","code":"# S3 method for splm fitted(object, type = \"response\", ...)  # S3 method for splm fitted.values(object, type = \"response\", ...)  # S3 method for spautor fitted(object, type = \"response\", ...)  # S3 method for spautor fitted.values(object, type = \"response\", ...)  # S3 method for spglm fitted(object, type = \"response\", ...)  # S3 method for spglm fitted.values(object, type = \"response\", ...)  # S3 method for spgautor fitted(object, type = \"response\", ...)  # S3 method for spgautor fitted.values(object, type = \"response\", ...)"},{"path":"/reference/fitted.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model fitted values — fitted.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). type \"response\" fitted values response, \"spcov\" fitted values spatial random errors, \"randcov\" fitted values random effects. spglm() spgautor(), \"link\" fitted values link scale. default \"response\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/fitted.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model fitted values — fitted.spmodel","text":"fitted values according type.","code":""},{"path":"/reference/fitted.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract model fitted values — fitted.spmodel","text":"type \"response\", fitted values observation standard fitted values \\(X \\hat{\\beta}\\). type \"spcov\" fitted values observation (generally) best linear unbiased predictors spatial dependent spatial independent random error. type \"randcov\", fitted values level random effect (generally) best linear unbiased predictors corresponding random effect. fitted values type \"spcov\" \"randcov\" can generally used check assumptions component fitted model object (e.g., check Gaussian assumption).","code":""},{"path":"/reference/fitted.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model fitted values — fitted.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) fitted(spmod) #>        1        2        3        4        5        6        7        8  #> 1.966709 2.253251 2.046762 2.049806 2.336347 2.046762 2.049806 1.966709  #>        9       10       11       12       13       14       15       16  #> 2.253251 2.046762 1.966709 2.253251 2.046762 2.336347 2.129858 2.049806  #>       17       18       19       20       21       22       23       24  #> 2.336347 2.129858 2.253251 2.046762 2.129858 1.966709 2.049806 2.336347  #>       25       26       27       28       29       30  #> 2.129858 2.049806 2.336347 2.129858 1.966709 2.253251  fitted.values(spmod) #>        1        2        3        4        5        6        7        8  #> 1.966709 2.253251 2.046762 2.049806 2.336347 2.046762 2.049806 1.966709  #>        9       10       11       12       13       14       15       16  #> 2.253251 2.046762 1.966709 2.253251 2.046762 2.336347 2.129858 2.049806  #>       17       18       19       20       21       22       23       24  #> 2.336347 2.129858 2.253251 2.046762 2.129858 1.966709 2.049806 2.336347  #>       25       26       27       28       29       30  #> 2.129858 2.049806 2.336347 2.129858 1.966709 2.253251  fitted(spmod, type = \"spcov\") #> $de #>           1           2           3           4           5           6  #>  0.19009135  0.08808946 -0.05288712 -0.06331824 -0.02856777  0.09098076  #>           7           8           9          10          11          12  #>  0.01072506 -0.09354048 -0.12314818 -0.05923981 -0.03596157 -0.07841306  #>          13          14          15          16          17          18  #> -0.13175388 -0.11441342 -0.11280667 -0.12561669 -0.08822084 -0.17365706  #>          19          20          21          22          23          24  #> -0.17132052 -0.14840042 -0.08447864 -0.10445284 -0.17663020 -0.19065413  #>          25          26          27          28          29          30  #> -0.13413900 -0.08936860 -0.15019468 -0.15571767 -0.17050442 -0.15814674  #>  #> $ie #>            1            2            3            4            5            6  #>  0.264329030  0.101709816 -0.183964708 -0.020497847  0.069254386  0.086299996  #>            7            8            9           10           11           12  #>  0.040488767 -0.069202761 -0.167184456  0.111532939 -0.044769687 -0.044859570  #>           13           14           15           16           17           18  #> -0.054034211  0.144136768 -0.023062960 -0.287330302  0.198971087 -0.137268598  #>           19           20           21           22           23           24  #> -0.036948221 -0.057389311  0.069654486  0.133809193 -0.072211253 -0.096740681  #>           25           26           27           28           29           30  #>  0.133346093  0.062593275 -0.136219497  0.054886276 -0.007208414 -0.032119633  #>"},{"path":"/reference/formula.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Model formulae — formula.spmod","title":"Model formulae — formula.spmod","text":"Return formula used fitted model object.","code":""},{"path":"/reference/formula.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model formulae — formula.spmod","text":"","code":"# S3 method for spmod formula(x, ...)"},{"path":"/reference/formula.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model formulae — formula.spmod","text":"x fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/formula.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model formulae — formula.spmod","text":"formula used fitted model object.","code":""},{"path":"/reference/formula.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model formulae — formula.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) formula(spmod) #> z ~ water + tarp #> <environment: 0x0000000008387298>"},{"path":"/reference/formula.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Model formulae — formula.spmodel","title":"Model formulae — formula.spmodel","text":"Return formula used fitted model object.","code":""},{"path":"/reference/formula.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model formulae — formula.spmodel","text":"","code":"# S3 method for splm formula(x, ...)  # S3 method for spautor formula(x, ...)  # S3 method for spglm formula(x, ...)  # S3 method for spgautor formula(x, ...)"},{"path":"/reference/formula.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model formulae — formula.spmodel","text":"x fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/formula.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model formulae — formula.spmodel","text":"formula used fitted model object.","code":""},{"path":"/reference/formula.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model formulae — formula.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) formula(spmod) #> z ~ water + tarp #> <environment: 0x00000243f0dcd4f0>"},{"path":"/reference/glance.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at a fitted model object — glance.spmod","title":"Glance at a fitted model object — glance.spmod","text":"Returns row model summaries fitted model object. Glance returns number columns models estimation methods. particular summary undefined model estimation method (e.g., likelihood statistics estimation methods \"sv-wls\" \"sv-cl\"), NA returned summary.","code":""},{"path":"/reference/glance.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at a fitted model object — glance.spmod","text":"","code":"# S3 method for spmod glance(x, ...)"},{"path":"/reference/glance.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at a fitted model object — glance.spmod","text":"x fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/glance.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at a fitted model object — glance.spmod","text":"single-row tibble columns n sample size. p number fixed effects. npar number estimated covariance parameters. value optimized value fitting function AIC AIC. AICc AICc. logLik log-likelihood deviance deviance. pseudo.r.squared pseudo r-squared","code":""},{"path":[]},{"path":"/reference/glance.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glance at a fitted model object — glance.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) glance(spmod) #> # A tibble: 1 x 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1    30     4     3 -5.85 0.150  1.07   2.92       26            0.396"},{"path":"/reference/glance.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at a fitted model object — glance.spmodel","title":"Glance at a fitted model object — glance.spmodel","text":"Returns row model summaries fitted model object. Glance returns number columns models estimation methods. particular summary undefined model estimation method (e.g., likelihood statistics estimation methods \"sv-wls\" \"sv-cl\" splm() objects), NA returned summary.","code":""},{"path":"/reference/glance.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at a fitted model object — glance.spmodel","text":"","code":"# S3 method for splm glance(x, ...)  # S3 method for spautor glance(x, ...)  # S3 method for spglm glance(x, ...)  # S3 method for spgautor glance(x, ...)"},{"path":"/reference/glance.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at a fitted model object — glance.spmodel","text":"x fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/glance.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at a fitted model object — glance.spmodel","text":"single-row tibble columns n sample size. p number fixed effects. npar number estimated covariance parameters. value optimized value fitting function AIC AIC. AICc AICc. logLik log-likelihood deviance deviance. pseudo.r.squared pseudo r-squared","code":""},{"path":[]},{"path":"/reference/glance.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glance at a fitted model object — glance.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) glance(spmod) #> # A tibble: 1 × 9 #>       n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1    30     4     3 -5.85 0.150  1.07   2.92     26.0            0.396"},{"path":"/reference/glances.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at many fitted model objects — glances","title":"Glance at many fitted model objects — glances","text":"glances() repeatedly calls glance() several fitted model objects binds output together, sorted column interest.","code":""},{"path":"/reference/glances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at many fitted model objects — glances","text":"","code":"glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for splm glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spautor glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for splm_list glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spautor_list glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spglm glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spgautor glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spglm_list glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)  # S3 method for spgautor_list glances(object, ..., sort_by = \"AICc\", decreasing = FALSE)"},{"path":"/reference/glances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at many fitted model objects — glances","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... Additional fitted model objects. Ignored object class splm_list, spautor_list, spglm_list, spgautor_list. sort_by Sort glance statistic (.e., name column output glance() order model input (sort_by = \"order\"). default \"AICc\". decreasing sort_by decreasing ? default FALSE.","code":""},{"path":"/reference/glances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at many fitted model objects — glances","text":"tibble row represents output glance() fitted model object.","code":""},{"path":"/reference/glances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glance at many fitted model objects — glances","text":"","code":"lmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"none\" ) spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) glances(lmod, spmod) #> # A tibble: 2 × 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 lmod     30     4     1 -1.68 0.323 0.466  0.838     26.0            0.277 #> 2 spmod    30     4     3 -5.85 0.150 1.07   2.92      26.0            0.396 glances(lmod, spmod, sort_by = \"logLik\", decreasing = TRUE) #> # A tibble: 2 × 10 #>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared #>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl> #> 1 spmod    30     4     3 -5.85 0.150 1.07   2.92      26.0            0.396 #> 2 lmod     30     4     1 -1.68 0.323 0.466  0.838     26.0            0.277"},{"path":"/reference/hatvalues.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute leverage (hat) values — hatvalues.spmod","title":"Compute leverage (hat) values — hatvalues.spmod","text":"Compute leverage (hat) value observation fitted model object.","code":""},{"path":"/reference/hatvalues.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute leverage (hat) values — hatvalues.spmod","text":"","code":"# S3 method for spmod hatvalues(model, ...)"},{"path":"/reference/hatvalues.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute leverage (hat) values — hatvalues.spmod","text":"model fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/hatvalues.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute leverage (hat) values — hatvalues.spmod","text":"vector leverage (hat) values observation fitted model object.","code":""},{"path":"/reference/hatvalues.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute leverage (hat) values — hatvalues.spmod","text":"Leverage values measure far observation's explanatory variables relative average explanatory variables. words, observations high leverage typically considered extreme unusual combination explanatory variables. Leverage values diagonal hat (projection) matrix. larger hat value, larger leverage.","code":""},{"path":[]},{"path":"/reference/hatvalues.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute leverage (hat) values — hatvalues.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) hatvalues(spmod) #>  [1] 0.72441693 0.17926053 0.12823241 0.18232195 0.12139562 0.09358296 #>  [7] 0.15361583 0.07779772 0.11039849 0.13550055 0.05172623 0.10717098 #> [13] 0.08943048 0.14073706 0.09669171 0.12126227 0.10811090 0.08493999 #> [19] 0.12628777 0.08629920 0.09131000 0.16084423 0.11122322 0.09438305 #> [25] 0.06576857 0.05359705 0.10609508 0.08015340 0.19307547 0.12437035"},{"path":"/reference/hatvalues.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute leverage (hat) values — hatvalues.spmodel","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"Compute leverage (hat) value observation fitted model object.","code":""},{"path":"/reference/hatvalues.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"","code":"# S3 method for splm hatvalues(model, ...)  # S3 method for spautor hatvalues(model, ...)  # S3 method for spglm hatvalues(model, ...)  # S3 method for spgautor hatvalues(model, ...)"},{"path":"/reference/hatvalues.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"model fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/hatvalues.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"vector leverage (hat) values observation fitted model object.","code":""},{"path":"/reference/hatvalues.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"Leverage values measure far observation's explanatory variables relative average explanatory variables. words, observations high leverage typically considered extreme unusual combination explanatory variables. Leverage values diagonal hat (projection) matrix. larger hat value, larger leverage.","code":""},{"path":[]},{"path":"/reference/hatvalues.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute leverage (hat) values — hatvalues.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) hatvalues(spmod) #>         1         2         3         4         5         6         7         8  #> 0.1156336 0.1367840 0.1367636 0.1736908 0.1525458 0.1473930 0.1559325 0.1218631  #>         9        10        11        12        13        14        15        16  #> 0.1194297 0.1309940 0.1096135 0.1292969 0.1234044 0.1272806 0.1193746 0.1096135  #>        17        18        19        20        21        22        23        24  #> 0.1292969 0.1234044 0.1272806 0.1193746 0.1473930 0.1559325 0.1218631 0.1194297  #>        25        26        27        28        29        30  #> 0.1309940 0.1156336 0.1367840 0.1367636 0.1736908 0.1525458"},{"path":"/reference/influence.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression diagnostics — influence.spmod","title":"Regression diagnostics — influence.spmod","text":"Provides basic quantities used forming wide variety diagnostics checking quality fitted model objects.","code":""},{"path":"/reference/influence.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression diagnostics — influence.spmod","text":"","code":"# S3 method for spmod influence(model, ...)"},{"path":"/reference/influence.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression diagnostics — influence.spmod","text":"model fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/influence.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression diagnostics — influence.spmod","text":"tibble residuals (.resid), leverage values (.hat), cook's distance (.cooksd), standardized residuals (.std.resid).","code":""},{"path":"/reference/influence.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression diagnostics — influence.spmod","text":"function calls residuals.spmod(), hatvalues.spmod(), cooks.distance.spmod() puts results tibble. primarily used calling augment.spmod().","code":""},{"path":[]},{"path":"/reference/influence.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression diagnostics — influence.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) influence(spmod) #> # A tibble: 30 x 4 #>     .resid   .hat   .cooksd .std.resid #>      <dbl>  <dbl>     <dbl>      <dbl> #>  1  0.454  0.724  1.02          2.37   #>  2  0.190  0.179  0.0306       -0.827  #>  3 -0.237  0.128  0.195        -2.47   #>  4 -0.0838 0.182  0.0109       -0.490  #>  5  0.0407 0.121  0.00444       0.383  #>  6  0.177  0.0936 0.0000222    -0.0308 #>  7  0.0512 0.154  0.00542      -0.376  #>  8 -0.163  0.0778 0.0221       -1.07   #>  9 -0.290  0.110  0.0546       -1.41   #> 10  0.0522 0.136  0.0236        0.835  #> # ... with 20 more rows"},{"path":"/reference/influence.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression diagnostics — influence.spmodel","title":"Regression diagnostics — influence.spmodel","text":"Provides basic quantities used forming wide variety diagnostics checking quality fitted model objects.","code":""},{"path":"/reference/influence.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression diagnostics — influence.spmodel","text":"","code":"# S3 method for splm influence(model, ...)  # S3 method for spautor influence(model, ...)  # S3 method for spglm influence(model, ...)  # S3 method for spgautor influence(model, ...)"},{"path":"/reference/influence.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression diagnostics — influence.spmodel","text":"model fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/influence.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression diagnostics — influence.spmodel","text":"tibble residuals (.resid), leverage values (.hat), cook's distance (.cooksd), standardized residuals (.std.resid).","code":""},{"path":"/reference/influence.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression diagnostics — influence.spmodel","text":"function calls residuals.spmodel(), hatvalues.spmodel(), cooks.distance.spmodel() puts results tibble. primarily used calling augment.spmodel().","code":""},{"path":[]},{"path":"/reference/influence.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression diagnostics — influence.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) influence(spmod) #> # A tibble: 30 × 4 #>     .resid  .hat .cooksd .std.resid #>      <dbl> <dbl>   <dbl>      <dbl> #>  1  0.454  0.116 0.209        2.53  #>  2  0.190  0.137 0.0468       1.09  #>  3 -0.237  0.137 0.0752      -1.38  #>  4 -0.0838 0.174 0.00211     -0.200 #>  5  0.0407 0.153 0.0159       0.594 #>  6  0.177  0.147 0.0434       1.00  #>  7  0.0512 0.156 0.00936      0.450 #>  8 -0.163  0.122 0.0135      -0.624 #>  9 -0.290  0.119 0.0642      -1.38  #> 10  0.0522 0.131 0.0264       0.837 #> # ℹ 20 more rows"},{"path":"/reference/labels.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Find labels from object — labels.spmod","title":"Find labels from object — labels.spmod","text":"Find suitable set labels fitted model object.","code":""},{"path":"/reference/labels.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find labels from object — labels.spmod","text":"","code":"# S3 method for spmod labels(object, ...)"},{"path":"/reference/labels.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find labels from object — labels.spmod","text":"object fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/labels.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find labels from object — labels.spmod","text":"character vector containing terms used fixed effects fitted model object.","code":""},{"path":"/reference/labels.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find labels from object — labels.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) labels(spmod) #> [1] \"water\" \"tarp\""},{"path":"/reference/labels.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Find labels from object — labels.spmodel","title":"Find labels from object — labels.spmodel","text":"Find suitable set labels fitted model object.","code":""},{"path":"/reference/labels.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find labels from object — labels.spmodel","text":"","code":"# S3 method for splm labels(object, ...)  # S3 method for spautor labels(object, ...)  # S3 method for spglm labels(object, ...)  # S3 method for spgautor labels(object, ...)"},{"path":"/reference/labels.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find labels from object — labels.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/labels.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find labels from object — labels.spmodel","text":"character vector containing terms used fixed effects fitted model object.","code":""},{"path":"/reference/labels.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find labels from object — labels.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) labels(spmod) #> [1] \"water\" \"tarp\""},{"path":"/reference/logLik.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract log-likelihood — logLik.spmod","title":"Extract log-likelihood — logLik.spmod","text":"Find log-likelihood fitted model estmethod \"ml\" \"reml\".","code":""},{"path":"/reference/logLik.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract log-likelihood — logLik.spmod","text":"","code":"# S3 method for spmod logLik(object, ...)"},{"path":"/reference/logLik.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract log-likelihood — logLik.spmod","text":"object fitted model object splm() spautor() estmethod \"ml\" \"reml\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/logLik.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract log-likelihood — logLik.spmod","text":"log-likelihood.","code":""},{"path":"/reference/logLik.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract log-likelihood — logLik.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) logLik(spmod) #> [1] 2.924924"},{"path":"/reference/logLik.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract log-likelihood — logLik.spmodel","title":"Extract log-likelihood — logLik.spmodel","text":"Find log-likelihood fitted model estmethod \"ml\" \"reml\".","code":""},{"path":"/reference/logLik.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract log-likelihood — logLik.spmodel","text":"","code":"# S3 method for splm logLik(object, ...)  # S3 method for spautor logLik(object, ...)  # S3 method for spglm logLik(object, ...)  # S3 method for spgautor logLik(object, ...)"},{"path":"/reference/logLik.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract log-likelihood — logLik.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor() estmethod \"ml\" \"reml\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/logLik.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract log-likelihood — logLik.spmodel","text":"log-likelihood.","code":""},{"path":"/reference/logLik.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract log-likelihood — logLik.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) logLik(spmod) #> [1] 2.924924"},{"path":"/reference/loocv.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform leave-one-out cross validation — loocv","title":"Perform leave-one-out cross validation — loocv","text":"Perform leave-one-cross validation options computationally efficient approximations big data.","code":""},{"path":"/reference/loocv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform leave-one-out cross validation — loocv","text":"","code":"loocv(object, ...)  # S3 method for splm loocv(object, cv_predict = FALSE, se.fit = FALSE, local, ...)  # S3 method for spautor loocv(object, cv_predict = FALSE, se.fit = FALSE, local, ...)  # S3 method for spglm loocv(object, cv_predict = FALSE, se.fit = FALSE, local, ...)  # S3 method for spgautor loocv(object, cv_predict = FALSE, se.fit = FALSE, local, ...)"},{"path":"/reference/loocv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform leave-one-out cross validation — loocv","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency). cv_predict logical indicating whether leave-one-fitted values returned. Defaults FALSE. object spglm() spgautor(), fitted values returned link scale. se.fit logical indicating whether leave-one-prediction standard errors returned. Defaults FALSE. object spglm() spgautor(), standard errors correspond fitted values returned link scale. local list logical. list, specific list elements described predict.spmodel() control big data approximation behavior. logical, TRUE chooses default list elements list version local specified predict.spmodel(). Defaults FALSE, performs exact computations.","code":""},{"path":"/reference/loocv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform leave-one-out cross validation — loocv","text":"cv_predict = FALSE se.fit = FALSE, fit statistics tibble (bias, MSPE, RMSPE, cor2; see Details). cv_predict = TRUE se.fit = TRUE, list elements: stats, fit statistics tibble (bias, MSPE, RMSPE, cor2; see Details); cv_predict, numeric vector leave-one-predictions observation (cv_predict = TRUE); se.fit, numeric vector leave-one-prediction standard errors observation (se.fit = TRUE).","code":""},{"path":"/reference/loocv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform leave-one-out cross validation — loocv","text":"observation held-data set remaining data used make prediction held-observation. compared true value observation several fit statistics computed: bias, mean-squared-prediction error (MSPE), root-mean-squared-prediction error (RMSPE), squared correlation (cor2) observed data leave-one-predictions (regarded prediction version r-squared appropriate comparing across spatial nonspatial models). Generally, bias near zero well-fitting models. lower MSPE RMSPE, better model fit (according leave--criterion). higher cor2, better model fit (according leave--criterion). cor2 returned object fit using spglm() spgautor(), applicable linear models.","code":""},{"path":"/reference/loocv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform leave-one-out cross validation — loocv","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) loocv(spmod) #> # A tibble: 1 × 4 #>      bias   MSPE RMSPE  cor2 #>     <dbl>  <dbl> <dbl> <dbl> #> 1 0.00373 0.0353 0.188 0.218 loocv(spmod, cv_predict = TRUE, se.fit = TRUE) #> $stats #> # A tibble: 1 × 4 #>      bias   MSPE RMSPE  cor2 #>     <dbl>  <dbl> <dbl> <dbl> #> 1 0.00373 0.0353 0.188 0.218 #>  #> $cv_predict #>  [1] 1.976891 2.279097 2.104800 2.001062 2.252981 2.081761 2.036528 1.906351 #>  [9] 2.209990 1.920595 1.953973 2.197366 1.941609 2.149225 2.029657 2.073248 #> [17] 2.148203 2.023779 2.100568 1.929728 2.000196 1.782930 1.907800 2.191920 #> [25] 1.915703 1.917835 2.269514 1.941046 1.801330 2.120519 #>  #> $se.fit #>  [1] 0.1948550 0.1908319 0.1902988 0.1966091 0.2011680 0.1929935 0.1896957 #>  [8] 0.1828196 0.1827176 0.1901259 0.1852316 0.1842182 0.1836098 0.1843557 #> [15] 0.1869189 0.1852316 0.1842182 0.1836098 0.1843557 0.1869189 0.1929935 #> [22] 0.1896957 0.1828196 0.1827176 0.1901259 0.1948550 0.1908319 0.1902988 #> [29] 0.1966091 0.2011680 #>"},{"path":"/reference/model.frame.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model frame from a fitted model object — model.frame.spmod","title":"Extract the model frame from a fitted model object — model.frame.spmod","text":"Extract model frame fitted model object.","code":""},{"path":"/reference/model.frame.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model frame from a fitted model object — model.frame.spmod","text":"","code":"# S3 method for spmod model.frame(formula, ...)"},{"path":"/reference/model.frame.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model frame from a fitted model object — model.frame.spmod","text":"formula fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/model.frame.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model frame from a fitted model object — model.frame.spmod","text":"model frame contains variables used formula fitted model object.","code":""},{"path":[]},{"path":"/reference/model.frame.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model frame from a fitted model object — model.frame.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) model.frame(spmod) #>        z water  tarp #> 1  2.421     Y clear #> 2  2.443     Y shade #> 3  1.810     Y  none #> 4  1.966     N clear #> 5  2.377     N shade #> 6  2.224     Y  none #> 7  2.101     N clear #> 8  1.804     Y clear #> 9  1.963     Y shade #> 10 2.099     Y  none #> 11 1.886     Y clear #> 12 2.130     Y shade #> 13 1.861     Y  none #> 14 2.366     N shade #> 15 1.994     N  none #> 16 1.637     N clear #> 17 2.447     N shade #> 18 1.819     N  none #> 19 2.045     Y shade #> 20 1.841     Y  none #> 21 2.115     N  none #> 22 1.996     Y clear #> 23 1.801     N clear #> 24 2.049     N shade #> 25 2.129     N  none #> 26 2.023     N clear #> 27 2.050     N shade #> 28 2.029     N  none #> 29 1.789     Y clear #> 30 2.063     Y shade"},{"path":"/reference/model.frame.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model frame from a fitted model object — model.frame.spmodel","title":"Extract the model frame from a fitted model object — model.frame.spmodel","text":"Extract model frame fitted model object.","code":""},{"path":"/reference/model.frame.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model frame from a fitted model object — model.frame.spmodel","text":"","code":"# S3 method for splm model.frame(formula, ...)  # S3 method for spautor model.frame(formula, ...)  # S3 method for spglm model.frame(formula, ...)  # S3 method for spgautor model.frame(formula, ...)"},{"path":"/reference/model.frame.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model frame from a fitted model object — model.frame.spmodel","text":"formula fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/model.frame.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model frame from a fitted model object — model.frame.spmodel","text":"model frame contains variables used formula fitted model object.","code":""},{"path":[]},{"path":"/reference/model.frame.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model frame from a fitted model object — model.frame.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) model.frame(spmod) #>        z water  tarp #> 1  2.421     Y clear #> 2  2.443     Y shade #> 3  1.810     Y  none #> 4  1.966     N clear #> 5  2.377     N shade #> 6  2.224     Y  none #> 7  2.101     N clear #> 8  1.804     Y clear #> 9  1.963     Y shade #> 10 2.099     Y  none #> 11 1.886     Y clear #> 12 2.130     Y shade #> 13 1.861     Y  none #> 14 2.366     N shade #> 15 1.994     N  none #> 16 1.637     N clear #> 17 2.447     N shade #> 18 1.819     N  none #> 19 2.045     Y shade #> 20 1.841     Y  none #> 21 2.115     N  none #> 22 1.996     Y clear #> 23 1.801     N clear #> 24 2.049     N shade #> 25 2.129     N  none #> 26 2.023     N clear #> 27 2.050     N shade #> 28 2.029     N  none #> 29 1.789     Y clear #> 30 2.063     Y shade"},{"path":"/reference/model.matrix.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model matrix from a fitted model object — model.matrix.spmod","title":"Extract the model matrix from a fitted model object — model.matrix.spmod","text":"Extract model matrix (X) fitted model object.","code":""},{"path":"/reference/model.matrix.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model matrix from a fitted model object — model.matrix.spmod","text":"","code":"# S3 method for spmod model.matrix(object, ...)"},{"path":"/reference/model.matrix.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model matrix from a fitted model object — model.matrix.spmod","text":"object fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/model.matrix.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model matrix from a fitted model object — model.matrix.spmod","text":"model matrix (fixed effects), whose rows represent observations whose columns represent explanatory variables corresponding fixed effect.","code":""},{"path":[]},{"path":"/reference/model.matrix.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model matrix from a fitted model object — model.matrix.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) model.matrix(spmod) #>    (Intercept) waterY tarpnone tarpshade #> 1            1      1        0         0 #> 2            1      1        0         1 #> 3            1      1        1         0 #> 4            1      0        0         0 #> 5            1      0        0         1 #> 6            1      1        1         0 #> 7            1      0        0         0 #> 8            1      1        0         0 #> 9            1      1        0         1 #> 10           1      1        1         0 #> 11           1      1        0         0 #> 12           1      1        0         1 #> 13           1      1        1         0 #> 14           1      0        0         1 #> 15           1      0        1         0 #> 16           1      0        0         0 #> 17           1      0        0         1 #> 18           1      0        1         0 #> 19           1      1        0         1 #> 20           1      1        1         0 #> 21           1      0        1         0 #> 22           1      1        0         0 #> 23           1      0        0         0 #> 24           1      0        0         1 #> 25           1      0        1         0 #> 26           1      0        0         0 #> 27           1      0        0         1 #> 28           1      0        1         0 #> 29           1      1        0         0 #> 30           1      1        0         1 #> attr(,\"assign\") #> [1] 0 1 2 2 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$water #> [1] \"contr.treatment\" #>  #> attr(,\"contrasts\")$tarp #> [1] \"contr.treatment\" #>"},{"path":"/reference/model.matrix.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the model matrix from a fitted model object — model.matrix.spmodel","title":"Extract the model matrix from a fitted model object — model.matrix.spmodel","text":"Extract model matrix (X) fitted model object.","code":""},{"path":"/reference/model.matrix.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the model matrix from a fitted model object — model.matrix.spmodel","text":"","code":"# S3 method for splm model.matrix(object, ...)  # S3 method for spautor model.matrix(object, ...)  # S3 method for spglm model.matrix(object, ...)  # S3 method for spgautor model.matrix(object, ...)"},{"path":"/reference/model.matrix.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the model matrix from a fitted model object — model.matrix.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/model.matrix.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the model matrix from a fitted model object — model.matrix.spmodel","text":"model matrix (fixed effects), whose rows represent observations whose columns represent explanatory variables corresponding fixed effect.","code":""},{"path":[]},{"path":"/reference/model.matrix.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the model matrix from a fitted model object — model.matrix.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) model.matrix(spmod) #>    (Intercept) waterY tarpnone tarpshade #> 1            1      1        0         0 #> 2            1      1        0         1 #> 3            1      1        1         0 #> 4            1      0        0         0 #> 5            1      0        0         1 #> 6            1      1        1         0 #> 7            1      0        0         0 #> 8            1      1        0         0 #> 9            1      1        0         1 #> 10           1      1        1         0 #> 11           1      1        0         0 #> 12           1      1        0         1 #> 13           1      1        1         0 #> 14           1      0        0         1 #> 15           1      0        1         0 #> 16           1      0        0         0 #> 17           1      0        0         1 #> 18           1      0        1         0 #> 19           1      1        0         1 #> 20           1      1        1         0 #> 21           1      0        1         0 #> 22           1      1        0         0 #> 23           1      0        0         0 #> 24           1      0        0         1 #> 25           1      0        1         0 #> 26           1      0        0         0 #> 27           1      0        0         1 #> 28           1      0        1         0 #> 29           1      1        0         0 #> 30           1      1        0         1 #> attr(,\"assign\") #> [1] 0 1 2 2 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$water #> [1] \"contr.treatment\" #>  #> attr(,\"contrasts\")$tarp #> [1] \"contr.treatment\" #>"},{"path":"/reference/moose.html","id":null,"dir":"Reference","previous_headings":"","what":"Moose counts and presence in Alaska, USA — moose","title":"Moose counts and presence in Alaska, USA — moose","text":"Moose counts presence Alaska, USA.","code":""},{"path":"/reference/moose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moose counts and presence in Alaska, USA — moose","text":"","code":"moose"},{"path":"/reference/moose.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Moose counts and presence in Alaska, USA — moose","text":"sf object 218 rows 5 columns. elev: elevation. strat: factor representing strata (used sampling). Can take values L M. count: count (number) moose observed. presence: binary factor representing whether moose observed (value 0) least one moose observed (va ue 1). geometry: POINT geometry representing coordinates Alaska Albers projection (EPSG: 3338).","code":""},{"path":"/reference/moose.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Moose counts and presence in Alaska, USA — moose","text":"Alaska Department Fish Game, Division Wildlife Conservation released data set CC0 license.","code":""},{"path":"/reference/moose_preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Locations at which to predict moose counts and presence in Alaska, USA — moose_preds","title":"Locations at which to predict moose counts and presence in Alaska, USA — moose_preds","text":"Locations predict moose counts presence Alaska, USA.","code":""},{"path":"/reference/moose_preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locations at which to predict moose counts and presence in Alaska, USA — moose_preds","text":"","code":"moose_preds"},{"path":"/reference/moose_preds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Locations at which to predict moose counts and presence in Alaska, USA — moose_preds","text":"sf object 100 rows 3 columns. elev: elevation. strat: factor representing strata (used sampling). Can take values L M. geometry: POINT geometry representing coordinates Alaska Albers projection (EPSG: 3338).","code":""},{"path":"/reference/moose_preds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Locations at which to predict moose counts and presence in Alaska, USA — moose_preds","text":"Alaska Department Fish Game, Division Wildlife Conservation released data set CC0 license.","code":""},{"path":"/reference/moss.html","id":null,"dir":"Reference","previous_headings":"","what":"Heavy metals in mosses near a mining road in Alaska, USA — moss","title":"Heavy metals in mosses near a mining road in Alaska, USA — moss","text":"Heavy metals mosses near mining road Alaska, USA.","code":""},{"path":"/reference/moss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heavy metals in mosses near a mining road in Alaska, USA — moss","text":"","code":"moss"},{"path":"/reference/moss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Heavy metals in mosses near a mining road in Alaska, USA — moss","text":"sf object 365 rows 10 columns: sample: factor sample identifier. samples replicated field laboratory. result, 318 unique sample identifiers. field_dup: factor representing field duplicate. Takes values 1 2. lab_rep: factor representing laboratory replicate. Takes values 1 2. year: factor representing year. Takes values 2001 2006. sideroad: factor representing direction relative haul road. Takes values N (north haul road) S (south haul road). log_dist2road: log distance (meters) haul road. log_Zn: log zinc concentration moss tissue (mg/kg). geometry: POINT geometry representing coordinates Alaska Albers projection (EPSG: 3338).","code":""},{"path":"/reference/moss.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Heavy metals in mosses near a mining road in Alaska, USA — moss","text":"Data obtained Peter Neitlich Linda Hasselbach National Park Service.  Data used publications listed References.","code":""},{"path":"/reference/moss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heavy metals in mosses near a mining road in Alaska, USA — moss","text":"Neitlich, P.N., Ver Hoef, J.M., Berryman, S. D., Mines, ., Geiser, L.H., Hasselbach, L.M., Shiel, . E. 2017. Trends Spatial Patterns Heavy Metal Deposition National Park Service Lands Along Red Dog Mine Haul Road, Alaska, 2001-2006. PLOS ONE 12(5):e0177936 DOI:10.1371/journal.pone.0177936 Hasselbach, L., Ver Hoef, J.M., Ford, J., Neitlich, P., Berryman, S., Wolk B. Bohle, T. 2005. Spatial Patterns Cadmium, Lead Zinc Deposition National Park Service Lands Vicinity Red Dog Mine, Alaska. Science Total Environment 348: 211-230.","code":""},{"path":"/reference/plot.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fitted model diagnostics — plot.spmod","title":"Plot fitted model diagnostics — plot.spmod","text":"Plot fitted model diagnostics residuals vs fitted values, quantile-quantile, scale-location, Cook's distance, residuals vs leverage, Cook's distance vs leverage, fitted spatial covariance function.","code":""},{"path":"/reference/plot.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fitted model diagnostics — plot.spmod","text":"","code":"# S3 method for spmod plot(x, which, ...)"},{"path":"/reference/plot.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fitted model diagnostics — plot.spmod","text":"x fitted model object splm() spautor(). integer vector taking values 1 7, indicates plots return. Available plots described Details. length greater one, additional plots stepped order using <Return>. default splm() fitted model objects = c(1, 2, 7). default spautor() fitted model objects = c(1, 2). ... arguments passed methods.","code":""},{"path":"/reference/plot.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fitted model diagnostics — plot.spmod","text":"return value. Function called plotting side effects.","code":""},{"path":"/reference/plot.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot fitted model diagnostics — plot.spmod","text":"splm() spautor(), values make corresponding plot: 1: Standardized residuals vs fitted values (response) 2: Normal quantile-quantile plot standardized residuals 3: Scale-location plot standardized residuals 4: Cook's distance 5: Standardized residuals vs leverage 6: Cook's distance vs leverage splm(), additional value : 7: Fitted spatial covariance function vs distance","code":""},{"path":"/reference/plot.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fitted model diagnostics — plot.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) plot(spmod)    plot(spmod, which = c(1, 2, 4, 6))"},{"path":"/reference/plot.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fitted model diagnostics — plot.spmodel","title":"Plot fitted model diagnostics — plot.spmodel","text":"Plot fitted model diagnostics residuals vs fitted values, quantile-quantile, scale-location, Cook's distance, residuals vs leverage, Cook's distance vs leverage, fitted spatial covariance function, fitted anisotropic level curve equal correlation.","code":""},{"path":"/reference/plot.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fitted model diagnostics — plot.spmodel","text":"","code":"# S3 method for splm plot(x, which, ...)  # S3 method for spautor plot(x, which, ...)  # S3 method for spglm plot(x, which, ...)  # S3 method for spgautor plot(x, which, ...)"},{"path":"/reference/plot.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fitted model diagnostics — plot.spmodel","text":"x fitted model object splm(), spautor(), spglm(), spgautor(). integer vector taking values 1 7, indicates plots return. Available plots described Details. length greater one, additional plots stepped order using <Return>. default splm() spglm() fitted model objects = c(1, 2, 7). default spautor() spgautor() fitted model objects = c(1, 2). ... arguments passed methods.","code":""},{"path":"/reference/plot.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fitted model diagnostics — plot.spmodel","text":"return value. Function called plotting side effects.","code":""},{"path":"/reference/plot.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot fitted model diagnostics — plot.spmodel","text":"fitted model objects,, values make corresponding plot: 1: Standardized residuals vs fitted values (response) 2: Normal quantile-quantile plot standardized residuals 3: Scale-location plot standardized residuals 4: Cook's distance 5: Standardized residuals vs leverage 6: Cook's distance vs leverage splm() spglm() fitted model objects, two additional values : 7: Fitted spatial covariance function vs distance 8: Fitted anisotropic level curve equal correlation","code":""},{"path":"/reference/plot.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fitted model diagnostics — plot.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) plot(spmod)    plot(spmod, which = c(1, 2, 4, 6))"},{"path":"/reference/predict.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions (Kriging) — predict.spmod","title":"Model predictions (Kriging) — predict.spmod","text":"Predicted values intervals based fitted model object.","code":""},{"path":"/reference/predict.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions (Kriging) — predict.spmod","text":"","code":"# S3 method for spmod predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spmod_list predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spmod_list predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )"},{"path":"/reference/predict.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions (Kriging) — predict.spmod","text":"object fitted model object splm() spautor(). newdata data frame sf object look variables predict. data frame, newdata must contain variables used formula(object) variables representing coordinates. sf object, newdata must contain variables used formula(object) coordinates obtained geometry newdata. omitted, missing data fitted model object used. se.fit logical indicating standard errors returned. default FALSE. interval Type interval calculation. default \"none\". options \"confidence\" (confidence intervals) \"prediction\" (prediction intervals). level Tolerance/confidence level. default 0.95. local optional logical list controlling big data approximation. omitted, local set TRUE FALSE based sample size fitted model object /prediction size newdata -- sample size prediction size exceeds 5000, local set TRUE, otherwise set FALSE. FALSE, big data approximation implemented. list provided, following arguments detail big data approximation: method: big data approximation method. method = \"\", observations used size ignored. method = \"distance\", size data observations closest (terms Euclidean distance) observation requiring prediction used. method = \"covariance\", size data observations highest covariance observation requiring prediction used. random effects partition factors used estimation spatial covariance function monotone decreasing, \"distance\" \"covariance\" equivalent. default \"covariance\". used models fit using splm(). size: number data observations use method \"distance\" \"covariance\". default 50. used models fit using splm(). parallel: TRUE, parallel processing via parallel package automatically used. default FALSE. ncores: parallel = TRUE, number cores parallelize . default number available cores machine. local list, least one list element must provided initialize default arguments list elements. local TRUE, defaults local chosen local transformed list(size = 50, method = \"covariance\", parallel = FALSE). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/predict.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions (Kriging) — predict.spmod","text":"spmod objects, se.fit FALSE, predict.spmod() returns vector predictions matrix predictions column names fit, lwr, upr interval \"confidence\" \"prediction\". se.fit TRUE, list following components returned: fit: vector matrix se.fit: standard error fit spmod_list objects, list contains relevant quantities spmod object.","code":""},{"path":"/reference/predict.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions (Kriging) — predict.spmod","text":"spmod objects, (empirical) best linear unbiased predictions (.e., Kriging predictions) site returned interval \"none\" \"prediction\" alongside standard errors. Prediction intervals also returned interval \"prediction\". interval \"confidence\", estimated mean returned alongside standard errors confidence intervals mean. spmod_list objects, predictions associated intervals standard errors returned spmod object.","code":""},{"path":"/reference/predict.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions (Kriging) — predict.spmod","text":"","code":"spmod <- splm(sulfate ~ 1,   data = sulfate,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) predict(spmod, sulfate_preds) #>         1         2         3         4         5         6         7         8  #>  1.618435 24.371803  8.945102 16.452377  4.925139 26.795441  2.869041 14.255129  #>         9        10        11        12        13        14        15        16  #>  1.527998 14.278871  1.201078 17.125020  1.320418 20.139591 21.295541 11.237529  #>        17        18        19        20        21        22        23        24  #> 18.683866  9.663971  1.788953 23.631754  3.275535  2.350008  2.048598  2.010150  #>        25        26        27        28        29        30        31        32  #>  3.201960  1.493974 18.623392  7.817861 18.797743  5.125182  1.807167  4.075101  #>        33        34        35        36        37        38        39        40  #> 12.427273  3.152303  1.293478  6.957413 18.939770  7.297365 14.674697 15.520246  #>        41        42        43        44        45        46        47        48  #> 12.405048 24.918442 17.301734 26.864540  1.603280  8.549257  3.784855 14.937188  #>        49        50        51        52        53        54        55        56  #> 24.494371  1.956122 27.204132 13.574770  2.576245  1.914563  7.487318 17.136559  #>        57        58        59        60        61        62        63        64  #> 17.014448  1.337634 18.683246 12.688687 15.393346 23.574345  1.579663 17.036054  #>        65        66        67        68        69        70        71        72  #> 28.544693  1.288539  1.140777  6.171537  3.437062 10.789035  3.615948 17.829018  #>        73        74        75        76        77        78        79        80  #>  8.908869  7.301336  2.126375  1.660542 19.373718  1.280324 16.307787 15.288219  #>        81        82        83        84        85        86        87        88  #> 17.793902  3.636393  9.731890  1.843879  1.673207  7.792596  2.326289  1.614190  #>        89        90        91        92        93        94        95        96  #>  2.694977 19.431798  4.044955  7.952300 12.423394 25.946812 15.137847 16.654989  #>        97        98        99       100  #> 21.603763 20.798900 16.737467 16.730626  predict(spmod, sulfate_preds, interval = \"prediction\") #>           fit        lwr       upr #> 1    1.618435 -6.4458691  9.682739 #> 2   24.371803 16.8475856 31.896020 #> 3    8.945102  1.0255301 16.864674 #> 4   16.452377  8.6427128 24.262041 #> 5    4.925139 -2.7823585 12.632637 #> 6   26.795441 19.2836818 34.307199 #> 7    2.869041 -5.0546545 10.792737 #> 8   14.255129  6.7727705 21.737488 #> 9    1.527998 -6.3288119  9.384809 #> 10  14.278871  6.6143954 21.943347 #> 11   1.201078 -6.7412477  9.143403 #> 12  17.125020  9.6129332 24.637107 #> 13   1.320418 -6.8475567  9.488393 #> 14  20.139591 12.7287130 27.550469 #> 15  21.295541 13.6157754 28.975307 #> 16  11.237529  3.2332125 19.241846 #> 17  18.683866 11.1027931 26.264939 #> 18   9.663971  1.7928039 17.535138 #> 19   1.788953 -6.1854294  9.763336 #> 20  23.631754 16.0720133 31.191496 #> 21   3.275535 -4.7284202 11.279490 #> 22   2.350008 -5.1135227  9.813539 #> 23   2.048598 -6.0317412 10.128936 #> 24   2.010150 -5.7631079  9.783408 #> 25   3.201960 -4.5302411 10.934161 #> 26   1.493974 -6.3460895  9.334038 #> 27  18.623392 11.1134630 26.133320 #> 28   7.817861 -0.3524618 15.988184 #> 29  18.797743 11.0398095 26.555676 #> 30   5.125182 -2.6982901 12.948653 #> 31   1.807167 -6.3415178  9.955852 #> 32   4.075101 -3.5663732 11.716575 #> 33  12.427273  4.6769673 20.177579 #> 34   3.152303 -4.4463365 10.750943 #> 35   1.293478 -6.8488219  9.435778 #> 36   6.957413 -0.9683646 14.883191 #> 37  18.939770 11.6346562 26.244884 #> 38   7.297365 -0.5228443 15.117575 #> 39  14.674697  6.7673697 22.582024 #> 40  15.520246  7.7948540 23.245638 #> 41  12.405048  4.4262734 20.383823 #> 42  24.918442 17.5864895 32.250394 #> 43  17.301734  9.6310247 24.972444 #> 44  26.864540 19.4240569 34.305024 #> 45   1.603280 -6.2004973  9.407057 #> 46   8.549257  0.4298523 16.668662 #> 47   3.784855 -3.6490992 11.218809 #> 48  14.937188  7.1596394 22.714737 #> 49  24.494371 16.8717764 32.116966 #> 50   1.956122 -6.0097993  9.922043 #> 51  27.204132 19.8157834 34.592480 #> 52  13.574770  6.0621552 21.087384 #> 53   2.576245 -5.1022238 10.254714 #> 54   1.914563 -6.2911949 10.120320 #> 55   7.487318 -0.3755634 15.350200 #> 56  17.136559  9.4820700 24.791047 #> 57  17.014448  9.2249276 24.803968 #> 58   1.337634 -6.4385724  9.113841 #> 59  18.683246 11.3039468 26.062546 #> 60  12.688687  4.7747305 20.602644 #> 61  15.393346  7.8685304 22.918162 #> 62  23.574345 16.0955211 31.053169 #> 63   1.579663 -6.2038712  9.363198 #> 64  17.036054  9.2258934 24.846214 #> 65  28.544693 21.0374571 36.051929 #> 66   1.288539 -6.8107592  9.387838 #> 67   1.140777 -6.9519175  9.233472 #> 68   6.171537 -1.7667540 14.109829 #> 69   3.437062 -4.6208291 11.494953 #> 70  10.789035  3.0605613 18.517508 #> 71   3.615948 -4.3318041 11.563701 #> 72  17.829018 10.5010624 25.156974 #> 73   8.908869  1.3774432 16.440295 #> 74   7.301336 -0.7182311 15.320904 #> 75   2.126375 -6.0821512 10.334901 #> 76   1.660542 -5.8572805  9.178365 #> 77  19.373718 11.6821400 27.065296 #> 78   1.280324 -6.5594020  9.120049 #> 79  16.307787  8.5576064 24.057967 #> 80  15.288219  7.3523742 23.224064 #> 81  17.793902 10.2290340 25.358770 #> 82   3.636393 -3.8379555 11.110742 #> 83   9.731890  1.9565364 17.507243 #> 84   1.843879 -5.9288922  9.616651 #> 85   1.673207 -6.0232268  9.369641 #> 86   7.792596 -0.3486329 15.933825 #> 87   2.326289 -5.6078937 10.260471 #> 88   1.614190 -6.0053643  9.233745 #> 89   2.694977 -4.9535614 10.343516 #> 90  19.431798 12.0731376 26.790459 #> 91   4.044955 -4.0206587 12.110569 #> 92   7.952300  0.1344633 15.770137 #> 93  12.423394  4.4963234 20.350464 #> 94  25.946812 18.4522301 33.441395 #> 95  15.137847  7.2417146 23.033980 #> 96  16.654989  9.0689535 24.241024 #> 97  21.603763 13.8886420 29.318883 #> 98  20.798900 13.5068048 28.090995 #> 99  16.737467  9.3086051 24.166329 #> 100 16.730626  8.7188384 24.742414 augment(spmod, newdata = sulfate_preds, interval = \"prediction\") #> Simple feature collection with 100 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 x 4 #>    .fitted .lower .upper            geometry #>  *   <dbl>  <dbl>  <dbl>         <POINT [m]> #>  1    1.62  -6.45   9.68  (-1771413 1752976) #>  2   24.4   16.8   31.9    (1018112 1867127) #>  3    8.95   1.03  16.9  (-291256.8 1553212) #>  4   16.5    8.64  24.3    (1274293 1267835) #>  5    4.93  -2.78  12.6  (-547437.6 1638825) #>  6   26.8   19.3   34.3    (1445080 1981278) #>  7    2.87  -5.05  10.8   (-1629090 3037173) #>  8   14.3    6.77  21.7    (1302757 1039534) #>  9    1.53  -6.33   9.38  (-1429838 2523494) #> 10   14.3    6.61  21.9    (1131970 1096609) #> # ... with 90 more rows"},{"path":"/reference/predict.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions (Kriging) — predict.spmodel","title":"Model predictions (Kriging) — predict.spmodel","text":"Predicted values intervals based fitted model object.","code":""},{"path":"/reference/predict.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions (Kriging) — predict.spmodel","text":"","code":"# S3 method for splm predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spautor predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for splm_list predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for spautor_list predict(   object,   newdata,   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   level = 0.95,   local,   ... )  # S3 method for splmRF predict(object, newdata, local, ...)  # S3 method for spautorRF predict(object, newdata, local, ...)  # S3 method for splmRF_list predict(object, newdata, local, ...)  # S3 method for spautorRF_list predict(object, newdata, local, ...)  # S3 method for spglm predict(   object,   newdata,   type = c(\"link\", \"response\"),   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local,   var_correct = TRUE,   ... )  # S3 method for spgautor predict(   object,   newdata,   type = c(\"link\", \"response\"),   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local,   var_correct = TRUE,   ... )  # S3 method for spglm_list predict(   object,   newdata,   type = c(\"link\", \"response\"),   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local,   var_correct = TRUE,   ... )  # S3 method for spgautor_list predict(   object,   newdata,   type = c(\"link\", \"response\"),   se.fit = FALSE,   interval = c(\"none\", \"confidence\", \"prediction\"),   newdata_size,   level = 0.95,   local,   var_correct = TRUE,   ... )"},{"path":"/reference/predict.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions (Kriging) — predict.spmodel","text":"object fitted model object. newdata data frame sf object look variables predict. data frame, newdata must contain variables used formula(object) variables representing coordinates. sf object, newdata must contain variables used formula(object) coordinates obtained geometry newdata. omitted, missing data fitted model object used. se.fit logical indicating standard errors returned. default FALSE. interval Type interval calculation. default \"none\". options \"confidence\" (confidence intervals) \"prediction\" (prediction intervals). level Tolerance/confidence level. default 0.95. local optional logical list controlling big data approximation. omitted, local set TRUE FALSE based sample size fitted model object /prediction size newdata -- sample size prediction size exceeds 5000, local set TRUE, otherwise set FALSE. FALSE, big data approximation implemented. list provided, following arguments detail big data approximation: method: big data approximation method. method = \"\", observations used size ignored. method = \"distance\", size data observations closest (terms Euclidean distance) observation requiring prediction used. method = \"covariance\", size data observations highest covariance observation requiring prediction used. random effects partition factors used estimation spatial covariance function monotone decreasing, \"distance\" \"covariance\" equivalent. default \"covariance\". used models fit using splm() spglm(). size: number data observations use method \"distance\" \"covariance\". default 100. used models fit using splm() spglm(). parallel: TRUE, parallel processing via parallel package automatically used. default FALSE. ncores: parallel = TRUE, number cores parallelize . default number available cores machine. local list, least one list element must provided initialize default arguments list elements. local TRUE, defaults local chosen local transformed list(size = 100, method = \"covariance\", parallel = FALSE). ... arguments. used models fit using splmRF() spautorRF() ... indicates arguments ranger::predict.ranger(). type scale (response link) predictions obtained using spglm() spgautor objects. newdata_size size value observation newdata used predicting binomial family. var_correct logical indicating whether return corrected prediction variances predicting via models fit using spglm() spgautor(). default TRUE.","code":""},{"path":"/reference/predict.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions (Kriging) — predict.spmodel","text":"splm spautor objects, se.fit FALSE, predict() returns vector predictions matrix predictions column names fit, lwr, upr interval \"confidence\" \"prediction\". se.fit TRUE, list following components returned: fit: vector matrix se.fit: standard error fit splm_list spautor_list objects, list contains relevant quantities list element. splmRF spautorRF objects, vector predictions. splmRF_list spautorRF_list objects, list contains relevant quantities list element.","code":""},{"path":"/reference/predict.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions (Kriging) — predict.spmodel","text":"splm spautor objects, (empirical) best linear unbiased predictions (.e., Kriging predictions) site returned interval \"none\" \"prediction\" alongside standard errors. Prediction intervals also returned interval \"prediction\". interval \"confidence\", estimated mean returned alongside standard errors confidence intervals mean. splm_list spautor_list objects, predictions associated intervals standard errors returned list element. splmRF spautorRF objects, random forest spatial residual model predictions computed combining random forest prediction (empirical) best linear unbiased prediction residual. Fox et al. (2020) call approach random forest regression Kriging. splmRF_list spautorRF objects, predictions returned list element.","code":""},{"path":"/reference/predict.spmodel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model predictions (Kriging) — predict.spmodel","text":"Fox, E.W., Ver Hoef, J. M., & Olsen, . R. (2020). Comparing spatial regression random forests large environmental data sets. PloS one, 15(3), e0229509.","code":""},{"path":"/reference/predict.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions (Kriging) — predict.spmodel","text":"","code":"spmod <- splm(sulfate ~ 1,   data = sulfate,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) predict(spmod, sulfate_preds) #>         1         2         3         4         5         6         7         8  #>  1.618435 24.371803  8.945102 16.452377  4.925139 26.795441  2.869041 14.255129  #>         9        10        11        12        13        14        15        16  #>  1.527998 14.278871  1.201078 17.125020  1.320418 20.139591 21.295541 11.237529  #>        17        18        19        20        21        22        23        24  #> 18.683866  9.663971  1.788953 23.631754  3.275535  2.350008  2.048598  2.010150  #>        25        26        27        28        29        30        31        32  #>  3.201960  1.493974 18.623392  7.817861 18.797743  5.125182  1.807167  4.075101  #>        33        34        35        36        37        38        39        40  #> 12.427273  3.152303  1.293478  6.957413 18.939770  7.297365 14.674697 15.520246  #>        41        42        43        44        45        46        47        48  #> 12.405048 24.918442 17.301734 26.864540  1.603280  8.549257  3.784855 14.937188  #>        49        50        51        52        53        54        55        56  #> 24.494371  1.956122 27.204132 13.574770  2.576245  1.914563  7.487318 17.136559  #>        57        58        59        60        61        62        63        64  #> 17.014448  1.337634 18.683246 12.688687 15.393346 23.574345  1.579663 17.036054  #>        65        66        67        68        69        70        71        72  #> 28.544693  1.288539  1.140777  6.171537  3.437062 10.789035  3.615948 17.829018  #>        73        74        75        76        77        78        79        80  #>  8.908869  7.301336  2.126375  1.660542 19.373718  1.280324 16.307787 15.288219  #>        81        82        83        84        85        86        87        88  #> 17.793902  3.636393  9.731890  1.843879  1.673207  7.792596  2.326289  1.614190  #>        89        90        91        92        93        94        95        96  #>  2.694977 19.431798  4.044955  7.952300 12.423394 25.946812 15.137847 16.654989  #>        97        98        99       100  #> 21.603763 20.798900 16.737467 16.730626  predict(spmod, sulfate_preds, interval = \"prediction\") #>           fit        lwr       upr #> 1    1.618435 -6.4458691  9.682739 #> 2   24.371803 16.8475856 31.896020 #> 3    8.945102  1.0255301 16.864674 #> 4   16.452377  8.6427128 24.262041 #> 5    4.925139 -2.7823585 12.632637 #> 6   26.795441 19.2836818 34.307199 #> 7    2.869041 -5.0546545 10.792737 #> 8   14.255129  6.7727705 21.737488 #> 9    1.527998 -6.3288119  9.384809 #> 10  14.278871  6.6143954 21.943347 #> 11   1.201078 -6.7412477  9.143403 #> 12  17.125020  9.6129332 24.637107 #> 13   1.320418 -6.8475567  9.488393 #> 14  20.139591 12.7287130 27.550469 #> 15  21.295541 13.6157754 28.975307 #> 16  11.237529  3.2332125 19.241846 #> 17  18.683866 11.1027931 26.264939 #> 18   9.663971  1.7928039 17.535138 #> 19   1.788953 -6.1854294  9.763336 #> 20  23.631754 16.0720133 31.191496 #> 21   3.275535 -4.7284202 11.279490 #> 22   2.350008 -5.1135227  9.813539 #> 23   2.048598 -6.0317412 10.128936 #> 24   2.010150 -5.7631079  9.783408 #> 25   3.201960 -4.5302411 10.934161 #> 26   1.493974 -6.3460895  9.334038 #> 27  18.623392 11.1134630 26.133320 #> 28   7.817861 -0.3524618 15.988184 #> 29  18.797743 11.0398095 26.555676 #> 30   5.125182 -2.6982901 12.948653 #> 31   1.807167 -6.3415178  9.955852 #> 32   4.075101 -3.5663732 11.716575 #> 33  12.427273  4.6769673 20.177579 #> 34   3.152303 -4.4463365 10.750943 #> 35   1.293478 -6.8488219  9.435778 #> 36   6.957413 -0.9683646 14.883191 #> 37  18.939770 11.6346562 26.244884 #> 38   7.297365 -0.5228443 15.117575 #> 39  14.674697  6.7673697 22.582024 #> 40  15.520246  7.7948540 23.245638 #> 41  12.405048  4.4262734 20.383823 #> 42  24.918442 17.5864895 32.250394 #> 43  17.301734  9.6310247 24.972444 #> 44  26.864540 19.4240569 34.305024 #> 45   1.603280 -6.2004973  9.407057 #> 46   8.549257  0.4298523 16.668662 #> 47   3.784855 -3.6490992 11.218809 #> 48  14.937188  7.1596394 22.714737 #> 49  24.494371 16.8717764 32.116966 #> 50   1.956122 -6.0097993  9.922043 #> 51  27.204132 19.8157834 34.592480 #> 52  13.574770  6.0621552 21.087384 #> 53   2.576245 -5.1022238 10.254714 #> 54   1.914563 -6.2911949 10.120320 #> 55   7.487318 -0.3755634 15.350200 #> 56  17.136559  9.4820700 24.791047 #> 57  17.014448  9.2249276 24.803968 #> 58   1.337634 -6.4385724  9.113841 #> 59  18.683246 11.3039468 26.062546 #> 60  12.688687  4.7747305 20.602644 #> 61  15.393346  7.8685304 22.918162 #> 62  23.574345 16.0955211 31.053169 #> 63   1.579663 -6.2038712  9.363198 #> 64  17.036054  9.2258934 24.846214 #> 65  28.544693 21.0374571 36.051929 #> 66   1.288539 -6.8107592  9.387838 #> 67   1.140777 -6.9519175  9.233472 #> 68   6.171537 -1.7667540 14.109829 #> 69   3.437062 -4.6208291 11.494953 #> 70  10.789035  3.0605613 18.517508 #> 71   3.615948 -4.3318041 11.563701 #> 72  17.829018 10.5010624 25.156974 #> 73   8.908869  1.3774432 16.440295 #> 74   7.301336 -0.7182311 15.320904 #> 75   2.126375 -6.0821512 10.334901 #> 76   1.660542 -5.8572805  9.178365 #> 77  19.373718 11.6821400 27.065296 #> 78   1.280324 -6.5594020  9.120049 #> 79  16.307787  8.5576064 24.057967 #> 80  15.288219  7.3523742 23.224064 #> 81  17.793902 10.2290340 25.358770 #> 82   3.636393 -3.8379555 11.110742 #> 83   9.731890  1.9565364 17.507243 #> 84   1.843879 -5.9288922  9.616651 #> 85   1.673207 -6.0232268  9.369641 #> 86   7.792596 -0.3486329 15.933825 #> 87   2.326289 -5.6078937 10.260471 #> 88   1.614190 -6.0053643  9.233745 #> 89   2.694977 -4.9535614 10.343516 #> 90  19.431798 12.0731376 26.790459 #> 91   4.044955 -4.0206587 12.110569 #> 92   7.952300  0.1344633 15.770137 #> 93  12.423394  4.4963234 20.350464 #> 94  25.946812 18.4522301 33.441395 #> 95  15.137847  7.2417146 23.033980 #> 96  16.654989  9.0689535 24.241024 #> 97  21.603763 13.8886420 29.318883 #> 98  20.798900 13.5068048 28.090995 #> 99  16.737467  9.3086051 24.166329 #> 100 16.730626  8.7188384 24.742414 augment(spmod, newdata = sulfate_preds, interval = \"prediction\") #> Simple feature collection with 100 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2283774 ymin: 582930.5 xmax: 1985906 ymax: 3037173 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 100 × 4 #>    .fitted .lower .upper            geometry #>  *   <dbl>  <dbl>  <dbl>         <POINT [m]> #>  1    1.62  -6.45   9.68  (-1771413 1752976) #>  2   24.4   16.8   31.9    (1018112 1867127) #>  3    8.95   1.03  16.9  (-291256.8 1553212) #>  4   16.5    8.64  24.3    (1274293 1267835) #>  5    4.93  -2.78  12.6  (-547437.6 1638825) #>  6   26.8   19.3   34.3    (1445080 1981278) #>  7    2.87  -5.05  10.8   (-1629090 3037173) #>  8   14.3    6.77  21.7    (1302757 1039534) #>  9    1.53  -6.33   9.38  (-1429838 2523494) #> 10   14.3    6.61  21.9    (1131970 1096609) #> # ℹ 90 more rows # \\donttest{ sulfate$var <- rnorm(NROW(sulfate)) # add noise variable sulfate_preds$var <- rnorm(NROW(sulfate_preds)) # add noise variable sprfmod <- splmRF(sulfate ~ var, data = sulfate, spcov_type = \"exponential\") predict(sprfmod, sulfate_preds) #>           1           2           3           4           5           6  #>  7.28544220 24.06196502  6.73831801 13.76553348  6.53309799 37.20423705  #>           7           8           9          10          11          12  #> 15.19754595 17.48183865 -0.48782804 12.61161059 -2.22200207 14.44480717  #>          13          14          15          16          17          18  #>  3.60624975 24.93869340 15.20192026  4.41391967 16.94469576 14.69172064  #>          19          20          21          22          23          24  #>  1.29248434 29.81383434 -6.18222761  6.75563225 -1.26360347 -0.39738355  #>          25          26          27          28          29          30  #> -3.80423214  5.26541767 15.73272540  7.49388632 12.47643188  8.03754998  #>          31          32          33          34          35          36  #>  1.43039988 -2.65579891 12.27719120  8.02234807  0.01512766  6.22199813  #>          37          38          39          40          41          42  #> 24.80218497  3.22244604 19.55763100 17.39116832  5.28875619 32.30030088  #>          43          44          45          46          47          48  #> 24.67412336 28.61053009 -2.25206358  2.42882956 14.16607487 14.40646529  #>          49          50          51          52          53          54  #> 33.90884556  8.09508007 27.59977195 12.11886530  8.02776461  3.04983231  #>          55          56          57          58          59          60  #> 11.97175662 13.64501730 16.85985951 -1.94381670 16.66081794  7.68182931  #>          61          62          63          64          65          66  #> 18.27721205 27.23727467 -7.05328205 22.84702795 36.46374415  3.68445317  #>          67          68          69          70          71          72  #>  1.30501898  9.17008976 -2.44595556  4.56106464  6.14652954 15.52342825  #>          73          74          75          76          77          78  #>  3.65812206  1.65009844 -2.31725434 -0.74632805 21.25936670 -0.59949167  #>          79          80          81          82          83          84  #> 19.91256105 18.88256333  9.46607904  3.03549162 16.80016658  9.20818876  #>          85          86          87          88          89          90  #>  9.15457910 20.20627290  1.13673263 -8.09381899  1.84304845 21.93241759  #>          91          92          93          94          95          96  #> -4.98701784  7.86957851 18.89053085 30.39253193 15.52633597 13.62202773  #>          97          98          99         100  #> 22.32962467 14.46414096 10.22414853 20.77387488  # }"},{"path":"/reference/predict.spmodRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"Predicted values based random forest spatial residual fitted model object.","code":""},{"path":"/reference/predict.spmodRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"","code":"# S3 method for spmodRF predict(object, newdata, local, ...)  # S3 method for spmodRF_list predict(object, newdata, local, ...)"},{"path":"/reference/predict.spmodRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"object fitted model object splmRF() spautorRF(). newdata data frame sf object look variables predict. data frame, newdata must contain variables used formula(object) variables representing coordinates. sf object, newdata must contain variables used formula(object) coordinates obtained geometry newdata. omitted, missing data fitted model object used. local optional logical list controlling big data approximation spatial residual prediction. omitted, local set TRUE FALSE based sample size fitted model object /prediction size newdata -- sample size prediction size exceeds 5000, local set TRUE, otherwise set FALSE. FALSE, big data approximation implemented. list provided, following arguments detail big data approximation: method: big data approximation method. method = \"\", observations used size ignored. method = \"distance\", size data observations closest (terms Euclidean distance) observation requiring prediction used. method = \"covariance\", size data observations highest covariance observation requiring prediction used. random effects partition factors used estimation spatial covariance function monotone decreasing, \"distance\" \"covariance\" equivalent. default \"covariance\". used models fit using splm(). size: number data observations use method \"distance\" \"covariance\". default 50. used models fit using splm(). parallel: TRUE, parallel processing via parallel package automatically used. default FALSE. ncores: parallel = TRUE, number cores parallelize . default number available cores machine. local list, least one list element must provided initialize default arguments list elements. local TRUE, defaults local chosen local transformed list(size = 50, method = \"covariance\", parallel = FALSE). ... arguments ranger::predict.ranger()","code":""},{"path":"/reference/predict.spmodRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"spmodRF objects, vector predictions. spmodRF_list objects, list contains relevant quantities spmodRF object.","code":""},{"path":"/reference/predict.spmodRF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"spmodRF objects, random forest prediction combined (empirical) best linear unbiased prediction residual. Fox Et al. call approach random forest regression Kriging. spmodRF_list objects, predictions returned spmodRF object.","code":""},{"path":"/reference/predict.spmodRF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"Fox, E.W., Ver Hoef, J. M., & Olsen, . R. (2020). Comparing spatial regression random forests large environmental data sets. PloS one, 15(3), e0229509.","code":""},{"path":"/reference/predict.spmodRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random forest spatial residual model predictions (random forest regression Kriging) — predict.spmodRF","text":"","code":"# \\donttest{ sulfate$var <- rnorm(NROW(sulfate)) # add noise variable sulfate_preds$var <- rnorm(NROW(sulfate_preds)) # add noise variable sprfmod <- splmRF(sulfate ~ var, data = sulfate, spcov_type = \"exponential\") predict(sprfmod, sulfate_preds) #>           1           2           3           4           5           6  #>  1.43218460 28.53080893  8.03837627 10.17497586 10.81308166 36.46710057  #>           7           8           9          10          11          12  #>  0.04473233 12.29349234 16.17456383  7.28704817 -7.21577885  8.18800373  #>          13          14          15          16          17          18  #> -5.64281665 13.98306496 17.33658907 19.59547121 21.46132654  7.67508539  #>          19          20          21          22          23          24  #>  1.28151885 29.06665010 -0.12472119  5.90915740 -6.54188061  5.54303771  #>          25          26          27          28          29          30  #>  0.06576118  5.21284097  9.29580971  0.44480140 19.08291198  0.91680447  #>          31          32          33          34          35          36  #> -3.00372224 -0.34021944  5.41896099 -0.78675097 -1.32314237  4.51313058  #>          37          38          39          40          41          42  #> 16.10495816  0.34091663  4.10564821  7.24159842  5.39811507 18.30770762  #>          43          44          45          46          47          48  #> 16.63568037 29.08105684  9.71542421 17.50411510 10.51016683  9.52026083  #>          49          50          51          52          53          54  #> 25.73776270  1.86531098 26.41290240  5.51289702  9.02463067  6.75658990  #>          55          56          57          58          59          60  #> -0.69409482  9.15857382 31.73881375 -4.59133446 12.52464094 20.29690552  #>          61          62          63          64          65          66  #> 23.91502544 13.81611466 14.28972993 13.33502107 28.90004478  3.61744285  #>          67          68          69          70          71          72  #>  6.79289269  6.88577532 19.31395010  9.08781581 11.05990511 26.47688227  #>          73          74          75          76          77          78  #>  9.58579462  1.65772917  5.82828905  9.17553608 14.32630665 -5.38173628  #>          79          80          81          82          83          84  #> 15.24503222 17.08191480 24.89500076 -1.05309265 18.11117474  3.89109963  #>          85          86          87          88          89          90  #>  7.74298803 -2.52345210  7.90531001 -2.79257361 -2.26919797 21.82420656  #>          91          92          93          94          95          96  #>  2.23046312 10.19913397  9.90299107 31.14718744  7.36980655 23.52814022  #>          97          98          99         100  #> 14.78094089 15.96284146 28.32926543 22.13019804  # }"},{"path":"/reference/print.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Print values — print.spmod","title":"Print values — print.spmod","text":"Print fitted model objects summaries.","code":""},{"path":"/reference/print.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print values — print.spmod","text":"","code":"# S3 method for spmod print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for summary.spmod print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for anova.spmod print(   x,   digits = max(getOption(\"digits\") - 2L, 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )"},{"path":"/reference/print.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print values — print.spmod","text":"x fitted model object splm() spautor() output summary(x) anova(x). digits number significant digits use printing. ... arguments passed methods. signif.stars Logical. TRUE, significance stars printed coefficient","code":""},{"path":"/reference/print.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print values — print.spmod","text":"Printed fitted model objects summaries formatting.","code":""},{"path":"/reference/print.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print values — print.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) print(spmod) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #>  #> Coefficients (fixed): #> (Intercept)       waterY     tarpnone    tarpshade   #>     2.04981     -0.08310      0.08005      0.28654   #>  #>  #> Coefficients (exponential spatial covariance): #>      de       ie    range   #>  0.1109   0.0226  19.1168   #>  print(summary(spmod)) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.41281 -0.20763 -0.11205  0.02956  0.45429  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.04981    0.31093   6.592 4.33e-11 *** #> waterY      -0.08310    0.06449  -1.289 0.197563     #> tarpnone     0.08005    0.07759   1.032 0.302166     #> tarpshade    0.28654    0.07667   3.737 0.000186 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.3963 #>  #> Coefficients (exponential spatial covariance): #>      de      ie   range  #>  0.1109  0.0226 19.1168  print(anova(spmod)) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/reference/print.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print values — print.spmodel","title":"Print values — print.spmodel","text":"Print fitted model objects summaries.","code":""},{"path":"/reference/print.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print values — print.spmodel","text":"","code":"# S3 method for splm print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for spautor print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for summary.splm print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for summary.spautor print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for anova.splm print(   x,   digits = max(getOption(\"digits\") - 2L, 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for anova.spautor print(   x,   digits = max(getOption(\"digits\") - 2L, 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for spglm print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for spgautor print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)  # S3 method for summary.spglm print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for summary.spgautor print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for anova.spglm print(   x,   digits = max(getOption(\"digits\") - 2L, 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )  # S3 method for anova.spgautor print(   x,   digits = max(getOption(\"digits\") - 2L, 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )"},{"path":"/reference/print.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print values — print.spmodel","text":"x fitted model object splm(), spautor(), spglm(), spgautor() output summary(x) anova(x). digits number significant digits use printing. ... arguments passed methods. signif.stars Logical. TRUE, significance stars printed coefficient","code":""},{"path":"/reference/print.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print values — print.spmodel","text":"Printed fitted model objects summaries formatting.","code":""},{"path":"/reference/print.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print values — print.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) print(spmod) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #>  #> Coefficients (fixed): #> (Intercept)       waterY     tarpnone    tarpshade   #>     2.04981     -0.08310      0.08005      0.28654   #>  #>  #> Coefficients (exponential spatial covariance): #>      de       ie    range   #>  0.1109   0.0226  19.1168   #>  print(summary(spmod)) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.41281 -0.20763 -0.11205  0.02956  0.45429  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.04981    0.31093   6.592 4.33e-11 *** #> waterY      -0.08310    0.06449  -1.289 0.197563     #> tarpnone     0.08005    0.07759   1.032 0.302166     #> tarpshade    0.28654    0.07667   3.737 0.000186 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.3963 #>  #> Coefficients (exponential spatial covariance): #>      de      ie   range  #>  0.1109  0.0226 19.1168  print(anova(spmod)) #> Analysis of Variance Table #>  #> Response: z #>             Df    Chi2 Pr(>Chi2)     #> (Intercept)  1 43.4600 4.327e-11 *** #> water        1  1.6603 0.1975631     #> tarp         2 15.4071 0.0004512 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/reference/pseudoR2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a pseudo r-squared — pseudoR2","title":"Compute a pseudo r-squared — pseudoR2","text":"Compute pseudo r-squared fitted model object.","code":""},{"path":"/reference/pseudoR2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a pseudo r-squared — pseudoR2","text":"","code":"pseudoR2(object, ...)  # S3 method for splm pseudoR2(object, adjust = FALSE, ...)  # S3 method for spautor pseudoR2(object, adjust = FALSE, ...)  # S3 method for spglm pseudoR2(object, adjust = FALSE, ...)  # S3 method for spgautor pseudoR2(object, adjust = FALSE, ...)"},{"path":"/reference/pseudoR2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a pseudo r-squared — pseudoR2","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency). adjust logical indicating whether pseudo r-squared adjusted account number explanatory variables. default FALSE.","code":""},{"path":"/reference/pseudoR2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a pseudo r-squared — pseudoR2","text":"pseudo r-squared numeric vector.","code":""},{"path":"/reference/pseudoR2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a pseudo r-squared — pseudoR2","text":"Several pseudo r-squared statistics exist literature. define pseudo r-squared one minus ratio deviance full model relative deviance null (intercept ) model. pseudo r-squared can viewed generalization classical r-squared definition seen one minus ratio error sums squares full model relative error sums squares null model. adjusted, adjustment analogous classical r-squared adjustment.","code":""},{"path":"/reference/pseudoR2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a pseudo r-squared — pseudoR2","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) pseudoR2(spmod) #> [1] 0.3962946"},{"path":"/reference/randcov_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random effects covariance parameter initial object — randcov_initial","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"Create random effects (co)variance parameter initial object specifies initial /known values use estimating random effect variances modeling functions.","code":""},{"path":"/reference/randcov_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"","code":"randcov_initial(..., known)"},{"path":"/reference/randcov_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"... Arguments randcov_params(). known character vector indicating random effect variances assumed known. value \"given\" shorthand assuming random effect variances given randcov_initial() assumed known.","code":""},{"path":"/reference/randcov_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"list two elements: initial is_known. initial named numeric vector indicating random effect variances specified initial /known values. is_known named logical vector indicating whether random effect variances initial known .","code":""},{"path":"/reference/randcov_initial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"random effect specified \\(Zu\\), \\(Z\\) random effects design matrix u random effect. covariance \\(Zu\\) \\(\\sigma 2 ZZ^T\\), \\(\\sigma 2\\) random effect variance, \\(Z^T\\) transpose \\(Z\\).","code":""},{"path":"/reference/randcov_initial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a random effects covariance parameter initial object — randcov_initial","text":"","code":"randcov_initial(group = 1) #> $initial #> group  #>     1  #>  #> $is_known #> group  #> FALSE  #>  randcov_initial(group = 1, known = \"group\") #> $initial #> group  #>     1  #>  #> $is_known #> group  #>  TRUE  #>"},{"path":"/reference/randcov_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random effects covariance parameter object — randcov_params","title":"Create a random effects covariance parameter object — randcov_params","text":"Create random effects covariance parameter object use functions.","code":""},{"path":"/reference/randcov_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random effects covariance parameter object — randcov_params","text":"","code":"randcov_params(..., nm)"},{"path":"/reference/randcov_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random effects covariance parameter object — randcov_params","text":"... named vector (vectors) whose names represent name random effect whose values represent variance random effect. unnamed, nm used set names. nm character vector names assign ....","code":""},{"path":"/reference/randcov_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a random effects covariance parameter object — randcov_params","text":"named numeric vector random effect covariance parameters.","code":""},{"path":"/reference/randcov_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a random effects covariance parameter object — randcov_params","text":"Names random effects match eligible names given random modeling functions. random argument functions, intercept implicitly assumed, randcov_params, intercept must explicitly specified. , random, x | group shorthand (1 | group) + (x | group), randcov_params, x | group implies just x | group, means 1 | group also desired, must explicitly specified.","code":""},{"path":"/reference/randcov_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a random effects covariance parameter object — randcov_params","text":"","code":"randcov_params(group = 1, subgroup = 2) #>    group subgroup  #>        1        2  randcov_params(1, 2, nm = c(\"group\", \"subgroup\")) #>    group subgroup  #>        1        2  # same as randcov_params(\"1 | group\" = 1, \"1 | subgroup\" = 2) #>    1 | group 1 | subgroup  #>            1            2"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, glance, tidy","code":""},{"path":"/reference/residuals.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fitted model residuals — residuals.spmod","title":"Extract fitted model residuals — residuals.spmod","text":"Extract residuals fitted model object. resid alias.","code":""},{"path":"/reference/residuals.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fitted model residuals — residuals.spmod","text":"","code":"# S3 method for spmod residuals(object, type = \"raw\", ...)  # S3 method for spmod resid(object, type = \"raw\", ...)  # S3 method for spmod rstandard(model, ...)"},{"path":"/reference/residuals.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fitted model residuals — residuals.spmod","text":"object fitted model object splm() spautor(). type \"raw\" raw residuals, \"pearson\" Pearson residuals, \"standardized\" standardized residuals. default \"raw\". ... arguments. used (needed generic consistency). model fitted model object splm() spautor().","code":""},{"path":"/reference/residuals.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fitted model residuals — residuals.spmod","text":"residuals numeric vector.","code":""},{"path":"/reference/residuals.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract fitted model residuals — residuals.spmod","text":"raw residuals taken response minus fitted values response: \\(y - X \\hat{\\beta}\\). Pearson residuals raw residuals pre-multiplied square (Cholesky) root. standardized residuals Pearson residuals divided square root one minus leverage (hat) value. standardized residuals often used check model assumptions, mean zero variance approximately one. rstandard() alias residuals(model, type = \"standardized\").","code":""},{"path":"/reference/residuals.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fitted model residuals — residuals.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) residuals(spmod) #>  [1]  0.45429071  0.18974938 -0.23676158 -0.08380603  0.04065264  0.17723842 #>  [7]  0.05119397 -0.16270929 -0.29025062  0.05223842 -0.08070929 -0.12325062 #> [13] -0.18576158  0.02965264 -0.13585832 -0.41280603  0.11065264 -0.31085832 #> [19] -0.20825062 -0.20576158 -0.01485832  0.02929071 -0.24880603 -0.28734736 #> [25] -0.00085832 -0.02680603 -0.28634736 -0.10085832 -0.17770929 -0.19025062 resid(spmod) #>  [1]  0.45429071  0.18974938 -0.23676158 -0.08380603  0.04065264  0.17723842 #>  [7]  0.05119397 -0.16270929 -0.29025062  0.05223842 -0.08070929 -0.12325062 #> [13] -0.18576158  0.02965264 -0.13585832 -0.41280603  0.11065264 -0.31085832 #> [19] -0.20825062 -0.20576158 -0.01485832  0.02929071 -0.24880603 -0.28734736 #> [25] -0.00085832 -0.02680603 -0.28634736 -0.10085832 -0.17770929 -0.19025062 residuals(spmod, type = \"pearson\") #>  [1]  1.24354161 -0.74916779 -2.30559697 -0.44278589  0.35871793 -0.02931481 #>  [7] -0.34571722 -1.02400240 -1.32650258  0.77634627 -0.92543182 -0.60809279 #> [13] -0.54052868  0.81134318 -0.43085195 -1.97679013  1.48571342 -1.19999035 #> [19] -0.38403412 -0.37322840  0.70808016  0.83480943 -0.68844111 -0.61998523 #> [25]  1.01690321  0.29172182 -1.04855852  0.39380299 -0.12048301 -0.26755398 residuals(spmod, type = \"standardized\") #>  [1]  2.36883087 -0.82694464 -2.46935217 -0.48966899  0.38269818 -0.03079095 #>  [7] -0.37578310 -1.06632080 -1.40640481  0.83497430 -0.95033683 -0.64355505 #> [13] -0.56645079  0.87526900 -0.45332541 -2.10877831  1.57318435 -1.25444887 #> [19] -0.41085218 -0.39045652  0.74280455  0.91130982 -0.73024812 -0.65149198 #> [25]  1.05208876  0.29986852 -1.10903948  0.41060223 -0.13412488 -0.28592438 rstandard(spmod) #>  [1]  2.36883087 -0.82694464 -2.46935217 -0.48966899  0.38269818 -0.03079095 #>  [7] -0.37578310 -1.06632080 -1.40640481  0.83497430 -0.95033683 -0.64355505 #> [13] -0.56645079  0.87526900 -0.45332541 -2.10877831  1.57318435 -1.25444887 #> [19] -0.41085218 -0.39045652  0.74280455  0.91130982 -0.73024812 -0.65149198 #> [25]  1.05208876  0.29986852 -1.10903948  0.41060223 -0.13412488 -0.28592438"},{"path":"/reference/residuals.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fitted model residuals — residuals.spmodel","title":"Extract fitted model residuals — residuals.spmodel","text":"Extract residuals fitted model object. resid alias.","code":""},{"path":"/reference/residuals.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fitted model residuals — residuals.spmodel","text":"","code":"# S3 method for splm residuals(object, type = \"response\", ...)  # S3 method for splm resid(object, type = \"response\", ...)  # S3 method for splm rstandard(model, ...)  # S3 method for spautor residuals(object, type = \"response\", ...)  # S3 method for spautor resid(object, type = \"response\", ...)  # S3 method for spautor rstandard(model, ...)  # S3 method for spglm residuals(object, type = \"deviance\", ...)  # S3 method for spglm resid(object, type = \"deviance\", ...)  # S3 method for spglm rstandard(model, ...)  # S3 method for spgautor residuals(object, type = \"deviance\", ...)  # S3 method for spgautor resid(object, type = \"deviance\", ...)  # S3 method for spgautor rstandard(model, ...)"},{"path":"/reference/residuals.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fitted model residuals — residuals.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). type \"response\" response residuals, \"pearson\" Pearson residuals, \"standardized\" standardized residuals. splm() spautor() fitted model objects, default \"response\". spglm() spgautor() fitted model objects, deviance residuals also available (\"deviance\") default residual type. ... arguments. used (needed generic consistency). model fitted model object splm(), spautor(), spglm(), spgautor().","code":""},{"path":"/reference/residuals.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fitted model residuals — residuals.spmodel","text":"residuals numeric vector.","code":""},{"path":"/reference/residuals.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract fitted model residuals — residuals.spmodel","text":"response residuals taken response minus fitted values response: \\(y - X \\hat{\\beta}\\). Pearson residuals response residuals pre-multiplied inverse square root. standardized residuals Pearson residuals divided square root one minus leverage (hat) value. standardized residuals often used check model assumptions, mean zero variance approximately one. rstandard() alias residuals(model, type = \"standardized\").","code":""},{"path":[]},{"path":"/reference/residuals.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fitted model residuals — residuals.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) residuals(spmod) #>           1           2           3           4           5           6  #>  0.45429071  0.18974938 -0.23676158 -0.08380603  0.04065264  0.17723842  #>           7           8           9          10          11          12  #>  0.05119397 -0.16270929 -0.29025062  0.05223842 -0.08070929 -0.12325062  #>          13          14          15          16          17          18  #> -0.18576158  0.02965264 -0.13585832 -0.41280603  0.11065264 -0.31085832  #>          19          20          21          22          23          24  #> -0.20825062 -0.20576158 -0.01485832  0.02929071 -0.24880603 -0.28734736  #>          25          26          27          28          29          30  #> -0.00085832 -0.02680603 -0.28634736 -0.10085832 -0.17770929 -0.19025062  resid(spmod) #>           1           2           3           4           5           6  #>  0.45429071  0.18974938 -0.23676158 -0.08380603  0.04065264  0.17723842  #>           7           8           9          10          11          12  #>  0.05119397 -0.16270929 -0.29025062  0.05223842 -0.08070929 -0.12325062  #>          13          14          15          16          17          18  #> -0.18576158  0.02965264 -0.13585832 -0.41280603  0.11065264 -0.31085832  #>          19          20          21          22          23          24  #> -0.20825062 -0.20576158 -0.01485832  0.02929071 -0.24880603 -0.28734736  #>          25          26          27          28          29          30  #> -0.00085832 -0.02680603 -0.28634736 -0.10085832 -0.17770929 -0.19025062  residuals(spmod, type = \"pearson\") #>          1          2          3          4          5          6          7  #>  2.3759019  1.0094357 -1.2802275 -0.1819747  0.5468322  0.9257146  0.4135878  #>          8          9         10         11         12         13         14  #> -0.5851680 -1.2915602  0.7801232 -0.2748195 -0.3601943 -0.5360591  0.8694383  #>         15         16         17         18         19         20         21  #> -0.2340949 -2.1087283  1.2970536 -1.1653479 -0.4662771 -0.5327342  0.4393293  #>         22         23         24         25         26         27         28  #>  0.8503478 -0.7084916 -0.8974281  0.8069845  0.3976900 -1.0772414  0.2117907  #>         29         30  #> -0.2333682 -0.3655001  residuals(spmod, type = \"standardized\") #>          1          2          3          4          5          6          7  #>  2.5264598  1.0864730 -1.3779145 -0.2001888  0.5940130  1.0025422  0.4501727  #>          8          9         10         11         12         13         14  #> -0.6244526 -1.3763618  0.8368581 -0.2912449 -0.3860129 -0.5725495  0.9306823  #>         15         16         17         18         19         20         21  #> -0.2494573 -2.2347624  1.3900258 -1.2446749 -0.4991220 -0.5676948  0.4757905  #>         22         23         24         25         26         27         28  #>  0.9255673 -0.7560554 -0.9563517  0.8656729  0.4228911 -1.1594534  0.2279513  #>         29         30  #> -0.2567263 -0.3970356  rstandard(spmod) #>          1          2          3          4          5          6          7  #>  2.5264598  1.0864730 -1.3779145 -0.2001888  0.5940130  1.0025422  0.4501727  #>          8          9         10         11         12         13         14  #> -0.6244526 -1.3763618  0.8368581 -0.2912449 -0.3860129 -0.5725495  0.9306823  #>         15         16         17         18         19         20         21  #> -0.2494573 -2.2347624  1.3900258 -1.2446749 -0.4991220 -0.5676948  0.4757905  #>         22         23         24         25         26         27         28  #>  0.9255673 -0.7560554 -0.9563517  0.8656729  0.4228911 -1.1594534  0.2279513  #>         29         30  #> -0.2567263 -0.3970356"},{"path":"/reference/seal.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","title":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","text":"Estimated harbor-seal trends abundance data southeast Alaska, USA.","code":""},{"path":"/reference/seal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","text":"","code":"seal"},{"path":"/reference/seal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","text":"sf object 62 rows 2 columns: log_trend: log estimated harbor-seal trends abundance data. geometry: POLYGON geometry representing polygons Alaska Albers projection (EPSG: 3338).","code":""},{"path":"/reference/seal.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","text":"data collected Polar Ecosystem Program Marine Mammal Laboratory Alaska Fisheries Science Center NOAA Fisheries. data used publication listed References.","code":""},{"path":"/reference/seal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimated harbor-seal trends from abundance data in southeast Alaska, USA — seal","text":"Ver Hoef, J.M., Peterson, E. E., Hooten, M. B., Hanks, E. M., Fortin, M.-J. 2018. Spatial Autoregressive Models Statistical Inference Ecological Data. Ecological Monographs, 88: 36-59. DOI: 10.1002/ecm.1283.","code":""},{"path":"/reference/spautor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spatial autoregressive models — spautor","title":"Fit spatial autoregressive models — spautor","text":"Fit spatial linear models areal data (.e., spatial autoregressive models) using variety estimation methods, allowing random effects, partition factors, row standardization.","code":""},{"path":"/reference/spautor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spatial autoregressive models — spautor","text":"","code":"spautor(   formula,   data,   spcov_type,   spcov_initial,   estmethod = \"reml\",   random,   randcov_initial,   partition_factor,   W,   row_st = TRUE,   M,   range_positive = TRUE,   ... )"},{"path":"/reference/spautor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spatial autoregressive models — spautor","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms, separated + operators, right. data data frame sf object contains variables fixed, random, partition_factor, well potentially geographical information. spcov_type spatial covariance type. Available options include \"car\" \"sar\". Parameterizations spatial covariance type available Details. spcov_type specified, relevant spatial covariance parameters assumed unknown, requiring estimation. spcov_type required (ignored) spcov_initial provided.  Multiple values can provided character vector. spautor() called iteratively element list returned model fit. default spcov_type \"car\". spcov_initial object spcov_initial() specifying initial /known values spatial covariance parameters. required spcov_type provided. Multiple spcov_initial() objects can provided list. spautor() called iteratively element list returned model fit. estmethod estimation method. Available options include \"reml\" restricted maximum likelihood \"ml\" maximum likelihood default \"reml\". random one-sided linear formula describing random effect structure model. Terms specified right ~ operator. term structure x1 + ... + xn | g1/.../gm, x1 + ... + xn specifies model random effects g1/.../gm grouping structure. Separate terms separated + must generally wrapped parentheses. Random intercepts added model implicitly least  one variable defined. random intercept desired, must explicitly defined (e.g., x1 + ... + xn - 1 | g1/.../gm). random intercept desired grouping structure, random intercept must specified 1 | g1/.../gm. Note g1/.../gm shorthand (1 | g1/.../gm). random intercepts desired shorthand notation used, parentheses can omitted. randcov_initial optional object specifying initial /known values random effect variances. partition_factor one-sided linear formula single term specifying partition factor.  partition factor assumes observations different levels partition factor uncorrelated. W Weight matrix specifying neighboring structure used. required data sf polygon object, W calculated internally using queen contiguity. calculated internally, W computed using sf::st_intersects(). row_st logical indicating whether row standardization performed W. default TRUE. M M matrix satisfying car symmetry condition. car symmetry condition states \\((- range * W)^{-1}M\\) symmetric, \\(\\) identity matrix, \\(range\\) constant controls spatial dependence, W weights matrix, \\(^{-1}\\) represents inverse operator. M required car models W provided row_st FALSE.  M, required, default identity matrix. M must diagonal given vector one-column matrix assumed diagonal. range_positive Whether range constrained positive. default TRUE. ... arguments stats::optim().","code":""},{"path":"/reference/spautor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spatial autoregressive models — spautor","text":"list many elements store information fitted model object. spcov_type spcov_initial length one, list class spautor. Many generic functions summarize model fit available spautor objects, including AIC, AICc, anova, augment, coef, cooks.distance, covmatrix, deviance, fitted, formula, glance, glances, hatvalues, influence, labels, logLik, loocv, model.frame, model.matrix, plot, predict, print, pseudoR2, summary, terms, tidy, update, varcomp, vcov. spcov_type spcov_initial length greater one, list class spautor_list element list class spautor. glances can used summarize spautor_list objects, aforementioned spautor generics can used individual list element (model fit).","code":""},{"path":"/reference/spautor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit spatial autoregressive models — spautor","text":"spatial linear model areal data (.e., spatial autoregressive model) can written \\(y = X \\beta + \\tau + \\epsilon\\), \\(X\\) fixed effects design matrix, \\(\\beta\\) fixed effects, \\(\\tau\\) random error spatially dependent, \\(\\epsilon\\) random error spatially independent. Together, \\(\\tau\\) \\(\\epsilon\\) modeled using spatial covariance function, expressed \\(de * R + ie * \\), \\(de\\) dependent error variance, \\(R\\) matrix controls spatial dependence structure among observations, \\(ie\\) independent error variance, \\(\\) identity matrix. Note \\(de\\) \\(ie\\) must non-negative \\(range\\) must reciprocal maximum eigenvalue W reciprocal minimum eigenvalue W. spcov_type Details: Parametric forms \\(R\\) given : car: \\((- range * W)^{-1}M\\), weights matrix \\(W\\), symmetry condition matrix \\(M\\) sar: \\([(- range * W)(- range * W)^T]^{-1}\\), weights matrix \\(W\\), \\(^T\\) indicates matrix transpose observations neighbors, given unique variance parameter called extra, must non-negative. estmethod Details: various estimation methods reml: Maximize restricted log-likelihood. ml: Maximize log-likelihood. default, spatial covariance parameters except ie well random effect variance parameters assumed unknown, requiring estimation. ie assumed zero known default (contrast models fit using splm(), ie assumed unknown default). change default behavior, specify spcov_initial (NA value ie spcov_initial assume ie unknown, requiring estimation). random Details: random effects used, model can written \\(y = X \\beta + Z1u1 + ... Zjuj + \\tau + \\epsilon\\), Z random effects design matrix u random effect. partition_factor Details:  partition factor can represented matrix form \\(P\\), elements \\(P\\) equal one observations level partition factor zero otherwise. covariance matrix involving spatial random effects components multiplied element-wise (Hadmard product) \\(P\\), yielding final covariance matrix. Observations NA response values removed model fitting, values can predicted afterwards running predict(object). way perform prediction spautor() models (.e., prediction locations must known prior estimation).","code":""},{"path":"/reference/spautor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit spatial autoregressive models — spautor","text":"function perform internal scaling. optimization stable due large extremely large variances, scale relevant variables variance 1 optimization.","code":""},{"path":"/reference/spautor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit spatial autoregressive models — spautor","text":"","code":"spmod <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\") summary(spmod) #>  #> Call: #> spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\") #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.34455 -0.10417  0.04410  0.07338  0.20475  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)    #> (Intercept) -0.07090    0.02497  -2.839  0.00452 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Coefficients (car spatial covariance): #>      de   range   extra  #> 0.03252 0.42037 0.02177"},{"path":"/reference/spautorRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit random forest spatial residual models — spautorRF","title":"Fit random forest spatial residual models — spautorRF","text":"Fit random forest residual spatial linear models areal data (.e., spatial autoregressive models) using random forest fit mean spatial linear model fit residuals. spatial linear model fit residuals can incorporate variety estimation methods, allowing random effects, partition factors, row standardization.","code":""},{"path":"/reference/spautorRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit random forest spatial residual models — spautorRF","text":"","code":"spautorRF(formula, data, ...)"},{"path":"/reference/spautorRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit random forest spatial residual models — spautorRF","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms right, separated + operators. data data frame sf object object contains variables fixed, random, partition_factor well geographical information. sf object provided POINT geometries, x-coordinates y-coordinates used directly. sf object provided POLYGON geometries, x-coordinates y-coordinates taken centroids polygon. ... Additional named arguments ranger::ranger() spautor().","code":""},{"path":"/reference/spautorRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit random forest spatial residual models — spautorRF","text":"list several elements used predict(). elements include function call (named call), random forest object fit mean (named ranger), spatial linear model object fit residuals (named spautor spautor_list), object can contain data locations predict (called newdata). newdata object contains set observations data whose response variable NA. spcov_type spcov_initial (passed spautor()) length one, list class spautorRF spatial linear model object fit residuals called spautor, class spautor. spcov_type spcov_initial length greater one, list class spautorRF_list spatial linear model object fit residuals called spautor_list, class spautor_list. contains several objects, class spautor.","code":""},{"path":"/reference/spautorRF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit random forest spatial residual models — spautorRF","text":"random forest residual spatial linear model described Fox et al. (2020). random forest model fit mean portion model specified formula using ranger::ranger(). Residuals computed used response variable intercept-spatial linear model fit using spautor(). model object intended use predict() perform prediction, also called random forest regression Kriging.","code":""},{"path":"/reference/spautorRF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit random forest spatial residual models — spautorRF","text":"Fox, E.W., Ver Hoef, J. M., & Olsen, . R. (2020). Comparing spatial regression random forests large environmental data sets. PloS one, 15(3), e0229509.","code":""},{"path":"/reference/spautorRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit random forest spatial residual models — spautorRF","text":"","code":"# \\donttest{ seal$var <- rnorm(NROW(seal)) # add noise variable sprfmod <- spautorRF(log_trend ~ var, data = seal, spcov_type = \"car\") predict(sprfmod) #>            1            9           13           15           18           19  #> -0.047560844  0.063245303 -0.035318981  0.007805814 -0.035086249 -0.022768385  #>           27           32           36           40           42           43  #> -0.015337128 -0.197452009 -0.012918855 -0.032428345 -0.087973916  0.008595976  #>           44           46           47           48           49           50  #> -0.200895509 -0.074365042 -0.012440013 -0.025842967 -0.162211600 -0.101897529  #>           51           52           53           54           55           56  #> -0.022099198  0.014858151 -0.036807223  0.023241791 -0.030652813  0.013857662  #>           57           58           61           62  #> -0.030180964 -0.022308774 -0.087930238 -0.012911933  # }"},{"path":"/reference/spcov_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spatial covariance parameter initial object — spcov_initial","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"Create spatial covariance parameter initial object specifies initial /known values use estimating spatial covariance parameters splm(), spglm(), spautor(), spgautor().","code":""},{"path":"/reference/spcov_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"","code":"spcov_initial(spcov_type, de, ie, range, extra, rotate, scale, known)"},{"path":"/reference/spcov_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"spcov_type spatial covariance function type. Available options include \"exponential\", \"spherical\", \"gaussian\", \"triangular\", \"circular\", \"cubic\", \"pentaspherical\", \"cosine\", \"wave\", \"jbessel\", \"gravity\", \"rquad\", \"magnetic\", \"matern\", \"cauchy\", \"pexponential\", \"car\", \"sar\", \"none\". de spatially dependent (correlated) random error variance. Commonly referred partial sill. ie spatially independent (uncorrelated) random error variance. Commonly referred nugget. range correlation parameter. extra extra covariance parameter used spcov_type \"matern\", \"cauchy\", \"pexponential\", \"car\", \"sar\". rotate Anisotropy rotation parameter (0 \\(\\pi\\) radians). used spcov_type \"car\" \"sar\". scale Anisotropy scale parameter (0 1). used spcov_type \"car\" \"sar\". known character vector indicating spatial covariance parameters assumed known. value \"given\" shorthand assuming spatial covariance parameters given spcov_initial() assumed known.","code":""},{"path":"/reference/spcov_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"list two elements: initial is_known. initial named numeric vector indicating spatial covariance parameters specified initial /known values. is_known named numeric vector indicating whether spatial covariance parameters initial known . class list matches value given spcov_type argument.","code":""},{"path":"/reference/spcov_initial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"spcov_initial list later passed splm(), spglm(), spautor(), spgautor(). NA values can given ie, rotate, scale, lets functions find initial values parameters sometimes otherwise assumed known (e.g., rotate scale splm() spglm() ie spautor() spgautor()). spatial covariance functions can generally expressed \\(de * R + ie * \\), \\(de\\) de , \\(R\\) matrix controls spatial dependence structure among observations, \\(h\\), \\(ie\\) ie , \\(\\) identity matrix. Note \\(de\\) \\(ie\\) must non-negative \\(range\\) must positive, except spcov_type car sar, case \\(range\\) must reciprocal maximum eigenvalue W reciprocal minimum eigenvalue W. Parametric forms \\(R\\) given , \\(\\eta = h / range\\): exponential: \\(exp(- \\eta )\\) spherical: \\((1 - 1.5\\eta + 0.5\\eta^3) * (h <= range)\\) gaussian: \\(exp(- \\eta^2 )\\) triangular: \\((1 - \\eta) * (h <= range)\\) circular: \\((1 - (2 / \\pi) * (m * sqrt(1 - m^2) + sin^{-1}(m))) * (h <= range), m = min(\\eta, 1)\\) cubic: \\((1 - 7\\eta^2 + 8.75\\eta^3 - 3.5\\eta^5 + 0.75\\eta^7) * (h <= range)\\) pentaspherical: \\((1 - 1.875\\eta + 1.25\\eta^3 - 0.375\\eta^5) * (h <= range)\\) cosine: \\(cos(\\eta)\\) wave: \\(sin(\\eta) / \\eta * (h > 0) + (h = 0)\\) jbessel: \\(Bj(h * range)\\), Bj Bessel-J function gravity: \\((1 + \\eta^2)^{-0.5}\\) rquad: \\((1 + \\eta^2)^{-1}\\) magnetic: \\((1 + \\eta^2)^{-1.5}\\) matern: \\(2^{1 - extra}/ \\Gamma(extra) * \\alpha^{extra} * Bk(\\alpha, extra)\\), \\(\\alpha = (2extra * \\eta)^{0.5}\\), Bk Bessel-K function wit  order \\(1/5 \\le extra \\le 5\\) cauchy: \\((1 + \\eta^2)^{-extra}\\), \\(extra > 0\\) pexponential: \\(exp(h^{extra}/range)\\), \\(0 < extra \\le 2\\) car: \\((- range * W)^{-1} * M\\), weights matrix \\(W\\), symmetry condition matrix \\(M\\), observations neighbors given unique variance parameter called \\(extra\\), \\(extra \\ge 0\\). sar: \\([(- range * W)(- range * W)^T]^{-1}\\), weights matrix \\(W\\), \\(^T\\) indicates matrix transpose, observations neighbors given unique variance parameter called \\(extra\\), \\(extra \\ge 0\\). none: \\(0\\) spatial covariance functions valid one spatial dimension. spatial covariance functions except triangular cosine valid two dimensions. spatial covariance function car sar, extra represents variance parameter observations W without least one neighbor () -- called unconnected observations. extra used least one unconnected observation.","code":""},{"path":"/reference/spcov_initial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spatial covariance parameter initial object — spcov_initial","text":"","code":"# known de value 1 and initial range value 0.4 spcov_initial(\"exponential\", de = 1, range = 0.4, known = c(\"de\")) #> $initial #>    de range  #>   1.0   0.4  #>  #> $is_known #>    de range  #>  TRUE FALSE  #>  #> attr(,\"class\") #> [1] \"exponential\" # known ie value 0 and known range value 1 spcov_initial(\"gaussian\", ie = 0, range = 1, known = c(\"given\")) #> $initial #>    ie range  #>     0     1  #>  #> $is_known #>    ie range  #>  TRUE  TRUE  #>  #> attr(,\"class\") #> [1] \"gaussian\" # ie given NA spcov_initial(\"car\", ie = NA) #> $initial #> ie  #> NA  #>  #> $is_known #>    ie  #> FALSE  #>  #> attr(,\"class\") #> [1] \"car\""},{"path":"/reference/spcov_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spatial covariance parameter object — spcov_params","title":"Create a spatial covariance parameter object — spcov_params","text":"Create spatial covariance parameter object use functions.","code":""},{"path":"/reference/spcov_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spatial covariance parameter object — spcov_params","text":"","code":"spcov_params(spcov_type, de, ie, range, extra, rotate = 0, scale = 1)"},{"path":"/reference/spcov_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spatial covariance parameter object — spcov_params","text":"spcov_type spatial covariance function type. Available options include \"exponential\", \"spherical\", \"gaussian\", \"triangular\", \"circular\", \"cubic\", \"pentaspherical\", \"cosine\", \"wave\", \"jbessel\", \"gravity\", \"rquad\", \"magnetic\", \"matern\", \"cauchy\", \"pexponential\", \"car\", \"sar\", \"none\". de spatially dependent (correlated) random error variance. Commonly referred partial sill. ie spatially independent (uncorrelated) random error variance. Commonly referred nugget. range correlation parameter. extra extra covariance parameter used spcov_type \"matern\", \"cauchy\", \"pexponential\", \"car\", \"sar\". rotate Anisotropy rotation parameter (0 \\(\\pi\\) radians). value 0 (default) implies rotation. used spcov_type \"car\" \"sar\". scale Anisotropy scale parameter (0 1). value 1 (default) implies scaling. used spcov_type \"car\" \"sar\".","code":""},{"path":"/reference/spcov_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spatial covariance parameter object — spcov_params","text":"named numeric vector spatial covariance parameters class spcov_type.","code":""},{"path":"/reference/spcov_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a spatial covariance parameter object — spcov_params","text":"Generally, arguments spcov_params must specified, though default arguments often chosen based spcov_type. spcov_type car sar, ie assumed 0 unless specified otherwise. full parameterizations spatial covariance functions, see spcov_initial().","code":""},{"path":"/reference/spcov_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spatial covariance parameter object — spcov_params","text":"","code":"spcov_params(\"exponential\", de = 1, ie = 1, range = 1) #>     de     ie  range rotate  scale  #>      1      1      1      0      1  #> attr(,\"class\") #> [1] \"exponential\""},{"path":"/reference/spgautor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spatial generalized autoregressive models — spgautor","title":"Fit spatial generalized autoregressive models — spgautor","text":"Fit spatial generalized linear models areal data (.e., spatial generalized autoregressive models) using variety estimation methods, allowing random effects, partition factors, row standardization.","code":""},{"path":"/reference/spgautor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spatial generalized autoregressive models — spgautor","text":"","code":"spgautor(   formula,   family,   data,   spcov_type,   spcov_initial,   dispersion_initial,   estmethod = \"reml\",   random,   randcov_initial,   partition_factor,   W,   row_st = TRUE,   M,   range_positive = TRUE,   ... )"},{"path":"/reference/spgautor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spatial generalized autoregressive models — spgautor","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms, separated + operators, right. family generalized linear model family describing distribution response variable used. Available options \"poisson\", \"nbinomial\", \"binomial\", \"beta\", \"Gamma\", \"inverse.gaussian\". Can quoted unquoted. Note family argument takes single value, rather list structure used stats::glm. See Details . data data frame sf object contains variables fixed, random, partition_factor, well potentially geographical information. spcov_type spatial covariance type. Available options include \"car\" \"sar\". Parameterizations spatial covariance type available Details. spcov_type specified, relevant spatial covariance parameters assumed unknown, requiring estimation. spcov_type required (ignored) spcov_initial provided.  Multiple values can provided character vector. spgautor() called iteratively element list returned model fit. default spcov_type \"car\". spcov_initial object spcov_initial() specifying initial /known values spatial covariance parameters. required spcov_type provided. Multiple spcov_initial() objects can provided list. spgautor() called iteratively element list returned model fit. dispersion_initial object dispersion_initial() specifying initial /known values dispersion parameter \"nbinomial\", \"beta\", \"Gamma\", \"inverse.gaussian\" families. family ignored dispersion_initial provided. estmethod estimation method. Available options include \"reml\" restricted maximum likelihood \"ml\" maximum likelihood default \"reml\". random one-sided linear formula describing random effect structure model. Terms specified right ~ operator. term structure x1 + ... + xn | g1/.../gm, x1 + ... + xn specifies model random effects g1/.../gm grouping structure. Separate terms separated + must generally wrapped parentheses. Random intercepts added model implicitly least  one variable defined. random intercept desired, must explicitly defined (e.g., x1 + ... + xn - 1 | g1/.../gm). random intercept desired grouping structure, random intercept must specified 1 | g1/.../gm. Note g1/.../gm shorthand (1 | g1/.../gm). random intercepts desired shorthand notation used, parentheses can omitted. randcov_initial optional object specifying initial /known values random effect variances. partition_factor one-sided linear formula single term specifying partition factor.  partition factor assumes observations different levels partition factor uncorrelated. W Weight matrix specifying neighboring structure used. required data sf polygon object, W calculated internally using queen contiguity. calculated internally, W computed using sf::st_intersects(). row_st logical indicating whether row standardization performed W. default TRUE. M M matrix satisfying car symmetry condition. car symmetry condition states \\((- range * W)^{-1}M\\) symmetric, \\(\\) identity matrix, \\(range\\) constant controls spatial dependence, W weights matrix, \\(^{-1}\\) represents inverse operator. M required car models W provided row_st FALSE.  M, required, default identity matrix. M must diagonal given vector one-column matrix assumed diagonal. range_positive Whether range constrained positive. default TRUE. ... arguments stats::optim().","code":""},{"path":"/reference/spgautor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spatial generalized autoregressive models — spgautor","text":"list many elements store information fitted model object. spcov_type spcov_initial length one, list class spgautor. Many generic functions summarize model fit available spgautor objects, including AIC, AICc, anova, augment, coef, cooks.distance, covmatrix, deviance, fitted, formula, glance, glances, hatvalues, influence, labels, logLik, loocv, model.frame, model.matrix, plot, predict, print, pseudoR2, summary, terms, tidy, update, varcomp, vcov. spcov_type spcov_initial length greater one, list class spgautor_list element list class spgautor. glances can used summarize spgautor_list objects, aforementioned spgautor generics can used individual list element (model fit).","code":""},{"path":"/reference/spgautor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit spatial generalized autoregressive models — spgautor","text":"spatial generalized linear model areal data (.e., spatial generalized autoregressive model) can written \\(g(\\mu) = \\eta = X \\beta + \\tau + \\epsilon\\), \\(\\mu\\) expectation response (\\(y\\)) given random errors, \\(g(.)\\) called link function links together \\(\\mu\\) \\(\\eta\\), \\(X\\) fixed effects design matrix, \\(\\beta\\) fixed effects, \\(\\tau\\) random error spatially dependent, \\(\\epsilon\\) random error spatially independent. six generalized linear model families available: poisson assumes \\(y\\) Poisson random variable nbinomial assumes \\(y\\) negative binomial random variable, binomial assumes \\(y\\) binomial random variable, beta assumes \\(y\\) beta random variable, Gamma assumes \\(y\\) gamma random variable, inverse.gaussian assumes \\(y\\) inverse Gaussian random variable. supports \\(y\\) family given : family: support \\(y\\) poisson: \\(0 \\le y\\); \\(y\\) integer nbinomial: \\(0 \\le y\\); \\(y\\) integer binomial: \\(0 \\le y\\); \\(y\\) integer beta: \\(0 < y < 1\\) Gamma: \\(0 < y\\) inverse.gaussian: \\(0 < y\\) generalized linear model families parameterizations link functions given : family: link function poisson: \\(g(\\mu) = log(\\eta)\\) (log link) nbinomial: \\(g(\\mu) = log(\\eta)\\) (log link) binomial: \\(g(\\mu) = log(\\eta / (1 - \\eta))\\) (logit link) beta: \\(g(\\mu) = log(\\eta / (1 - \\eta))\\) (logit link) Gamma: \\(g(\\mu) = log(\\eta)\\) (log link) inverse.gaussian: \\(g(\\mu) = log(\\eta)\\) (log link) variance function individual \\(y\\) (given \\(\\mu\\)) generalized linear model family given : family: \\(Var(y)\\) poisson: \\(\\mu \\phi\\) nbinomial: \\(\\mu + \\mu^2 / \\phi\\) binomial: \\(n \\mu (1 - \\mu) \\phi\\) beta: \\(\\mu (1 - \\mu) / (1 + \\phi)\\) Gamma: \\(\\mu^2 / \\phi\\) inverse.gaussian: \\(\\mu^2 / \\phi\\) parameter \\(\\phi\\) dispersion parameter influences \\(Var(y)\\). poisson binomial families, \\(\\phi\\) always one. Note inverse Gaussian parameterization different standard inverse Gaussian parameterization, variance \\(\\mu^3 / \\lambda\\). Setting \\(\\phi = \\lambda / \\mu\\) yields parameterization, preferred computational stability. Also note dispersion parameter often defined literature \\(V(\\mu) \\phi\\), \\(V(\\mu)\\) variance function mean. use parameterization, important recognize interpreting dispersion parameter estimates. generalized linear model constructions, see McCullagh Nelder (1989). Together, \\(\\tau\\) \\(\\epsilon\\) modeled using spatial covariance function, expressed \\(de * R + ie * \\), \\(de\\) dependent error variance, \\(R\\) matrix controls spatial dependence structure among observations, \\(ie\\) independent error variance, \\(\\) identity matrix. Note \\(de\\) \\(ie\\) must non-negative \\(range\\) must reciprocal maximum eigenvalue W reciprocal minimum eigenvalue W. Recall \\(\\tau\\) \\(\\epsilon\\) modeled link scale, inverse link (response) scale. Random effects also modeled link scale. spcov_type Details: Parametric forms \\(R\\) given : car: \\((- range * W)^{-1}M\\), weights matrix \\(W\\), symmetry condition matrix \\(M\\) sar: \\([(- range * W)(- range * W)^T]^{-1}\\), weights matrix \\(W\\), \\(^T\\) indicates matrix transpose observations neighbors, given unique variance parameter called extra, must non-negative. estmethod Details: various estimation methods reml: Maximize restricted log-likelihood. ml: Maximize log-likelihood. Note likelihood optimized obtained using Laplace approximation. default, spatial covariance parameters except ie well random effect variance parameters assumed unknown, requiring estimation. ie assumed zero known default (contrast models fit using spglm(), ie assumed unknown default). change default behavior, specify spcov_initial (NA value ie spcov_initial assume ie unknown, requiring estimation). random Details: random effects used, model can written \\(y = X \\beta + Z1u1 + ... Zjuj + \\tau + \\epsilon\\), Z random effects design matrix u random effect. partition_factor Details:  partition factor can represented matrix form \\(P\\), elements \\(P\\) equal one observations level partition factor zero otherwise. covariance matrix involving spatial random effects components multiplied element-wise (Hadmard product) \\(P\\), yielding final covariance matrix. Observations NA response values removed model fitting, values can predicted afterwards running predict(object). way perform prediction spgautor() models (.e., prediction locations must known prior estimation).","code":""},{"path":"/reference/spgautor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit spatial generalized autoregressive models — spgautor","text":"function perform internal scaling. optimization stable due large extremely large variances, scale relevant variables variance 1 optimization.","code":""},{"path":"/reference/spgautor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit spatial generalized autoregressive models — spgautor","text":"McCullagh P. Nelder, J. . (1989) Generalized Linear Models. London: Chapman Hall.","code":""},{"path":"/reference/spgautor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit spatial generalized autoregressive models — spgautor","text":"","code":"spgmod <- spgautor(I(log_trend^2) ~ 1, family = \"Gamma\", data = seal, spcov_type = \"car\") summary(spgmod) #>  #> Call: #> spgautor(formula = I(log_trend^2) ~ 1, family = \"Gamma\", data = seal,  #>     spcov_type = \"car\") #>  #> Deviance Residuals: #>    Min     1Q Median     3Q    Max  #> -4.484 -2.461 -1.030  0.386  2.823  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -3.7975     0.3396  -11.18   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Coefficients (car spatial covariance): #>       de    range    extra  #> 0.001738 0.995833 0.002374  #>  #> Coefficients (Dispersion for Gamma family): #> dispersion  #>     0.3051"},{"path":"/reference/spglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spatial generalized linear models — spglm","title":"Fit spatial generalized linear models — spglm","text":"Fit spatial generalized linear models point-referenced data (.e., generalized geostatistical models) using variety estimation methods, allowing random effects, anisotropy, partition factors, big data methods.","code":""},{"path":"/reference/spglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spatial generalized linear models — spglm","text":"","code":"spglm(   formula,   family,   data,   spcov_type,   xcoord,   ycoord,   spcov_initial,   dispersion_initial,   estmethod = \"reml\",   anisotropy = FALSE,   random,   randcov_initial,   partition_factor,   local,   ... )"},{"path":"/reference/spglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spatial generalized linear models — spglm","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms right, separated + operators. family generalized linear model family describing distribution response variable used. Available options \"poisson\", \"nbinomial\", \"binomial\", \"beta\", \"Gamma\", \"inverse.gaussian\". Can quoted unquoted. Note family argument takes single value, rather list structure used stats::glm. See Details . data data frame sf object object contains variables fixed, random, partition_factor well geographical information. sf object provided POINT geometries, x-coordinates y-coordinates used directly. sf object provided POLYGON geometries, x-coordinates y-coordinates taken centroids polygon. spcov_type spatial covariance type. Available options include \"exponential\", \"spherical\", \"gaussian\", \"triangular\", \"circular\", \"cubic\", \"pentaspherical\", \"cosine\", \"wave\", \"jbessel\", \"gravity\", \"rquad\", \"magnetic\", \"matern\", \"cauchy\", \"pexponential\", \"none\". Parameterizations spatial covariance type available Details. Multiple spatial covariance types can provided character vector, spglm() called iteratively element list returned model fit. default spcov_type \"exponential\". spcov_type specified, unknown spatial covariance parameters estimated. spcov_type ignored spcov_initial provided. xcoord name column data representing x-coordinate. Can quoted unquoted. required data sf object. ycoord name column data representing y-coordinate. Can quoted unquoted. required data sf object. spcov_initial object spcov_initial() specifying initial /known values spatial covariance parameters. Multiple spcov_initial() objects can provided list. spglm() called iteratively element list returned model fit. dispersion_initial object dispersion_initial() specifying initial /known values dispersion parameter \"nbinomial\", \"beta\", \"Gamma\", \"inverse.gaussian\" families. family ignored dispersion_initial provided. estmethod estimation method. Available options include \"reml\" restricted maximum likelihood \"ml\" maximum likelihood. default \"reml\". anisotropy logical indicating whether (geometric) anisotropy modeled. required spcov_initial provided 1) rotate assumed unknown assumed known non-zero 2) scale assumed unknown assumed known less one. anisotropy TRUE, computational times can significantly increase. default FALSE. random one-sided linear formula describing random effect structure model. Terms specified right ~ operator. term structure x1 + ... + xn | g1/.../gm, x1 + ... + xn specifies model random effects g1/.../gm grouping structure. Separate terms separated + must generally wrapped parentheses. Random intercepts added model implicitly least  one variable defined. random intercept desired, must explicitly defined (e.g., x1 + ... + xn - 1 | g1/.../gm). random intercept desired grouping structure, random intercept must specified 1 | g1/.../gm. Note g1/.../gm shorthand (1 | g1/.../gm). random intercepts desired shorthand notation used, parentheses can omitted. randcov_initial optional object specifying initial /known values random effect variances. partition_factor one-sided linear formula single term specifying partition factor.  partition factor assumes observations different levels partition factor uncorrelated. local optional logical list controlling big data approximation. omitted, local set TRUE FALSE based sample size (number non-missing observations data) -- sample size exceeds 3,000, local set TRUE. Otherwise set FALSE. FALSE, big data approximation implemented. list provided, following arguments detail big data approximation: index: group indexes. Observations different levels index assumed uncorrelated purposes estimation. index provided, determined specifying method either size groups. method: big data approximation method used determine index. Ignored index provided. method = \"random\", observations randomly assigned index based size. method = \"kmeans\", observations assigned index based k-means clustering coordinates groups clusters. default \"kmeans\". Note methods random component, means may get different results separate model fitting calls. ensure consistent results, specify index set seed via base::set.seed(). size: number observations index group method \"random\". number observations divisible size, levels get size - 1 observations. default 100. groups: number index groups. method \"random\", size \\(ceiling(n / groups)\\), \\(n\\) sample size. Automatically determined size specified. method \"kmeans\", groups number clusters. var_adjust: approach adjusting variance-covariance matrix fixed effects. \"none\" adjustment, \"theoretical\" theoretically-correct adjustment, \"pooled\" pooled adjustment, \"empirical\" empirical adjustment. default \"theoretical\". parallel: TRUE, parallel processing via parallel package automatically used. default FALSE. ncores: parallel = TRUE, number cores parallelize . default number available cores machine. local list, least one list element must provided initialize default arguments list elements. local TRUE, defaults local chosen local transformed list(size = 100, method = \"kmeans\", var_adjust = \"theoretical\", parallel = FALSE). ... arguments esv() stats::optim().","code":""},{"path":"/reference/spglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spatial generalized linear models — spglm","text":"list many elements store information fitted model object. spcov_type spcov_initial length one, list class spglm. Many generic functions summarize model fit available spglm objects, including AIC, AICc, anova, augment, coef, cooks.distance, covmatrix, deviance, fitted, formula, glance, glances, hatvalues, influence, labels, logLik, loocv, model.frame, model.matrix, plot, predict, print, pseudoR2, summary, terms, tidy, update, varcomp, vcov. spcov_type spcov_initial length greater one, list class spglm_list element list class spglm. glances can used summarize spglm_list objects, aforementioned spglm generics can used individual list element (model fit).","code":""},{"path":"/reference/spglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit spatial generalized linear models — spglm","text":"spatial generalized linear model point-referenced data (.e., generalized geostatistical model) can written \\(g(\\mu) = \\eta = X \\beta + \\tau + \\epsilon\\), \\(\\mu\\) expectation response (\\(y\\)) given random errors, \\(g(.)\\) called link function links together \\(\\mu\\) \\(\\eta\\), \\(X\\) fixed effects design matrix, \\(\\beta\\) fixed effects, \\(\\tau\\) random error spatially dependent, \\(\\epsilon\\) random error spatially independent. six generalized linear model families available: poisson assumes \\(y\\) Poisson random variable nbinomial assumes \\(y\\) negative binomial random variable, binomial assumes \\(y\\) binomial random variable, beta assumes \\(y\\) beta random variable, Gamma assumes \\(y\\) gamma random variable, inverse.gaussian assumes \\(y\\) inverse Gaussian random variable. supports \\(y\\) family given : family: support \\(y\\) poisson: \\(0 \\le y\\); \\(y\\) integer nbinomial: \\(0 \\le y\\); \\(y\\) integer binomial: \\(0 \\le y\\); \\(y\\) integer beta: \\(0 < y < 1\\) Gamma: \\(0 < y\\) inverse.gaussian: \\(0 < y\\) generalized linear model families parameterizations link functions given : family: link function poisson: \\(g(\\mu) = log(\\eta)\\) (log link) nbinomial: \\(g(\\mu) = log(\\eta)\\) (log link) binomial: \\(g(\\mu) = log(\\eta / (1 - \\eta))\\) (logit link) beta: \\(g(\\mu) = log(\\eta / (1 - \\eta))\\) (logit link) Gamma: \\(g(\\mu) = log(\\eta)\\) (log link) inverse.gaussian: \\(g(\\mu) = log(\\eta)\\) (log link) variance function individual \\(y\\) (given \\(\\mu\\)) generalized linear model family given : family: \\(Var(y)\\) poisson: \\(\\mu \\phi\\) nbinomial: \\(\\mu + \\mu^2 / \\phi\\) binomial: \\(n \\mu (1 - \\mu) \\phi\\) beta: \\(\\mu (1 - \\mu) / (1 + \\phi)\\) Gamma: \\(\\mu^2 / \\phi\\) inverse.gaussian: \\(\\mu^2 / \\phi\\) parameter \\(\\phi\\) dispersion parameter influences \\(Var(y)\\). poisson binomial families, \\(\\phi\\) always one. Note inverse Gaussian parameterization different standard inverse Gaussian parameterization, variance \\(\\mu^3 / \\lambda\\). Setting \\(\\phi = \\lambda / \\mu\\) yields parameterization, preferred computational stability. Also note dispersion parameter often defined literature \\(V(\\mu) \\phi\\), \\(V(\\mu)\\) variance function mean. use parameterization, important recognize interpreting dispersion estimates. generalized linear model constructions, see McCullagh Nelder (1989). Together, \\(\\tau\\) \\(\\epsilon\\) modeled using spatial covariance function, expressed \\(de * R + ie * \\), \\(de\\) dependent error variance, \\(R\\) correlation matrix controls spatial dependence structure among observations, \\(ie\\) independent error variance, \\(\\) identity matrix. Recall \\(\\tau\\) \\(\\epsilon\\) modeled link scale, inverse link (response) scale. Random effects also modeled link scale. spcov_type Details: Parametric forms \\(R\\) given , \\(\\eta = h / range\\) \\(h\\) distance observations: exponential: \\(exp(- \\eta )\\) spherical: \\((1 - 1.5\\eta + 0.5\\eta^3) * (h <= range)\\) gaussian: \\(exp(- \\eta^2 )\\) triangular: \\((1 - \\eta) * (h <= range)\\) circular: \\((1 - (2 / \\pi) * (m * sqrt(1 - m^2) + sin^{-1}(m))) * (h <= range), m = min(\\eta, 1)\\) cubic: \\((1 - 7\\eta^2 + 8.75\\eta^3 - 3.5\\eta^5 + 0.75\\eta^7) * (h <= range)\\) pentaspherical: \\((1 - 1.875\\eta + 1.25\\eta^3 - 0.375\\eta^5) * (h <= range)\\) cosine: \\(cos(\\eta)\\) wave: \\(sin(\\eta) / \\eta * (h > 0) + (h = 0)\\) jbessel: \\(Bj(h * range)\\), Bj Bessel-J function gravity: \\((1 + \\eta^2)^{-0.5}\\) rquad: \\((1 + \\eta^2)^{-1}\\) magnetic: \\((1 + \\eta^2)^{-1.5}\\) matern: \\(2^{1 - extra}/ \\Gamma(extra) * \\alpha^{extra} * Bk(\\alpha, extra)\\), \\(\\alpha = (2extra * \\eta)^{0.5}\\), Bk Bessel-K function order \\(1/5 \\le extra \\le 5\\) cauchy: \\((1 + \\eta^2)^{-extra}\\), \\(extra > 0\\) pexponential: \\(exp(h^{extra}/range)\\), \\(0 < extra \\le 2\\) none: \\(0\\) spatial covariance functions valid one spatial dimension. spatial covariance functions except triangular cosine valid two dimensions. estmethod Details: various estimation methods reml: Maximize restricted log-likelihood. ml: Maximize log-likelihood. Note likelihood optimized obtained using Laplace approximation. anisotropy Details: default, spatial covariance parameters except rotate scale well random effect variance parameters assumed unknown, requiring estimation. either rotate scale given initial values 0 1 (respectively) assumed unknown spcov_initial(), anisotropy implicitly set TRUE. (Geometric) Anisotropy modeled transforming covariance function decays differently different directions one decays equally directions via rotation scaling original coordinates. rotation controlled rotate parameter \\([0, \\pi]\\) radians. scaling controlled scale parameter \\([0, 1]\\). anisotropy correction involves first rotation coordinates clockwise rotate scaling coordinates' minor axis reciprocal scale. spatial covariance computed using transformed coordinates. random Details: random effects used, model can written \\(y = X \\beta + Z1u1 + ... Zjuj + \\tau + \\epsilon\\), Z random effects design matrix u random effect. partition_factor Details: partition factor can represented matrix form \\(P\\), elements \\(P\\) equal one observations level partition factor zero otherwise. covariance matrix involving spatial random effects components multiplied element-wise (Hadmard product) \\(P\\), yielding final covariance matrix. local Details: big data approximation works sorting observations different levels index variable. Observations different levels index variable assumed uncorrelated purposes model fitting. Sparse matrix methods implemented significant computational gains. Parallelization generally speeds computations data sizes larger thousand. \"random\" \"kmeans\" values method local random components. means may get slightly different results using big data approximation rerunning spglm() code. consistent results, either set seed via base::set.seed() specify index local. Observations NA response values removed model fitting, values can predicted afterwards running predict(object).","code":""},{"path":"/reference/spglm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit spatial generalized linear models — spglm","text":"function perform internal scaling. optimization stable due large extremely large variances, scale relevant variables variance 1 optimization.","code":""},{"path":"/reference/spglm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit spatial generalized linear models — spglm","text":"McCullagh P. Nelder, J. . (1989) Generalized Linear Models. London: Chapman Hall.","code":""},{"path":"/reference/spglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit spatial generalized linear models — spglm","text":"","code":"spgmod <- spglm(presence ~ elev,   family = \"binomial\", data = moose,   spcov_type = \"exponential\" ) summary(spgmod) #>  #> Call: #> spglm(formula = presence ~ elev, family = \"binomial\", data = moose,  #>     spcov_type = \"exponential\") #>  #> Deviance Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5249 -0.8114  0.5600  0.8306  1.5757  #>  #> Coefficients (fixed): #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) -0.874038   1.140953  -0.766    0.444 #> elev         0.002365   0.003184   0.743    0.458 #>  #> Pseudo R-squared: 0.00311 #>  #> Coefficients (exponential spatial covariance): #>        de        ie     range  #> 3.746e+00 4.392e-03 3.203e+04  #>  #> Coefficients (Dispersion for binomial family): #> dispersion  #>          1"},{"path":"/reference/splm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spatial linear models — splm","title":"Fit spatial linear models — splm","text":"Fit spatial linear models point-referenced data (.e., geostatistical models) using variety estimation methods, allowing random effects, anisotropy, partition factors, big data methods.","code":""},{"path":"/reference/splm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spatial linear models — splm","text":"","code":"splm(   formula,   data,   spcov_type,   xcoord,   ycoord,   spcov_initial,   estmethod = \"reml\",   weights = \"cressie\",   anisotropy = FALSE,   random,   randcov_initial,   partition_factor,   local,   ... )"},{"path":"/reference/splm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spatial linear models — splm","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms right, separated + operators. data data frame sf object object contains variables fixed, random, partition_factor well geographical information. sf object provided POINT geometries, x-coordinates y-coordinates used directly. sf object provided POLYGON geometries, x-coordinates y-coordinates taken centroids polygon. spcov_type spatial covariance type. Available options include \"exponential\", \"spherical\", \"gaussian\", \"triangular\", \"circular\", \"cubic\", \"pentaspherical\", \"cosine\", \"wave\", \"jbessel\", \"gravity\", \"rquad\", \"magnetic\", \"matern\", \"cauchy\", \"pexponential\", \"none\". Parameterizations spatial covariance type available Details. Multiple spatial covariance types can provided character vector, splm() called iteratively element list returned model fit. default spcov_type \"exponential\". spcov_type specified, unknown spatial covariance parameters estimated. spcov_type ignored spcov_initial provided. xcoord name column data representing x-coordinate. Can quoted unquoted. required data sf object. ycoord name column data representing y-coordinate. Can quoted unquoted. required data sf object. spcov_initial object spcov_initial() specifying initial /known values spatial covariance parameters. Multiple spcov_initial() objects can provided list. splm() called iteratively element list returned model fit. estmethod estimation method. Available options include \"reml\" restricted maximum likelihood, \"ml\" maximum likelihood, \"sv-wls\" semivariogram weighted least squares, \"sv-cl\" semivariogram composite likelihood. default \"reml\". weights Weights use estmethod \"sv-wls\". Available options include \"cressie\", \"cressie-dr\", \"cressie-nopairs\", \"cressie-dr-nopairs\", \"pairs\", \"pairs-invd\", \"pairs-invrd\", \"ols\". Parameterizations weight available Details. default \"cressie\". anisotropy logical indicating whether (geometric) anisotropy modeled. required spcov_initial provided 1) rotate assumed unknown assumed known non-zero 2) scale assumed unknown assumed known less one. anisotropy TRUE, computational times can significantly increase. default FALSE. random one-sided linear formula describing random effect structure model. Terms specified right ~ operator. term structure x1 + ... + xn | g1/.../gm, x1 + ... + xn specifies model random effects g1/.../gm grouping structure. Separate terms separated + must generally wrapped parentheses. Random intercepts added model implicitly least  one variable defined. random intercept desired, must explicitly defined (e.g., x1 + ... + xn - 1 | g1/.../gm). random intercept desired grouping structure, random intercept must specified 1 | g1/.../gm. Note g1/.../gm shorthand (1 | g1/.../gm). random intercepts desired shorthand notation used, parentheses can omitted. randcov_initial optional object specifying initial /known values random effect variances. partition_factor one-sided linear formula single term specifying partition factor.  partition factor assumes observations different levels partition factor uncorrelated. local optional logical list controlling big data approximation. omitted, local set TRUE FALSE based sample size (number non-missing observations data) -- sample size exceeds 5,000, local set TRUE. Otherwise set FALSE. local also set FALSE spcov_type \"none\" random effects specified via random. FALSE, big data approximation implemented. list provided, following arguments detail big data approximation: index: group indexes. Observations different levels index assumed uncorrelated purposes estimation. index provided, determined specifying method either size groups. method: big data approximation method used determine index. Ignored index provided. method = \"random\", observations randomly assigned index based size. method = \"kmeans\", observations assigned index based k-means clustering coordinates groups clusters. default \"kmeans\". Note methods random component, means may get different results separate model fitting calls. ensure consistent results, specify index set seed via base::set.seed(). size: number observations index group method \"random\". number observations divisible size, levels get size - 1 observations. default 100. groups: number index groups. method \"random\", size \\(ceiling(n / groups)\\), \\(n\\) sample size. Automatically determined size specified. method \"kmeans\", groups number clusters. var_adjust: approach adjusting variance-covariance matrix fixed effects. \"none\" adjustment, \"theoretical\" theoretically-correct adjustment, \"pooled\" pooled adjustment, \"empirical\" empirical adjustment. default \"theoretical\". parallel: TRUE, parallel processing via parallel package automatically used. default FALSE. ncores: parallel = TRUE, number cores parallelize . default number available cores machine. local list, least one list element must provided initialize default arguments list elements. local TRUE, defaults local chosen local transformed list(size = 100, method = \"kmeans\", var_adjust = \"theoretical\", parallel = FALSE). ... arguments esv() stats::optim().","code":""},{"path":"/reference/splm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spatial linear models — splm","text":"list many elements store information fitted model object. spcov_type spcov_initial length one, list class splm. Many generic functions summarize model fit available splm objects, including AIC, AICc, anova, augment, coef, cooks.distance, covmatrix, deviance, fitted, formula, glance, glances, hatvalues, influence, labels, logLik, loocv, model.frame, model.matrix, plot, predict, print, pseudoR2, summary, terms, tidy, update, varcomp, vcov. spcov_type spcov_initial length greater one, list class splm_list element list class splm. glances can used summarize splm_list objects, aforementioned splm generics can used individual list element (model fit).","code":""},{"path":"/reference/splm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit spatial linear models — splm","text":"spatial linear model point-referenced data (.e., geostatistical model) can written \\(y = X \\beta + \\tau + \\epsilon\\), \\(X\\) fixed effects design matrix, \\(\\beta\\) fixed effects, \\(\\tau\\) random error spatially dependent, \\(\\epsilon\\) random error spatially independent. Together, \\(\\tau\\) \\(\\epsilon\\) modeled using spatial covariance function, expressed \\(de * R + ie * \\), \\(de\\) dependent error variance, \\(R\\) correlation matrix controls spatial dependence structure among observations, \\(ie\\) independent error variance, \\(\\) identity matrix. spcov_type Details: Parametric forms \\(R\\) given , \\(\\eta = h / range\\) \\(h\\) distance observations: exponential: \\(exp(- \\eta )\\) spherical: \\((1 - 1.5\\eta + 0.5\\eta^3) * (h <= range)\\) gaussian: \\(exp(- \\eta^2 )\\) triangular: \\((1 - \\eta) * (h <= range)\\) circular: \\((1 - (2 / \\pi) * (m * sqrt(1 - m^2) + sin^{-1}(m))) * (h <= range), m = min(\\eta, 1)\\) cubic: \\((1 - 7\\eta^2 + 8.75\\eta^3 - 3.5\\eta^5 + 0.75\\eta^7) * (h <= range)\\) pentaspherical: \\((1 - 1.875\\eta + 1.25\\eta^3 - 0.375\\eta^5) * (h <= range)\\) cosine: \\(cos(\\eta)\\) wave: \\(sin(\\eta) / \\eta * (h > 0) + (h = 0)\\) jbessel: \\(Bj(h * range)\\), Bj Bessel-J function gravity: \\((1 + \\eta^2)^{-0.5}\\) rquad: \\((1 + \\eta^2)^{-1}\\) magnetic: \\((1 + \\eta^2)^{-1.5}\\) matern: \\(2^{1 - extra}/ \\Gamma(extra) * \\alpha^{extra} * Bk(\\alpha, extra)\\), \\(\\alpha = (2extra * \\eta)^{0.5}\\), Bk Bessel-K function order \\(1/5 \\le extra \\le 5\\) cauchy: \\((1 + \\eta^2)^{-extra}\\), \\(extra > 0\\) pexponential: \\(exp(h^{extra}/range)\\), \\(0 < extra \\le 2\\) none: \\(0\\) spatial covariance functions valid one spatial dimension. spatial covariance functions except triangular cosine valid two dimensions. estmethod Details: various estimation methods reml: Maximize restricted log-likelihood. ml: Maximize log-likelihood. sv-wls: Minimize semivariogram weighted least squares loss. sv-cl: Minimize semivariogram composite likelihood loss. anisotropy Details: default, spatial covariance parameters except rotate scale well random effect variance parameters assumed unknown, requiring estimation. either rotate scale given initial values 0 1 (respectively) assumed unknown spcov_initial(), anisotropy implicitly set TRUE. (Geometric) Anisotropy modeled transforming covariance function decays differently different directions one decays equally directions via rotation scaling original coordinates. rotation controlled rotate parameter \\([0, \\pi]\\) radians. scaling controlled scale parameter \\([0, 1]\\). anisotropy correction involves first rotation coordinates clockwise rotate scaling coordinates' minor axis reciprocal scale. spatial covariance computed using transformed coordinates. random Details: random effects used (estimation method must \"reml\" \"ml\"), model can written \\(y = X \\beta + Z1u1 + ... Zjuj + \\tau + \\epsilon\\), Z random effects design matrix u random effect. partition_factor Details: partition factor can represented matrix form \\(P\\), elements \\(P\\) equal one observations level partition factor zero otherwise. covariance matrix involving spatial random effects components multiplied element-wise (Hadmard product) \\(P\\), yielding final covariance matrix. local Details: big data approximation works sorting observations different levels index variable. Observations different levels index variable assumed uncorrelated purposes model fitting. Sparse matrix methods implemented significant computational gains. Parallelization generally speeds computations data sizes larger thousand. \"random\" \"kmeans\" values method local random components. means may get slightly different results using big data approximation rerunning splm() code. consistent results, either set seed via base::set.seed() specify index local. Observations NA response values removed model fitting, values can predicted afterwards running predict(object).","code":""},{"path":"/reference/splm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit spatial linear models — splm","text":"function perform internal scaling. optimization stable due large extremely large variances, scale relevant variables variance 1 optimization.","code":""},{"path":"/reference/splm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit spatial linear models — splm","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) summary(spmod) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.41281 -0.20763 -0.11205  0.02956  0.45429  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.04981    0.31093   6.592 4.33e-11 *** #> waterY      -0.08310    0.06449  -1.289 0.197563     #> tarpnone     0.08005    0.07759   1.032 0.302166     #> tarpshade    0.28654    0.07667   3.737 0.000186 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.3963 #>  #> Coefficients (exponential spatial covariance): #>      de      ie   range  #>  0.1109  0.0226 19.1168"},{"path":"/reference/splmRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit random forest spatial residual models — splmRF","title":"Fit random forest spatial residual models — splmRF","text":"Fit random forest spatial residual models point-referenced data (.e., geostatistical models) using random forest fit mean spatial linear model fit residuals. spatial linear model fit residuals can incorporate variety estimation methods, allowing random effects, anisotropy, partition factors, big data methods.","code":""},{"path":"/reference/splmRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit random forest spatial residual models — splmRF","text":"","code":"splmRF(formula, data, ...)"},{"path":"/reference/splmRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit random forest spatial residual models — splmRF","text":"formula two-sided linear formula describing fixed effect structure model, response left ~ operator terms right, separated + operators. data data frame sf object object contains variables fixed, random, partition_factor well geographical information. sf object provided POINT geometries, x-coordinates y-coordinates used directly. sf object provided POLYGON geometries, x-coordinates y-coordinates taken centroids polygon. ... Additional named arguments ranger::ranger() splm().","code":""},{"path":"/reference/splmRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit random forest spatial residual models — splmRF","text":"list several elements used predict(). elements include function call (named call), random forest object fit mean (named ranger), spatial linear model object fit residuals (named splm splm_list), object can contain data locations predict (called newdata). newdata object contains set observations data whose response variable NA. spcov_type spcov_initial (passed splm()) length one, list class splmRF spatial linear model object fit residuals called splm, class splm. spcov_type spcov_initial length greater one, list class splmRF_list spatial linear model object fit residuals called splm_list, class splm_list. contains several objects, class splm. splmRF object used predict(). three elements: ranger, output fitting mean model ranger::ranger(); splm, output fitting spatial linear model ranger residuals; newdata, newdata object, relevant.","code":""},{"path":"/reference/splmRF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit random forest spatial residual models — splmRF","text":"random forest residual spatial linear model described Fox et al. (2020). random forest model fit mean portion model specified formula using ranger::ranger(). Residuals computed used response variable intercept-spatial linear model fit using splm(). model object intended use predict() perform prediction, also called random forest regression Kriging.","code":""},{"path":"/reference/splmRF.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit random forest spatial residual models — splmRF","text":"function perform internal scaling. optimization stable due large extremely large variances, scale relevant variables variance 1 optimization.","code":""},{"path":"/reference/splmRF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit random forest spatial residual models — splmRF","text":"Fox, E.W., Ver Hoef, J. M., & Olsen, . R. (2020). Comparing spatial regression random forests large environmental data sets. PloS one, 15(3), e0229509.","code":""},{"path":"/reference/splmRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit random forest spatial residual models — splmRF","text":"","code":"# \\donttest{ sulfate$var <- rnorm(NROW(sulfate)) # add noise variable sulfate_preds$var <- rnorm(NROW(sulfate_preds)) # add noise variable sprfmod <- splmRF(sulfate ~ var, data = sulfate, spcov_type = \"exponential\") predict(sprfmod, sulfate_preds) #>          1          2          3          4          5          6          7  #>  4.6647081 32.2937280 12.4171827 20.0334091  4.6137773 20.9338497 -3.7767627  #>          8          9         10         11         12         13         14  #> 10.3723772  7.8501108  9.0635043 -2.8887342  5.9599629 19.2548782 26.8253179  #>         15         16         17         18         19         20         21  #> 15.7219905 13.3392745 25.9704929 15.8928768 12.8669760 15.9325344  6.1293825  #>         22         23         24         25         26         27         28  #>  7.7215349 12.3805158  1.7211356  2.5122180  2.7523199 10.7403443  6.1422438  #>         29         30         31         32         33         34         35  #> 14.6772741  9.1394838  8.9918356 -1.5755322  5.7765686 -3.6979914  9.6750398  #>         36         37         38         39         40         41         42  #> 12.6131454 13.3057213  9.5178131 11.9364494 18.9649011 13.0870195 35.1439319  #>         43         44         45         46         47         48         49  #> 19.5160789 26.3875611 -1.2161375  3.3560655 -1.4073731  7.6184210 19.6736354  #>         50         51         52         53         54         55         56  #> 13.0866364 39.9645591 16.6260932  0.7717388  2.6775865  0.9928212 14.9730969  #>         57         58         59         60         61         62         63  #> 15.0050216 -7.5984904 26.8405839  8.9867037  8.7887695 24.8789255 -7.5847903  #>         64         65         66         67         68         69         70  #> 21.4436460 32.0487576  6.8317962  2.7597476  2.9478836  5.9237449  9.8088981  #>         71         72         73         74         75         76         77  #>  6.1561882 10.2314572  1.8431124  8.6310116 15.2053649 -0.5291756 26.1073539  #>         78         79         80         81         82         83         84  #>  5.3472115  9.0737273 18.6513870 12.2118785  9.1529688  2.0959976  2.4863667  #>         85         86         87         88         89         90         91  #>  7.1176109  9.3876520 -2.5349409 -0.6536736 -1.2594729 20.6462609  8.4969729  #>         92         93         94         95         96         97         98  #> 17.1992093  8.9246054 35.1800119  9.4604696  8.4838238 23.1624371 20.5977136  #>         99        100  #> 12.9440470  8.7627524  # }"},{"path":"/reference/spmodel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spmodel: Spatial Statistical Modeling and Prediction — spmodel-package","title":"spmodel: Spatial Statistical Modeling and Prediction — spmodel-package","text":"Fit, summarize, predict variety spatial statistical models applied point-referenced areal (lattice) data. Parameters estimated using various methods. Additional modeling features include anisotropy, non-spatial random effects, partition factors, big data approaches, . Model-fit statistics used summarize, visualize, compare models. Predictions unobserved locations readily obtainable. additional details, see Dumelle et al. (2023) doi:10.1371/journal.pone.0282524 .","code":""},{"path":[]},{"path":"/reference/spmodel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spmodel: Spatial Statistical Modeling and Prediction — spmodel-package","text":"Maintainer: Michael Dumelle Dumelle.Michael@epa.gov (ORCID) Authors: Matt Higham mhigham@stlawu.edu Jay M. Ver Hoef jay.verhoef@noaa.gov","code":""},{"path":"/reference/sprbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial beta random variable — sprbeta","title":"Simulate a spatial beta random variable — sprbeta","text":"Simulate spatial beta random variable specific mean covariance structure.","code":""},{"path":"/reference/sprbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial beta random variable — sprbeta","text":"","code":"sprbeta(   spcov_params,   dispersion = 1,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial beta random variable — sprbeta","text":"spcov_params spcov_params() object. dispersion dispersion value. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial beta random variable — sprbeta","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprbeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial beta random variable — sprbeta","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate beta random variable.","code":""},{"path":"/reference/sprbeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial beta random variable — sprbeta","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprbeta(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 0.768782853 0.915354189 0.643316016 0.495920249 0.531946314 0.949134603 #>  [7] 0.008787926 0.926323195 0.825737928 0.998687147 0.488137775 0.187989633 #> [13] 0.490641464 0.979244761 0.998786844 0.940262917 0.482199457 0.195367857 #> [19] 0.550573704 0.094013780 0.175080646 0.803952877 0.409502364 0.171865978 #> [25] 0.033540333 0.892997761 0.430974062 0.173828388 0.937854046 0.130673383 sprbeta(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>                 1            2           3           4           5 #>  [1,] 0.799069282 0.9935655744 0.963605626 0.208206166 0.809968233 #>  [2,] 0.902270141 0.7397491277 0.990600692 0.463017479 0.599103066 #>  [3,] 0.191188372 0.9453687097 0.194498107 0.413220896 0.397114158 #>  [4,] 0.084236318 0.0010811206 0.872602062 0.000100000 0.993534710 #>  [5,] 0.272863426 0.0357125968 0.314039806 0.197544566 0.052288117 #>  [6,] 0.002817475 0.0091834754 0.628330566 0.058970242 0.797636871 #>  [7,] 0.080700824 0.8730629336 0.535839424 0.383031448 0.725746335 #>  [8,] 0.979716629 0.9730929883 0.969846613 0.054645991 0.373224658 #>  [9,] 0.261872858 0.2510257369 0.854502769 0.419794192 0.147887119 #> [10,] 0.719886528 0.0990438453 0.002291665 0.005901676 0.917416063 #> [11,] 0.959807555 0.8628186999 0.953323408 0.157957993 0.350987080 #> [12,] 0.000100000 0.2539916539 0.873590449 0.420964855 0.997146142 #> [13,] 0.042513447 0.0886404404 0.892619095 0.207875999 0.005821058 #> [14,] 0.487974759 0.9153501142 0.966353147 0.990768687 0.973624775 #> [15,] 0.144704886 0.8770171845 0.047634061 0.972876975 0.015527025 #> [16,] 0.342393385 0.9968755641 0.201426604 0.135602953 0.979600788 #> [17,] 0.300944290 0.1874457465 0.304199142 0.804285540 0.118891357 #> [18,] 0.004108458 0.2117850815 0.076208713 0.022493283 0.809703357 #> [19,] 0.191261012 0.3889502559 0.530826867 0.000100000 0.968888524 #> [20,] 0.164200001 0.6887668562 0.054514331 0.042203644 0.285879008 #> [21,] 0.696741778 0.0169622043 0.215972512 0.825983649 0.999900000 #> [22,] 0.075232230 0.0009583495 0.999900000 0.284797808 0.762601599 #> [23,] 0.061159304 0.0011153011 0.001296666 0.125557902 0.763955955 #> [24,] 0.007187760 0.0086006528 0.909021551 0.000173877 0.888330353 #> [25,] 0.388299706 0.7268216872 0.054789941 0.119583130 0.256267960 #> [26,] 0.000100000 0.4023802331 0.333929172 0.996191697 0.994159313 #> [27,] 0.906205428 0.1340897432 0.011115700 0.098977796 0.656104299 #> [28,] 0.347673971 0.2928170775 0.899624721 0.117148644 0.746637616 #> [29,] 0.291159376 0.0065403348 0.114834465 0.935665741 0.164555891 #> [30,] 0.750595278 0.0037432140 0.708397813 0.647281819 0.410745290"},{"path":"/reference/sprbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial binomial random variable — sprbinom","title":"Simulate a spatial binomial random variable — sprbinom","text":"Simulate spatial binomial random variable specific mean covariance structure.","code":""},{"path":"/reference/sprbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial binomial random variable — sprbinom","text":"","code":"sprbinom(   spcov_params,   mean = 0,   size = 1,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial binomial random variable — sprbinom","text":"spcov_params spcov_params() object. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. size numeric vector representing sample size binomial trial. default 1, corresponds Bernoulli trial observation. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial binomial random variable — sprbinom","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial binomial random variable — sprbinom","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate binomial random variable.","code":""},{"path":"/reference/sprbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial binomial random variable — sprbinom","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprbinom(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 1 0 1 sprbinom(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>       1 2 3 4 5 #>  [1,] 0 1 0 0 0 #>  [2,] 0 1 0 1 0 #>  [3,] 0 1 1 1 0 #>  [4,] 0 0 1 0 1 #>  [5,] 0 1 1 1 0 #>  [6,] 0 0 0 1 0 #>  [7,] 1 0 0 1 0 #>  [8,] 0 0 1 1 0 #>  [9,] 0 0 0 1 1 #> [10,] 1 1 1 0 0 #> [11,] 0 0 0 1 1 #> [12,] 1 0 0 0 1 #> [13,] 0 1 1 0 1 #> [14,] 0 1 0 0 1 #> [15,] 0 0 0 0 1 #> [16,] 1 0 1 0 1 #> [17,] 1 1 1 1 0 #> [18,] 1 1 1 0 1 #> [19,] 0 1 1 0 1 #> [20,] 0 1 0 1 1 #> [21,] 0 0 1 1 1 #> [22,] 1 0 1 0 1 #> [23,] 0 1 0 0 1 #> [24,] 1 1 0 1 1 #> [25,] 1 1 0 1 1 #> [26,] 0 0 0 1 1 #> [27,] 0 1 0 1 1 #> [28,] 1 0 0 1 1 #> [29,] 0 1 0 1 1 #> [30,] 1 0 0 1 1"},{"path":"/reference/sprgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial gamma random variable — sprgamma","title":"Simulate a spatial gamma random variable — sprgamma","text":"Simulate spatial gamma random variable specific mean covariance structure.","code":""},{"path":"/reference/sprgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial gamma random variable — sprgamma","text":"","code":"sprgamma(   spcov_params,   dispersion = 1,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial gamma random variable — sprgamma","text":"spcov_params spcov_params() object. dispersion dispersion value. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial gamma random variable — sprgamma","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial gamma random variable — sprgamma","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate gamma random variable.","code":""},{"path":"/reference/sprgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial gamma random variable — sprgamma","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprgamma(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 0.98270639 1.07797180 1.00114180 3.52250648 0.05488301 0.64124828 #>  [7] 0.53919654 0.37435704 0.91751619 1.72870091 0.50983871 0.14994100 #> [13] 1.60474635 0.53674575 1.09566900 0.72692363 0.47854694 1.70170898 #> [19] 3.74593754 2.16956750 1.82205510 2.79962799 2.58488299 2.55382392 #> [25] 2.02894600 0.23520396 3.95034670 0.03308002 0.46230388 0.83211574 sprgamma(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>                1           2           3          4          5 #>  [1,] 0.29294778 0.246858202 0.934569052 1.04609504  1.2375493 #>  [2,] 0.01592139 0.056530645 1.092646742 0.25767230  0.8191045 #>  [3,] 0.12336823 0.294679512 0.682998044 0.69441865  0.4010496 #>  [4,] 3.73616980 0.162591332 2.113933291 1.02415613  0.1488814 #>  [5,] 0.53638417 0.071098416 1.402876587 0.28645135  0.1946186 #>  [6,] 0.82942230 0.471862663 0.062689865 1.67281553  1.5536123 #>  [7,] 0.11466762 2.797688497 0.884553527 1.64178697  0.2973793 #>  [8,] 0.15173226 0.755664774 0.434129238 0.14027033  0.5114958 #>  [9,] 0.05821510 1.206234568 1.211000414 1.25912960  2.2621710 #> [10,] 0.28157817 0.366420194 6.989335635 0.34295653  0.0613713 #> [11,] 0.28956682 0.255797696 2.537159921 0.12564588  1.5853181 #> [12,] 1.24092929 0.019886829 4.093114943 0.62296431  0.9489577 #> [13,] 0.71492202 0.311115004 0.004775145 4.16471751  2.2281085 #> [14,] 0.05475184 1.896114335 0.259166671 0.10251268  0.4224656 #> [15,] 0.75003384 0.426439612 0.217030426 0.35792017  0.2034753 #> [16,] 0.54182134 1.686953994 1.259323084 0.96228744  0.5639436 #> [17,] 0.31363135 1.263526496 0.123850084 1.55907903  0.2305360 #> [18,] 0.50067005 0.001541268 1.566068217 0.23538031  0.2102147 #> [19,] 0.04011362 0.033748237 0.735497473 0.15867990  0.9748251 #> [20,] 0.42080766 1.848467254 0.806786291 0.03270243  0.7926192 #> [21,] 0.02091180 0.411449651 0.830050106 1.05483640  1.2648370 #> [22,] 0.04585424 0.011454047 4.923010363 0.04687671  0.1553963 #> [23,] 0.45749354 0.076491680 2.842836783 0.34015594  0.5570676 #> [24,] 0.34911094 0.431970023 1.002115728 0.03295408  2.6895628 #> [25,] 0.32205601 0.193319563 0.274338704 0.20141377  0.1301718 #> [26,] 0.18119603 0.976407138 2.608057953 0.75767964  2.1965644 #> [27,] 2.90653608 0.155100764 0.806582318 1.30061520 15.5373696 #> [28,] 3.35231337 0.419025208 1.503553063 3.07332082 10.5479658 #> [29,] 0.05826492 0.277838460 0.231359553 1.44842343  5.6712965 #> [30,] 0.04453266 1.069806245 0.570394807 0.41338437  0.6849160"},{"path":"/reference/sprinvgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial inverse gaussian random variable — sprinvgauss","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"Simulate spatial inverse gaussian random variable specific mean covariance structure.","code":""},{"path":"/reference/sprinvgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"","code":"sprinvgauss(   spcov_params,   dispersion = 1,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprinvgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"spcov_params spcov_params() object. dispersion dispersion value. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprinvgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprinvgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate inverse gaussian random variable.","code":""},{"path":"/reference/sprinvgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial inverse gaussian random variable — sprinvgauss","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprinvgauss(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 1.1485946 0.8010817 0.7265742 0.2452224 0.2797832 1.3859905 1.5912075 #>  [8] 0.1651390 1.6588474 2.7138778 1.1951131 0.4982750 1.2804863 0.6121312 #> [15] 3.8098501 0.2701678 0.7169791 2.4447328 0.1680631 0.7180609 1.6144222 #> [22] 1.3163777 0.1287815 0.4760385 0.5364609 0.9546622 1.1552338 0.2031314 #> [29] 0.5252252 0.1528608 sprinvgauss(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>               1         2         3         4          5 #>  [1,] 1.4516100 0.9364866 1.1125500 0.2919037 1.33570042 #>  [2,] 0.4886443 0.4222069 2.0727051 0.6582940 1.08268100 #>  [3,] 0.5294327 1.1571159 2.8861232 0.4988847 0.25784777 #>  [4,] 0.7080498 0.5896975 0.3688691 0.1603751 0.09357553 #>  [5,] 0.1322017 0.2607225 0.5892198 0.2233560 1.00169963 #>  [6,] 0.1902988 0.9848220 0.8057711 1.0413005 2.80702421 #>  [7,] 0.5389787 0.4590057 2.6765495 0.1313937 2.70370122 #>  [8,] 0.7036179 0.5144100 1.2391460 0.5202858 0.27282829 #>  [9,] 0.1570300 0.4371131 0.1233297 0.7006270 1.76984438 #> [10,] 1.5308836 1.5059862 2.7814915 1.0324497 0.37788958 #> [11,] 0.7310935 0.3730227 0.4102543 0.7097166 1.96192741 #> [12,] 2.6278824 0.5322208 1.4686491 1.1065469 0.23215664 #> [13,] 0.2122493 0.2532362 0.9110282 0.6895638 0.22917389 #> [14,] 2.6941681 1.8634511 1.7250094 0.6290500 0.28600489 #> [15,] 0.2503849 0.9622060 1.3687886 0.7487017 0.72252680 #> [16,] 0.7781355 0.1857550 0.8428252 0.6136945 4.55536982 #> [17,] 0.6404776 0.7244533 0.3089884 0.4158282 0.23801676 #> [18,] 2.4797404 0.9528518 0.1410591 0.7104054 0.25598817 #> [19,] 0.2887465 0.8532277 0.3825989 0.3782207 0.84185844 #> [20,] 2.2260643 0.2424950 1.0738033 2.7795787 3.67226106 #> [21,] 1.7214428 1.1637604 1.3590423 0.7359883 0.69465793 #> [22,] 0.4969987 1.7366107 1.0000836 0.4714949 0.06215611 #> [23,] 0.9031513 0.4173714 0.5332602 1.7304472 0.77394940 #> [24,] 0.4682711 0.7904163 0.1692009 1.0024523 0.70685058 #> [25,] 0.4577151 0.2429884 0.3521586 3.2579350 2.14803101 #> [26,] 0.7774874 0.4192960 0.1876836 0.6398956 0.45550476 #> [27,] 0.6739988 3.7043277 0.9437263 0.1808055 0.69647195 #> [28,] 2.1478802 2.0237366 2.0563698 2.0470568 0.89474793 #> [29,] 1.5078930 0.4587599 0.2112512 2.3293649 0.89804701 #> [30,] 1.8134279 1.7402841 1.3594810 0.2850804 0.19817701"},{"path":"/reference/sprnbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial negative binomial random variable — sprnbinom","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"Simulate spatial negative binomial random variable specific mean covariance structure.","code":""},{"path":"/reference/sprnbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"","code":"sprnbinom(   spcov_params,   dispersion = 1,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprnbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"spcov_params spcov_params() object. dispersion dispersion value. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprnbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprnbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate negative binomial random variable.","code":""},{"path":"/reference/sprnbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial negative binomial random variable — sprnbinom","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprnbinom(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 1 0 0 1 5 0 0 8 0 4 0 1 0 4 2 1 1 5 0 0 0 1 0 0 0 1 3 1 2 0 sprnbinom(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>       1 2 3  4 5 #>  [1,] 0 0 1  3 0 #>  [2,] 0 0 0  3 0 #>  [3,] 1 0 3  1 1 #>  [4,] 0 1 1  0 0 #>  [5,] 2 1 0  0 0 #>  [6,] 0 3 0  4 3 #>  [7,] 0 0 2  2 1 #>  [8,] 0 1 0  1 0 #>  [9,] 0 1 1  0 4 #> [10,] 0 1 0  0 5 #> [11,] 1 8 1  2 1 #> [12,] 0 3 9  1 1 #> [13,] 3 0 0  0 0 #> [14,] 4 0 0  0 0 #> [15,] 0 0 1  2 5 #> [16,] 1 0 0 13 1 #> [17,] 0 7 0  1 1 #> [18,] 0 0 3  0 1 #> [19,] 1 1 2  1 0 #> [20,] 1 0 3  0 1 #> [21,] 2 0 5  0 0 #> [22,] 3 0 1  4 0 #> [23,] 0 2 0  1 0 #> [24,] 1 2 3  2 0 #> [25,] 0 0 1  1 3 #> [26,] 2 0 0  1 3 #> [27,] 0 0 0  2 1 #> [28,] 2 0 2  0 0 #> [29,] 6 0 3  0 0 #> [30,] 0 0 3  0 0"},{"path":"/reference/sprnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial normal (Gaussian) random variable — sprnorm","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"Simulate spatial normal (Gaussian) random variable specific mean covariance structure.","code":""},{"path":"/reference/sprnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"","code":"sprnorm(   spcov_params,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )  # S3 method for exponential sprnorm(   spcov_params,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   xcoord,   ycoord,   ... )  # S3 method for none sprnorm(   spcov_params,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )  # S3 method for car sprnorm(   spcov_params,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   W,   row_st = TRUE,   M,   ... )"},{"path":"/reference/sprnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"spcov_params spcov_params() object. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... arguments. used (needed generic consistency). xcoord Name column data representing x-coordinate. Can quoted unquoted. required data sf object. ycoord Name column data representing y-coordinate. Can quoted unquoted. required data sf object. W Weight matrix specifying neighboring structure used car sar models. required data sf polygon object W calculated internally (using queen contiguity). row_st logical indicating whether row standardization performed W. default TRUE. M M matrix satisfying car symmetry condition. car symmetry condition states \\((- range * W)^{-1}M\\) symmetric, \\(\\) identity matrix, \\(range\\) constant controls spatial dependence, W weights matrix, \\(^{-1}\\) represents inverse operator. M required car models W provided row_st FALSE.  M, required, default identity matrix.","code":""},{"path":"/reference/sprnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"Random variables simulated via product covariance matrix's square (Cholesky) root independent standard normal random variables mean 0 variance 1. Computing square root significant computational burden likely unfeasible sample sizes much past 10,000. square root needs computed , however, nearly sample computational cost call sprnorm() value samples. methods exponential, none, car covariance functions documented , methods exist spatial covariance functions defined spcov_initial(). Syntax exponential method syntax spherical, gaussian, triangular, circular, cubic, pentaspherical, cosine, wave, jbessel, gravity, rquad, magnetic, matern, cauchy, pexponential methods. Syntax car method syntax sar method. extra parameter car sar models ignored observations neighbors.","code":""},{"path":"/reference/sprnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial normal (Gaussian) random variable — sprnorm","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 1, ie = 1, range = 1) sprnorm(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1]  1.26473004 -0.08800188 -0.10217510  1.08396139 -2.70095266 -0.11782871 #>  [7] -0.57106378 -1.13102477 -0.03294818 -2.29589077  1.10147275  0.25052409 #> [13]  2.30163634  1.32050582 -1.29947603 -0.42783143  0.95707449 -0.05388136 #> [19] -1.44396247 -3.86578250 -1.49293065  0.21153028 -0.35608687  1.36644210 #> [25]  0.58239536 -0.05377436 -0.35717792 -0.22176421 -1.40507795  0.50159209 sprnorm(spcov_params_val, mean = 1:30, samples = 5, data = caribou, xcoord = x, ycoord = y) #>             [,1]       [,2]      [,3]       [,4]      [,5] #>  [1,] -2.0363727  2.9745357  2.015543  1.5698743  1.556115 #>  [2,]  0.1698875  0.4667801  1.948098  0.3800091  1.854540 #>  [3,]  3.2010668  2.9950526  4.328555  1.0568804  2.446079 #>  [4,]  4.4132496  3.4424347  5.534134  3.0903143  5.257416 #>  [5,]  3.6075334  5.1132421  5.556027  5.4022159  4.755699 #>  [6,]  6.4124912  4.8203979  6.404785  7.3421055  7.244071 #>  [7,]  5.5443592  7.4900737  5.154365  6.9316569  9.213593 #>  [8,]  9.3870780  5.6368196  4.244686  6.6196488  9.474234 #>  [9,] 10.2466086  8.6628491  9.932354  7.7334614  9.910769 #> [10,]  8.5294522  9.7918048 13.115985 10.2285386 11.600444 #> [11,] 12.8322104 10.8437649 10.775110 10.9705245 12.669231 #> [12,] 10.7045256 12.4593012 12.601743 11.4322129 11.951369 #> [13,] 14.8240284 12.7019872 12.883681 13.5571062 13.253777 #> [14,] 14.7468337 12.7119091 12.800901 14.4753149 15.306393 #> [15,] 14.6744087 13.0411175 14.576579 13.6504610 12.699546 #> [16,] 16.2937059 18.0011121 14.854845 16.8945606 16.852934 #> [17,] 14.4779436 17.2874912 19.967454 17.6259736 18.427422 #> [18,] 16.4492827 15.3025666 20.184688 20.1783726 19.979044 #> [19,] 20.5857468 19.9303664 18.557557 17.1133183 22.915288 #> [20,] 20.9208273 20.1941760 21.145562 19.2744982 21.093721 #> [21,] 20.4281936 23.6160132 21.599650 21.6326348 19.703092 #> [22,] 21.3906805 23.0085891 23.245905 22.6155262 22.814409 #> [23,] 22.8140945 22.6360048 21.722885 22.2080033 23.227607 #> [24,] 22.9728191 23.9674022 25.452969 23.3047686 28.132045 #> [25,] 25.9300677 24.2642939 25.220210 25.7851270 27.607540 #> [26,] 25.2751130 27.3600400 25.246540 23.8088324 25.425311 #> [27,] 27.0754319 28.2500633 28.804192 26.7483770 28.325790 #> [28,] 27.6079180 26.9881359 27.973944 29.0514302 28.940301 #> [29,] 29.8881122 28.8681440 29.152780 27.6163821 32.386033 #> [30,] 31.3101512 29.7750371 31.033035 27.2111172 32.357267"},{"path":"/reference/sprpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a spatial Poisson random variable — sprpois","title":"Simulate a spatial Poisson random variable — sprpois","text":"Simulate spatial Poisson random variable specific mean covariance structure.","code":""},{"path":"/reference/sprpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a spatial Poisson random variable — sprpois","text":"","code":"sprpois(   spcov_params,   mean = 0,   samples = 1,   data,   randcov_params,   partition_factor,   ... )"},{"path":"/reference/sprpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a spatial Poisson random variable — sprpois","text":"spcov_params spcov_params() object. mean numeric vector representing mean. mean must length 1 (case recycled) length equal number rows data. default 0. samples number independent samples generate. default 1. data data frame sf object containing spatial information. randcov_params randcov_params() object. partition_factor formula indicating partition factor. ... Additional arguments passed sprnorm().","code":""},{"path":"/reference/sprpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a spatial Poisson random variable — sprpois","text":"samples 1, vector random variables row data returned. samples greater one, matrix random variables returned, rows correspond row data columns correspond independent samples.","code":""},{"path":"/reference/sprpois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a spatial Poisson random variable — sprpois","text":"values spcov_params, mean, randcov_params assumed link scale. used simulate latent normal (Gaussian) response variable using sprnorm(). latent variable conditional mean used dispersion simulate Poisson random variable.","code":""},{"path":"/reference/sprpois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a spatial Poisson random variable — sprpois","text":"","code":"spcov_params_val <- spcov_params(\"exponential\", de = 0.2, ie = 0.1, range = 1) sprpois(spcov_params_val, data = caribou, xcoord = x, ycoord = y) #>  [1] 5 0 2 3 1 1 0 2 0 2 0 3 3 1 2 2 3 2 1 0 2 0 1 3 2 0 0 3 1 0 sprpois(spcov_params_val, samples = 5, data = caribou, xcoord = x, ycoord = y) #>       1 2 3 4 5 #>  [1,] 0 1 0 2 0 #>  [2,] 0 1 0 0 1 #>  [3,] 1 0 5 0 0 #>  [4,] 2 0 3 0 0 #>  [5,] 0 2 0 0 4 #>  [6,] 1 1 1 1 3 #>  [7,] 1 1 0 1 2 #>  [8,] 2 0 1 1 4 #>  [9,] 1 0 1 1 1 #> [10,] 0 0 2 3 0 #> [11,] 0 1 1 0 1 #> [12,] 1 0 1 0 1 #> [13,] 0 1 1 0 2 #> [14,] 1 1 1 0 0 #> [15,] 3 1 0 0 0 #> [16,] 3 3 2 1 0 #> [17,] 3 0 0 1 1 #> [18,] 1 2 0 0 0 #> [19,] 0 1 0 0 1 #> [20,] 0 0 0 1 4 #> [21,] 0 2 1 3 6 #> [22,] 3 1 3 0 1 #> [23,] 1 0 0 0 2 #> [24,] 2 0 1 1 1 #> [25,] 0 2 1 1 0 #> [26,] 0 1 2 3 2 #> [27,] 0 1 0 0 2 #> [28,] 2 0 1 1 0 #> [29,] 0 0 0 0 0 #> [30,] 5 0 0 3 1"},{"path":"/reference/sulfate.html","id":null,"dir":"Reference","previous_headings":"","what":"Sulfate atmospheric deposition in the conterminous USA — sulfate","title":"Sulfate atmospheric deposition in the conterminous USA — sulfate","text":"Sulfate atmospheric deposition conterminous USA.","code":""},{"path":"/reference/sulfate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sulfate atmospheric deposition in the conterminous USA — sulfate","text":"","code":"sulfate"},{"path":"/reference/sulfate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sulfate atmospheric deposition in the conterminous USA — sulfate","text":"sf object 197 rows 2 columns. sulfate: Total wet deposition sulfate kilograms per hectare. geometry: POINT geometry representing coordinates Conus Albers projection (EPSG: 5070).","code":""},{"path":"/reference/sulfate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sulfate atmospheric deposition in the conterminous USA — sulfate","text":"data used publication listed References. Data downloaded National Atmospheric Deposition Program National Trends Network.","code":""},{"path":"/reference/sulfate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sulfate atmospheric deposition in the conterminous USA — sulfate","text":"Zimmerman, D.L. (1994). Statistical analysis spatial data. Pages 375-402  Statistical Methods Physical Science, J. Stanford S. Vardeman (eds.), Academic Press: New York.","code":""},{"path":"/reference/sulfate_preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","title":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","text":"Locations predict sulfate atmospheric deposition conterminous USA.","code":""},{"path":"/reference/sulfate_preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","text":"","code":"sulfate_preds"},{"path":"/reference/sulfate_preds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","text":"sf object 197 rows 1 column. geometry: POINT geometry representing coordinates Conus Albers projection (EPSG: 5070).","code":""},{"path":"/reference/sulfate_preds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","text":"data used publication listed References. Data downloaded National Atmospheric Deposition Program National Trends Network.","code":""},{"path":"/reference/sulfate_preds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Locations at which to predict sulfate atmospheric deposition in the conterminous USA — sulfate_preds","text":"Zimmerman, D.L. (1994). Statistical analysis spatial data. Pages 375-402  Statistical Methods Physical Science, J. Stanford S. Vardeman (eds.), Academic Press: New York.","code":""},{"path":"/reference/summary.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a fitted model object — summary.spmod","title":"Summarize a fitted model object — summary.spmod","text":"Summarize fitted model object.","code":""},{"path":"/reference/summary.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a fitted model object — summary.spmod","text":"","code":"# S3 method for spmod summary(object, ...)"},{"path":"/reference/summary.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a fitted model object — summary.spmod","text":"object fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/summary.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a fitted model object — summary.spmod","text":"list several fitted model quantities used create informative summaries printing.","code":""},{"path":"/reference/summary.spmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a fitted model object — summary.spmod","text":"summary.spmod() creates summary fitted model object intended printed using print(). summary contains useful information like original function call, residuals, coefficients table, pseudo r-squared, estimated covariance parameters.","code":""},{"path":[]},{"path":"/reference/summary.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a fitted model object — summary.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) summary(spmod) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.41281 -0.20763 -0.11205  0.02956  0.45429  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.04981    0.31093   6.592 4.33e-11 *** #> waterY      -0.08310    0.06449  -1.289 0.197563     #> tarpnone     0.08005    0.07759   1.032 0.302166     #> tarpshade    0.28654    0.07667   3.737 0.000186 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.3963 #>  #> Coefficients (exponential spatial covariance): #>      de      ie   range  #>  0.1109  0.0226 19.1168"},{"path":"/reference/summary.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a fitted model object — summary.spmodel","title":"Summarize a fitted model object — summary.spmodel","text":"Summarize fitted model object.","code":""},{"path":"/reference/summary.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a fitted model object — summary.spmodel","text":"","code":"# S3 method for splm summary(object, ...)  # S3 method for spautor summary(object, ...)  # S3 method for spglm summary(object, ...)  # S3 method for spgautor summary(object, ...)"},{"path":"/reference/summary.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a fitted model object — summary.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/summary.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a fitted model object — summary.spmodel","text":"list several fitted model quantities used create informative summaries printing.","code":""},{"path":"/reference/summary.spmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a fitted model object — summary.spmodel","text":"summary() creates summary fitted model object intended printed using print(). summary contains useful information like original function call, residuals, coefficients table, pseudo r-squared, estimated covariance parameters.","code":""},{"path":[]},{"path":"/reference/summary.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a fitted model object — summary.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) summary(spmod) #>  #> Call: #> splm(formula = z ~ water + tarp, data = caribou, spcov_type = \"exponential\",  #>     xcoord = x, ycoord = y) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.41281 -0.20763 -0.11205  0.02956  0.45429  #>  #> Coefficients (fixed): #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.04981    0.31093   6.592 4.33e-11 *** #> waterY      -0.08310    0.06449  -1.289 0.197563     #> tarpnone     0.08005    0.07759   1.032 0.302166     #> tarpshade    0.28654    0.07667   3.737 0.000186 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Pseudo R-squared: 0.3963 #>  #> Coefficients (exponential spatial covariance): #>      de      ie   range  #>  0.1109  0.0226 19.1168"},{"path":"/reference/tidy.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a fitted model object — tidy.spmod","title":"Tidy a fitted model object — tidy.spmod","text":"Tidy fitted model object summarized tibble.","code":""},{"path":"/reference/tidy.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a fitted model object — tidy.spmod","text":"","code":"# S3 method for spmod tidy(x, conf.int = FALSE, conf.level = 0.95, effects = \"fixed\", ...)"},{"path":"/reference/tidy.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a fitted model object — tidy.spmod","text":"x fitted model object splm() spautor() conf.int Logical indicating whether include confidence interval tidied output. default FALSE. conf.level confidence level use confidence interval conf.int TRUE. Must strictly greater 0 less 1. default 0.95, corresponds 95 percent confidence interval. effects type effects tidy. Available options \"fixed\" (fixed effects), \"spcov\" (spatial covariance parameters), \"randcov\" (random effect variances). default \"fixed\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/tidy.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a fitted model object — tidy.spmod","text":"tidy tibble summary information effects.","code":""},{"path":[]},{"path":"/reference/tidy.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a fitted model object — tidy.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) tidy(spmod) #> # A tibble: 4 x 5 #>   term        estimate std.error statistic  p.value #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl> #> 1 (Intercept)   2.05      0.311       6.59 4.33e-11 #> 2 waterY       -0.0831    0.0645     -1.29 1.98e- 1 #> 3 tarpnone      0.0801    0.0776      1.03 3.02e- 1 #> 4 tarpshade     0.287     0.0767      3.74 1.86e- 4 tidy(spmod, effects = \"spcov\") #> # A tibble: 3 x 3 #>   term  estimate is_known #>   <chr>    <dbl> <lgl>    #> 1 de      0.111  FALSE    #> 2 ie      0.0226 FALSE    #> 3 range  19.1    FALSE"},{"path":"/reference/tidy.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a fitted model object — tidy.spmodel","title":"Tidy a fitted model object — tidy.spmodel","text":"Tidy fitted model object summarized tibble.","code":""},{"path":"/reference/tidy.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a fitted model object — tidy.spmodel","text":"","code":"# S3 method for splm tidy(x, conf.int = FALSE, conf.level = 0.95, effects = \"fixed\", ...)  # S3 method for spautor tidy(x, conf.int = FALSE, conf.level = 0.95, effects = \"fixed\", ...)  # S3 method for spglm tidy(x, conf.int = FALSE, conf.level = 0.95, effects = \"fixed\", ...)  # S3 method for spgautor tidy(x, conf.int = FALSE, conf.level = 0.95, effects = \"fixed\", ...)"},{"path":"/reference/tidy.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a fitted model object — tidy.spmodel","text":"x fitted model object splm(), spautor(), spglm(), spgautor(). conf.int Logical indicating whether include confidence interval tidied output. default FALSE. conf.level confidence level use confidence interval conf.int TRUE. Must strictly greater 0 less 1. default 0.95, corresponds 95 percent confidence interval. effects type effects tidy. Available options \"fixed\" (fixed effects), \"spcov\" (spatial covariance parameters), \"randcov\" (random effect variances). default \"fixed\". ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/tidy.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a fitted model object — tidy.spmodel","text":"tidy tibble summary information effects.","code":""},{"path":[]},{"path":"/reference/tidy.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a fitted model object — tidy.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) tidy(spmod) #> # A tibble: 4 × 5 #>   term        estimate std.error statistic  p.value #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl> #> 1 (Intercept)   2.05      0.311       6.59 4.33e-11 #> 2 waterY       -0.0831    0.0645     -1.29 1.98e- 1 #> 3 tarpnone      0.0801    0.0776      1.03 3.02e- 1 #> 4 tarpshade     0.287     0.0767      3.74 1.86e- 4 tidy(spmod, effects = \"spcov\") #> # A tibble: 3 × 3 #>   term  estimate is_known #>   <chr>    <dbl> <lgl>    #> 1 de      0.111  FALSE    #> 2 ie      0.0226 FALSE    #> 3 range  19.1    FALSE"},{"path":"/reference/varcomp.html","id":null,"dir":"Reference","previous_headings":"","what":"Variability component comparison — varcomp","title":"Variability component comparison — varcomp","text":"Compare proportion total variability explained fixed effects variance parameter.","code":""},{"path":"/reference/varcomp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variability component comparison — varcomp","text":"","code":"varcomp(object, ...)  # S3 method for splm varcomp(object, ...)  # S3 method for spautor varcomp(object, ...)  # S3 method for spglm varcomp(object, ...)  # S3 method for spgautor varcomp(object, ...)"},{"path":"/reference/varcomp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variability component comparison — varcomp","text":"object fitted model object (e.g., splm(), spautor(), spglm(), spgautor()). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/varcomp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variability component comparison — varcomp","text":"tibble partitions total variability fixed effects variance parameter. proportion variability explained fixed effects pseudo R-squared obtained psuedoR2(). remaining proportion spread accordingly among variance parameter: \"de\", \"ie\", random effects used, named random effect. spautor() objects unconnected sites, list returned three elements: \"connected\" variability comparison among connected sites; \"unconnected\" variability comparison among unconnected sites; \"ratio\" ratio variance connected sites relative variance unconnected sites.","code":""},{"path":"/reference/varcomp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variability component comparison — varcomp","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) varcomp(spmod) #> # A tibble: 3 × 2 #>   varcomp            proportion #>   <chr>                   <dbl> #> 1 Covariates (PR-sq)      0.396 #> 2 de                      0.501 #> 3 ie                      0.102"},{"path":"/reference/vcov.spmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","text":"Calculate variance-covariance matrix fitted model object.","code":""},{"path":"/reference/vcov.spmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","text":"","code":"# S3 method for spmod vcov(object, ...)"},{"path":"/reference/vcov.spmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","text":"object fitted model object splm() spautor(). ... arguments. used (needed generic consistency).","code":""},{"path":"/reference/vcov.spmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","text":"variance-covariance matrix coefficients obtained via coef(). Currently, variance-covariance matrix fixed effects supported.","code":""},{"path":"/reference/vcov.spmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmod","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) vcov(spmod) #>              (Intercept)        waterY      tarpnone     tarpshade #> (Intercept)  0.096679779 -2.079467e-03 -2.849136e-03 -2.725104e-03 #> waterY      -0.002079467  4.158934e-03 -1.559269e-18  9.836439e-19 #> tarpnone    -0.002849136 -1.559269e-18  6.019454e-03  3.242625e-03 #> tarpshade   -0.002725104  9.836439e-19  3.242625e-03  5.878022e-03"},{"path":"/reference/vcov.spmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","text":"Calculate variance-covariance matrix fitted model object.","code":""},{"path":"/reference/vcov.spmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","text":"","code":"# S3 method for splm vcov(object, ...)  # S3 method for spautor vcov(object, ...)  # S3 method for spglm vcov(object, var_correct = TRUE, ...)  # S3 method for spgautor vcov(object, var_correct = TRUE, ...)"},{"path":"/reference/vcov.spmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","text":"object fitted model object splm(), spautor(), spglm(), spgautor(). ... arguments. used (needed generic consistency). var_correct logical indicating whether return corrected variance-covariance matrix models fit using spglm() spgautor(). default TRUE.","code":""},{"path":"/reference/vcov.spmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","text":"variance-covariance matrix coefficients obtained via coef(). Currently, variance-covariance matrix fixed effects supported.","code":""},{"path":"/reference/vcov.spmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variance-covariance matrix for a fitted model object — vcov.spmodel","text":"","code":"spmod <- splm(z ~ water + tarp,   data = caribou,   spcov_type = \"exponential\", xcoord = x, ycoord = y ) vcov(spmod) #>              (Intercept)        waterY      tarpnone     tarpshade #> (Intercept)  0.096679779 -2.079467e-03 -2.849136e-03 -2.725104e-03 #> waterY      -0.002079467  4.158934e-03  5.070812e-18 -5.722299e-20 #> tarpnone    -0.002849136  5.070812e-18  6.019454e-03  3.242625e-03 #> tarpshade   -0.002725104 -5.722299e-20  3.242625e-03  5.878022e-03"},{"path":"/news/index.html","id":"spmodel-060","dir":"Changelog","previous_headings":"","what":"spmodel 0.6.0","title":"spmodel 0.6.0","text":"CRAN release: 2024-04-16 Improved efficiency handling random effects big data models fit using splm(..., local) spglm(..., local). Changed Matrix::rankMatrix(X, method = \"tolNorm2\") Matrix::rankMatrix(X, method = \"qr\") enhance stability determining linear independence X, design matrix explanatory variables. Replaced error message warning message X perfect collinearities (.e., full rank). Improved efficiency splm() spcov_type \"none\" random effects (#15). Added range_positive argument spautor() spgautor() TRUE (new default), restricts range parameter positive. FALSE (prior default), range parameter may negative positive. Updated initial parameter grid search spautor() spgautor() include range parameter values near lower upper boundaries. Minor documentation updates","code":""},{"path":"/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"spmodel 0.6.0","text":"Fixed bug yielded improper predictions performing local prediction (specifying local call predict(object, newdata, ...)) model object (object) fit using splm(formula, ...) spglm(formula, ...) formula contained least one call poly(..., raw = FALSE). Fixed bug caused big data models fit using splm(..., local) spglm(..., local) fail user-specified local index passed local factor variable least one factor level observed local index. Fixed bug caused models fit using splm(..., partition_factor) spglm(..., partition_factor) fail partition factor variable factor variable least one factor level observed data. Fixed bug spgautor() inflated covariance matrix fixed effects (accessible via vcov()). Fixed bug sp*(spcov_params, ...) simulation functions caused error spcov_params class \"car\" \"sar\" W provided user.","code":""},{"path":"/news/index.html","id":"spmodel-051","dir":"Changelog","previous_headings":"","what":"spmodel 0.5.1","title":"spmodel 0.5.1","text":"CRAN release: 2024-01-09","code":""},{"path":"/news/index.html","id":"minor-updates-0-5-1","dir":"Changelog","previous_headings":"","what":"Minor Updates","title":"spmodel 0.5.1","text":"Set default value newdata_size = 1 newdata_size omitted predicting type = \"response\" binomial families. Improved computational efficiency loocv(object) object created using splm() spglm(), spcov_type \"none\", random effects specified via random. Changed number k-means iterations 10 30 (fitting models using local argument splm() spglm()). Added bias root-mean-squared-prediction error loocv(object). object created using splm() spautor(), loocv(object) added squared correlation observed data leave-one-predictions, regarded prediction r-squared. Improved prediction efficiency (using predict() augment()) splm() objects spcov_type \"none\" random effects. Minor error message updates.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"spmodel 0.5.1","text":"Fixed bug caused local prediction fail fitted model used partition factor (#13). Fixed bug caused significant increases computational memory demands calling loocv(object, local, ...) object created using splm(..., random) spglm(..., random) (.e., random effects specified via random argument splm() spglm()). Fixed bug caused significant increases computational memory demands calling loocv(object, local, ...) object created using splm(..., partition_factor) spglm(..., partition_factor) (.e., partition factor specified via partition_factor argument splm() spglm()).","code":""},{"path":"/news/index.html","id":"spmodel-050","dir":"Changelog","previous_headings":"","what":"spmodel 0.5.0","title":"spmodel 0.5.0","text":"CRAN release: 2023-10-25","code":""},{"path":"/news/index.html","id":"minor-updates-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"spmodel 0.5.0","text":"occurs, random-effect covariance observed data prediction locations assumed zero. Previously, random assignment method used group sizes approximately equal 50. Previously, 50 local neighbors used. Moved “Detailed Guide spmodel” “Technical Details” vignettes package website. Added “Spatial Generalized Linear Models spmodel” vignette package website. Changed name “Overview Basic Features spmodel” vignette “Introduction spmodel” changed output type PDF HTML. minor vignette updates. Minor documentation updates.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"spmodel 0.5.0","text":"Fixed bug occurred prediction success/failure binomial data (e.g., Bernoulli data) local predict() TRUE. Fixed bug affect simulating data using sprbinom() size argument different 1. Fixed bug cause local prediction fail one level random effect present prediction site’s local neighborhood. Fixed bug cause error local estimation used \"sv-wls\" estimation method. Fixed bug caused undesirable behavior tidy() conf.level less zero greater one.","code":""},{"path":"/news/index.html","id":"spmodel-040","dir":"Changelog","previous_headings":"","what":"spmodel 0.4.0","title":"spmodel 0.4.0","text":"CRAN release: 2023-05-26","code":""},{"path":"/news/index.html","id":"major-updates-0-4-0","dir":"Changelog","previous_headings":"","what":"Major updates","title":"spmodel 0.4.0","text":"spglm() syntax similar splm() syntax. Poisson, negative binomial, binomial, beta, gamma, inverse Gaussian families accommodated. spglm() fitted model objects use generics splm() fitted model objects. spgautor() syntax similar spautor() syntax. Poisson, negative binomial, binomial, beta, gamma, inverse Gaussian families accommodated. spgautor() fitted model objects use generics spautor() fitted model objects.","code":""},{"path":"/news/index.html","id":"minor-updates-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"spmodel 0.4.0","text":"augment(), made level local arguments explicit (rather passed predict() via ...). Added offset support relevant modeling functions. Minor documentation updates. Minor vignette updates.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"spmodel 0.4.0","text":"Fixed bug spcov_params() yielded output improper names named vector used argument. Fixed bug spautor() properly coerce M given matrix (instead vector). Fixed bug esv() prevented coercion POLYGONgeometries POINT geometries data sf object. Fixed bug esv() remove NA values response. Fixed bug splm() spautor() caused error random effects partition factors ordered factors. Fixed bug spautor() prevented error occurring partition factor categorical factor Fixed bug covmatrix(object, newdata) returned matrix improper dimensions spcov_type \"none\". Fixed bug predict() caused error least one level fixed effect factor observed within local neighborhood (local method \"covariance\" \"distance\"). Fixed bug cooks.distance() used Pearson residuals instead standarized residuals.","code":""},{"path":"/news/index.html","id":"spmodel-030","dir":"Changelog","previous_headings":"","what":"spmodel 0.3.0","title":"spmodel 0.3.0","text":"CRAN release: 2023-03-10","code":""},{"path":"/news/index.html","id":"minor-updates-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"spmodel 0.3.0","text":"Added varcomp function compare variance components. Added error message NA values predictors. Added error message design (model) matrix invertible (.e., perfect collinearities detected). Added support plotting anisotropic level curves equal correlation argument plot() contains 8. Renamed residuals() type raw response match stats::lm(). Changed class splm() output \"splm\" \"spmod\" \"splm_list\" \"spmod_list\". Changed class spautor() output \"spautor\" \"spmod\" \"spautor_list\" \"spautor_list\". Changed class splmRF() output \"splmRF\" \"spmodRF\" \"splmRF_list\" \"spmodRF_list\". Changed class spautorRF() output \"spautorRF\" \"spmodRF\" \"spautorRF_list\" \"spmodRF_list\". Methods corresponding generic function defined outside spmodel now documented using .spmodel suffix, making easier find documentation particular spmodel method generic function interest. Added error random effect grouping variables partition factors numeric. Added error random effect partition factor levels newdata also data. Updated citation information.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"spmodel 0.3.0","text":"Fixed bug produced irregular spacing error message spcov_initial(). Fixed bug prevented proper display row names calling predict() interval = \"confidence\". Fixed bug sometimes caused miscalculations model-fitting prediction random effect partition factor variables improperly coerced different type. Fixed bugs sometimes caused miscalculations certain model diagnostics. Fixed inconsistencies several non-exported generic functions. Fixed bug prevented names appearing output certain model diagnostics.","code":""},{"path":"/news/index.html","id":"spmodel-020","dir":"Changelog","previous_headings":"","what":"spmodel 0.2.0","title":"spmodel 0.2.0","text":"CRAN release: 2022-11-11 spmodel v0.3.0 changed names spmod, spmodRF, spmod_list, spmodRF_list objects.","code":""},{"path":"/news/index.html","id":"minor-updates-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"spmodel 0.2.0","text":"resulting object list class spmod_list. element list holds different model fit. glances() used spmod_list object glance model fit. predict() used spmod_list object predict locations newdata model fit. resulting object class spmodRF (one spatial covariance) spmodRF_list (multiple spatial covariances) objects built use predict() perform prediction. Added covmatrix() function extract covariance matrices spmod object fit using splm() spautor(). Minor vignette updates. Minor documentation updates.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"spmodel 0.2.0","text":"Fixed bug prevents display spatial covariance type summary spmod objects. Fixed bug prevented prediction factor variables levels factor variables appear newdata.","code":""},{"path":"/news/index.html","id":"spmodel-011","dir":"Changelog","previous_headings":"","what":"spmodel 0.1.1","title":"spmodel 0.1.1","text":"CRAN release: 2022-10-20","code":""},{"path":"/news/index.html","id":"minor-updates-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor updates","title":"spmodel 0.1.1","text":"Updated unit tests compatible upcoming version Matrix.","code":""},{"path":"/news/index.html","id":"spmodel-010","dir":"Changelog","previous_headings":"","what":"spmodel 0.1.0","title":"spmodel 0.1.0","text":"CRAN release: 2022-08-12 initial release spmodel.","code":""}]
